2012-01-15  Akim Demaille  <demaille@gostai.com>

	java: fix reduction traces.
	* data/lalr1.java (yy_reduce_print): Fix state index.
	Reported by Tim Landscheidt.

2012-01-12  Jim Meyering  <meyering@redhat.com>

	build: avoid warning from coverity about lbitset_elt_find
	* lib/lbitset.c (lbitset_elt_find): Remove unnecessary test of "elt",
	at a point where we know it is non-NULL, due to prior dereference.

2012-01-13  Jim Meyering  <meyering@redhat.com>

	maint: get fdl.texi from gnulib
	* bootstrap.conf (gnulib_modules): Add fdl.
	* doc/fdl.texi: Remove file.
	* doc/.gitignore: Add it here.

	maint: spell "file system" as two separate words
	* doc/Doxyfile.in: Spell it "file system", to avoid a
	"make syntax-check" failure.

	maint: avoid "the the"
	* djgpp/README.in: s/the the/the/
	* src/parse-gram.c (lloc_default): Likewise.
	* src/parse-gram.y (lloc_default): Likewise, and remove a
	trailing space.

2012-01-13  Akim Demaille  <akim@lrde.epita.fr>

	maint: factor copyright year.
	* configure.ac: Use $PACKAGE_COPYRIGHT_YEAR instead of repeating it.

2012-01-13  Akim Demaille  <akim@lrde.epita.fr>

	maint: catch missing gnulib macros.
	* configure.ac: Add m4_pattern_forbid.

2012-01-11  Tim Landscheidt  <tim@tim-landscheidt.de>

	java: remove used variable.
	* data/lalr1.java (yyresult): remove, unused.

2012-01-11  Akim Demaille  <demaille@gostai.com>

	scanner: fix typo.
	* src/scan-skel.l (@`): s/emtpy/empty/.
	Reported by Tim Landscheidt.

2012-01-06  Jim Meyering  <meyering@redhat.com>

	build: avoid warnings about set-but-not-used variables
	* lib/bitset_stats.c (bitset_stats_list): Remove declaration
	and set of unused local, "type".
	* lib/ebitset.c (ebitset_init): Likewise, for "size".
	* lib/lbitset.c (lbitset_not): Likewise, for "elt".

2011-08-21  Joel E. Denny  <joeldenny@joeldenny.org>

	lalr1.cc: remove trailing comma from enumerator list.
	* data/lalr1.cc (yy::parser): Here.  This suppresses a -pedantic
	warning.

2011-08-21  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: add -pedantic for --enable-gcc-warnings.
	This should help to avoid some portability problems.  For example,
	it would have revealed the empty unions fixed by the last patch
	* configure.ac (WARN_CFLAGS_TESTS, WARN_CXXFLAGS_TEST): Implement.
	* tests/synclines.at (AT_TEST_SYNCLINE): Avoid -pedantic warning
	about an empty translation unit.

2011-08-21  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: fix empty unions.
	Empty unions are not accepted by the ISO C99 grammar or by at
	least some versions of Sun Studio.  Reported by Wolfgang S. Kechel
	at
	<http://lists.gnu.org/archive/html/bug-bison/2011-08/msg00003.html>.
	* NEWS (2.5.1): Document fix.
	* THANKS (Wolfgang S. Kechel): Add.
	* tests/existing.at (GNU Cim Grammar)
	(GNU pic (Groff 1.18.1) Grammar.): Remove empty %union.

2011-07-24  Joel E. Denny  <joeldenny@joeldenny.org>

	global: remove unnecessary horizontal tabs.
	This change was made by applying emacs' untabify function to
	nearly all files in Bison's repository.  Required tabs in make
	files, ChangeLog, regexps, and test code were manually skipped.
	Other notable exceptions and changes are listed below.
	* bootstrap: Skip because we sync this with gnulib.
	* data/m4sugar/foreach.m4
	* data/m4sugar/m4sugar.m4: Skip because we sync these with
	Autoconf.
	* djgpp: Skip because I don't know how to test djgpp properly, and
	this code appears to be unmaintained anyway.
	* README-hacking (Hacking): Specify that tabs should be avoided
	where not required.

2011-07-10  Joel E. Denny  <joeldenny@joeldenny.org>

	build: avoid YACC typo inherited from Autoconf.
	The typo shows up in the `configure --help' output.  Reported by
	W.C.A. Wijngaards and Paul Eggert at
	<http://lists.gnu.org/archive/html/bug-bison/2011-07/msg00000.html>.
	* README-hacking (Release Procedure): Remind about updating
	maintainer tools before a release.
	* THANKS (W.C.A. Wijngaards): Add.
	* configure.ac (AC_PREREQ): Set to 2.68, which fixes the YACC
	typo.

2011-07-10  Joel E. Denny  <joeldenny@joeldenny.org>

	build: create xz instead of bzip2 tarballs.
	Suggested by Jim Meyering at
	<http://lists.gnu.org/archive/html/bug-bison/2011-06/msg00012.html>.
	* README-hacking (Release Procedure): Update example.
	* configure.ac (AM_INIT_AUTOMAKE): Replace dist-bzip2 with
	dist-xz.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up references to `Locations Overview'.
	* doc/bison.texinfo (Locations Overview): Rename node to...
	(Locations): ... this, which is its section name.  Update menus to
	match that and not to use the title `Tracking Locations', which is
	a different section.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up references to `Tracking Locations'.
	* doc/bison.texinfo (Locations): Rename node to...
	(Tracking Locations): ... this, which is its section name, and
	update all cross references.  The trouble is that there is another
	node about locations.  Its section name is `Locations', which was
	easily confused with the node name of this node.  Moreover, its
	node name is `Locations Overview', which was mistakenly used to
	label some cross references to this node.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up `Named References' a little.
	* doc/bison.texinfo (Named References): Rename section to match
	the node name, and update all cross references.  Don't use the
	acronyms RHS and LHS given that we don't expand them anywhere in
	the manual.  Try to use @samp and @code properly.  Mention that
	named references are experimental as we've already stated in NEWS.
	(Destructor Decl): Expand the only remaining use of RHS or LHS.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: motivate named references.
	Suggested by Hans Aberg at
	<http://lists.gnu.org/archive/html/bug-bison/2011-05/msg00008.html>.
	* doc/bison.texinfo (Named References): Explain briefly how
	they're better than the traditional positional references.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: discuss named references after locations.
	Reported by Hans Aberg at
	<http://lists.gnu.org/archive/html/bug-bison/2011-05/msg00008.html>.
	* NEWS (2.5.1): Document.
	* doc/bison.texinfo (Named References): Because it discusses
	locations in addition to semantic values, move this subsection out
	of the section `Defining Language Semantics', where locations have
	not yet been introduced, to be a new section after the following
	section, `Tracking Locations'.

2011-05-29  Joel E. Denny  <joeldenny@joeldenny.org>

	Prepare for the possibility of a 2.5.1 release.
	* NEWS (2.5.1): New heading.

2011-05-14  Joel E. Denny  <joeldenny@joeldenny.org>

	Version 2.5.
	* NEWS (2.5): Set date.

2011-05-14  Joel E. Denny  <joeldenny@joeldenny.org>

	Don't use IF_LINT in Bison sources.
	It creates unnecessary differences between the sources that Bison
	maintainers build and test (given that maintainers normally
	configure with --enable-gcc-warnings) and the sources that Bison
	users build.  Instead, use PACIFY_CC, which doesn't.  This change
	fixes compiler warnings reported by Tys Lefering at
	<http://lists.gnu.org/archive/html/bison-patches/2011-05/msg00004.html>.
	* configure.ac: Don't AC_DEFINE lint regardless of the configure
	options.  This change affects imported gnulib sources, where
	IF_LINT still appears and depends on lint.
	* src/scan-gram.l, src/scan-skel.l: Replace uses of IF_LINT with
	PACIFY_CC.
	* src/system.h (IF_LINT): Remove cpp macro.
	(PACIFY_CC): New cpp macro.

2011-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	Fix precedence for end token.
	Since Bison 2.3b, which restored the ability of precedence
	directives to assign user token numbers, doing so for user token
	number 0 has produced an assertion failure.
	* NEWS (2.5): Document fix.
	* src/symtab.c (symbol_user_token_number_set): In the case of the
	end token, don't decrement ntokens if it was never incremented.
	* tests/regression.at (Token number in precedence declaration):
	Extend.

2011-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	Pacify -DGNULIB_POSIXCHECK.
	* bootstrap.conf (gnulib_modules): Add all modules suggested by
	-DGNULIB_POSIXCHECK.
	* src/files.c (file_name_split)
	* src/getargs.c (getargs)
	* src/location.c (boundary_set_from_string)
	* src/output.c (output_skeleton)
	* src/parse-gram.y (prologue_declaration)
	* src/scan-gram.l (handle_syncline)
	* src/symtab.c (symbol_new): Use mbschr and mbsrchr instead of
	strchr and strrchr.  In the cases of command-line options, file
	names, and thus locations, functionality may be improved.  In the
	case of symbol names, there should be no functional difference as
	all characters are ASCII, so the intended benefit is just warning
	suppression.

2011-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	* NEWS (2.5): Fix minor typos.

2011-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up quotation style in NEWS.
	* NEWS (2.5): For multi-character tokens in example grammar rules,
	use "token" not 'token'.  In English, use a consistent quotation
	style; we might as well follow the precedent seen in info pages:
	`quote' not "quote".

2011-04-16  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: pacify gcc 4.6.0's -Wunused-but-set-variable.
	Reported by Jim Meyering at
	<http://lists.gnu.org/archive/html/bug-bison/2011-04/msg00002.html>.
	* tests/actions.at
	(Default %printer and %destructor for mid-rule values): Define
	YYLLOC_DEFAULT so that it uses its Rhs argument.

2011-04-16  Joel E. Denny  <joeldenny@joeldenny.org>

	glr.c: omit yyresolveLocations when locations are disabled.
	This prevents gcc 4.6.0's -Wunused-but-set-variable from warning
	about yyresolveLocations's local yyrhsloc.  When locations are
	enabled, there's no such warning because YYLLOC_DEFAULT then uses
	yyrhsloc.  Reported by Jim Meyering at
	<http://lists.gnu.org/archive/html/bug-bison/2011-04/msg00002.html>.
	* data/glr.c (yyresolveLocations): Omit definition when locations
	are disabled.
	(yyresolveValue): Omit yyresolveLocations invocation when
	locations are disabled.

2011-04-16  Joel E. Denny  <joeldenny@joeldenny.org>

	gnulib, autoconf: update.
	* README-hacking (Updating a submodule): Give advice on how to
	determine the versions of gnulib and autoconf to which we should
	update.
	(Release Procedure): Note that submodules should be updated.
	* bootstrap.conf (gnulib_modules): Rename pipe to spawn-pipe as
	suggested in updated gnulib NEWS.
	* gnulib: Choose a stable snapshot according to advice in Bison's
	README-hacking.
	* po/POTFILES.in (lib/pipe.c): Rename to...
	(lib/spawn-pipe.c): ... this.
	* src/output.c: Update to include spawn-pipe.h.
	* submodules/autoconf: Update to latest for improvement in m4.m4
	that excludes M4 with buggy strstr.  The only other changes to
	files that we use are copyright updates.

2011-04-09  Joel E. Denny  <joeldenny@joeldenny.org>

	Fix missing updates to GPLv3.
	Reported by Tys Lefering at
	<http://lists.gnu.org/archive/html/bison-patches/2011-04/msg00000.html>.
	* src/print-xml.c, src/print-xml.h: In these files.

2011-03-27  Joel E. Denny  <joeldenny@joeldenny.org>

	Add -Wconflicts-sr and -Wconflicts-rr.
	Thus, conflict reports are now affected by -Werror and -Wnone
	(unless %expect or %expect-rr is specified).  Reported by George
	Neuner at
	<http://lists.gnu.org/archive/html/bug-bison/2010-08/msg00002.html>.
	* NEWS (2.5): Document.
	* doc/bison.texinfo (Bison Options): Document.
	* src/complain.c, src/complain.h (set_warning_issued): Export
	function.
	* src/conflicts.c (conflicts_print): Suppress conflict report
	based on -Wno-conflicts-sr and -Wno-conflicts-rr, and treat
	conflicts as errors if -Werror.
	* src/getargs.c (warnings_flag): Initialize with
	warnings_conflicts_sr and warnings_conflicts_rr as well.
	(warnings_args, warnings_types): Add entries for
	warnings_conflicts_sr and warnings_conflicts_rr.
	(usage): Update.
	* src/getargs.h (enum warnings): Add entries for
	warnings_conflicts_sr and warnings_conflicts_rr.
	* tests/conflicts.at (-W versus %expect and %expect-rr): New test
	group.
	* tests/local.at (AT_BISON_CHECK_NO_XML): Update now that the
	conflict report can produce a "warnings being treated as errors"
	message.  Also, check that stderr is now fully scrubbed by -Wnone
	when the exit status is 0.

2011-03-27  Joel E. Denny  <joeldenny@joeldenny.org>

	Pacify maintainer-check-posix.
	Adding command-line options after the grammar file name is not
	permitted, so disable checks that do that when
	maintainer-check-posix is running.
	* tests/local.at (AT_BISON_CHECK_NO_XML): Don't run the
	problematic checks when POSIXLY_CORRECT=1.  Also, for readability,
	remove an unnecessary m4_if.

2011-03-27  Joel E. Denny  <joeldenny@joeldenny.org>

	Add -Wother so -Wnone suppresses all warnings.
	Reported by George Neuner at
	<http://lists.gnu.org/archive/html/bug-bison/2010-08/msg00002.html>.
	* NEWS (2.5): Document.
	* THANKS (George Neuner): Add.
	* doc/bison.texinfo (Bison Options): Document.
	* src/complain.c, src/complain.h
	(warn_at, warn_at_indent, warn): Suppress warning if -Wno-other.
	(midrule_value_at): New warning function, similar to yacc_at in
	that it's controlled by its own warning category.
	* src/getargs.c (warnings_flag): Initialize to warnings_other.
	(warnings_args, warnings_types): Add entry for warnings_other.
	(usage): Update.
	* src/getargs.h (enum warnings): Add entry for warnings_other.
	* src/gram.c (grammar_rules_useless_report): If -Wno-other, then
	don't print useless rules.
	* src/reader.c (symbol_should_be_used): Rather than adjusting the
	return value based on whether midrule value warnings are enabled,
	accept a new parameter for telling the caller whether true is
	being returned for a potential midrule warning.
	(grammar_rule_check): Use midrule_value_at for midrule value
	warnings, and continue to use warn_at for all other warnings.  Let
	them check whether the warnings are enabled.
	* tests/local.at (AT_BISON_CHECK): Update documentation.
	(AT_BISON_CHECK_NO_XML): Check that -Wnone and --warnings=none
	disable all warnings exercised in the test suite.

2011-03-27  Joel E. Denny  <joeldenny@joeldenny.org>

	Don't let -Wnone disable -Werror.
	Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2010-08/msg00009.html>.
	* NEWS (2.5): Document.
	* src/getargs.c (flags_argmatch): Accept a new argument that
	specifies what flags "all" and thus "none" affect.
	(FLAGS_ARGMATCH): Update flags_argmatch invocation.
	* tests/input.at (-Werror is not affected by -Wnone and -Wall):
	New test group.

2011-03-27  Joel E. Denny  <joeldenny@joeldenny.org>

	* NEWS (2.5): Document fix for -Wno-CATEGORY.

2011-03-20  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: fix confusing citation of LAC publication.
	Suggested by Akim Demaille.
	* doc/bison.texinfo (LAC): Here.

2011-03-20  Joel E. Denny  <joeldenny@joeldenny.org>

	lr.default-reductions: rename "full" value to "most".
	Unlike "consistent" and "accepting", "full" doesn't answer the
	question of "which states".
	* doc/bison.texinfo (%define Summary): Update.
	(Default Reductions): Update.
	* src/print.c (print_reductions): Update.
	* src/reader.c (prepare_percent_define_front_end_variables):
	Update.
	* src/tables.c (action_row): Update.
	* tests/input.at (%define enum variables): Update.
	* tests/reduce.at (%define lr.default-reductions): Update.

2011-03-13  Joel E. Denny  <joeldenny@joeldenny.org>

	* src/parse-gram.c, src/parse-gram.h: Regenerate.

2011-03-09  Akim Demaille  <akim@lrde.epita.fr>

	named references: fix double free.
	In `rhs[name]: "a" | "b"', do not free "name" twice.
	Reported by Tys Lefering.
	<http://lists.gnu.org/archive/html/bug-bison/2010-06/msg00002.html>
	* src/named-ref.h, src/named-ref.c (named_ref_copy): New.
	* src/parse-gram.y (current_lhs): Rename as...
	(current_lhs_symbol): this.
	(current_lhs): New function.  Use it to free the current lhs
	named reference.
	* src/reader.c: Bind lhs to a copy of the current named reference.
	* src/symlist.c: Rely on free (0) being valid.
	* tests/named-refs.at: Test this.

2011-03-09  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes.
	* tests/named-refs.at (Redundant words in LHS brackets)
	(Unresolved references): here.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	java: fix parser tracing bug.
	* NEWS (2.5): Document.
	* data/lalr1.java (YYParser::YYStack::print): Don't skip top
	element.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	java: finish fixing parser stack popping bug.
	* NEWS (2.5): Document.
	* data/lalr1.java (YYParser::YYStack::pop): Fix off-by-one error
	in clearing the location stack.  Also fix pop function that
	accepts no arguments.

2011-03-06  Angelo Borsotti  <angelo.borsotti@gmail.com>  (tiny change)

	java: fix parser stack popping bug.
	Reported at
	<http://lists.gnu.org/archive/html/bug-bison/2011-02/msg00005.html>.
	* THANKS (Angelo Borsotti): Add.
	* data/lalr1.java (YYParser::YYStack::pop): Fix off-by-one error
	in clearing the value stack.  Previously, the top element of the
	stack wasn't cleared and so the value was not garbage collected.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: cite publication for LAC.
	* doc/bison.texinfo (LAC): Here.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up terminology for mysterious conflicts.
	* doc/bison.texinfo (Mystery Conflicts): Rename node to...
	(Mysterious Conflicts): ... this, which is already the section
	title and the name used in the index.  Update all cross-references
	to this node.  Also, don't imply that R/R conflicts are the only
	kind of mysterious conflict.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	lr.default-reductions: rename "all" value to "full".
	States that shift the error token do not have default reductions,
	and GLR disables some default reductions, so "all" was a misnomer.
	* doc/bison.texinfo (%define Summary): Update.
	(Default Reductions): Update.
	* src/print.c (print_reductions): Update.
	* src/reader.c (prepare_percent_define_front_end_variables):
	Update.
	* src/tables.c (action_row): Update.
	* tests/input.at (%define enum variables): Update.
	* tests/reduce.at (%define lr.default-reductions): Update.

2011-03-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: create a new Tuning LR section in the manual.
	And clean up all other documentation of the features described
	there.
	* NEWS (2.5): Tweak wording of lr.type and parse.lac entries a
	bit, update the cross-references to the manual, and point out that
	LAC has caveats.  Don't be so adamant that IELR+LAC=canonical LR.
	That is, as the referenced section in the manual documents, LAC
	does not fix infinite parsing loops on syntax errors.
	* doc/bison.texinfo: Consistently drop the "(1)" suffix from LALR,
	IELR, and LR in @cindex.
	(%define Summary): Condense the entries for lr.default-reductions,
	lr.keep-unreachable-states, lr.type, and parse.lac into brief
	summaries, and cross-reference the appropriate subsections of
	Tuning LR.  For parse.lac, mention that it's only implemented for
	deterministic parsers in C.  In parse.error entry, mention LAC,
	and add cross-reference to the LAC section.
	(Error Reporting): When mentioning parse.error, mention LAC, and
	add cross-reference to the LAC section.
	(Tuning LR): New section with an extended version of the
	documentation removed from %define Summary.  Change all
	cross-references in the manual to point here instead of there.
	(Calc++ Parser): When mentioning parse.error, mention LAC, and add
	cross-reference to the LAC section.
	(Table of Symbols): In %error-verbose entry, add cross-reference
	to Error Reporting.
	(Glossary): Capitalize entry titles consistently.  Add definitions
	for "defaulted state" and "unreachable state".  Expand IELR
	acronym in IELR's entry.

2011-02-20  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: add bibliography to manual.
	* doc/bison.texinfo (Mystery Conflicts): Cross-reference
	bibliography instead of citing publications directly.
	(Generalized LR Parsing): Likewise.
	(Bibliography): New section.  Not all entries are cross-referenced
	yet, but that will come in future patches.

2011-02-19  Joel E. Denny  <joeldenny@joeldenny.org>

	java: test and document previous bug fix.
	* NEWS (2.5): Document it.
	* tests/java.at (_AT_DATA_JAVA_CALC_Y): To one of the yyerror
	invocations, pass a location that spans multiple tokens.  Change
	yyerror to report all of a location rather than just the begin
	position.  Extend yylex and Position to count tokens on a line.
	Remove getHashCode as it's unused.  Update all expected output.

2011-02-19  Bernd Kiefer  <kiefer@dfki.de>  (tiny change)

	java: fix location handling bug.
	Reported at
	<http://lists.gnu.org/archive/html/bison-patches/2011-02/msg00005.html>.
	* data/lalr1.java (YYParser::yylloc): For non-empty RHS, fix
	reversed access to location stack.
	* THANKS (Bernd Kiefer): Add.

2011-02-13  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: fix some minor inconsistencies.
	* doc/bison.texinfo (%define Summary): Fix mislabeled entry for
	lex_symbol.
	(%code Summary): For consistency with the variable list in the
	%define Summary, enclose the list of %code qualifiers in a table
	instead of an itemize.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up new subsections in manual.
	* doc/bison.texinfo (%define Summary): Reword so it reads well as
	a separate section.  For example, add an intro, and move most of
	the text outside of the @deffn so it is not indented so far.
	(%code Summary): Likewise.
	(Table of Symbols): Reword %code entry to match the %code entry in
	Decl Summary.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: finish splitting apart the manual's Decl Summary section.
	Suggested by Akim Demaille at
	<http://lists.gnu.org/archive/html/bison-patches/2009-05/msg00013.html>.
	* doc/bison.texinfo (Decl Summary): Extract most of the %define
	entry into...
	(%define Summary): ... this new subsection, and update all
	cross-references.  For readability of the patches, rewriting of
	the text so it makes sense as a separate subsection will come in a
	later patch.  Moreover, the majority of the text describing the
	various new LR features should likely move to another new section
	somewhere.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: begin to split apart the manual's Decl Summary section.
	Discussed in thread starting at
	<http://lists.gnu.org/archive/html/bison-patches/2009-05/msg00013.html>.
	* doc/bison.texinfo (Decl Summary): Extract most of the %code
	entry into...
	(%code Summary): ... this new subsection, and update all
	cross-references.  For readability of the patches, rewriting of
	the text so it makes sense as a separate subsection will come in a
	later patch.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: clean up naming of various Bison files.
	The Bison manual's names for various files associated with a Bison
	parser has devolved into inconsistency.  This patch makes the
	naming consistent for the most important files.  First, it chooses
	"grammar file" over "input file".  The former appears to be more
	traditional in the Bison manual, and Bison has other input
	files (skeletons).  Second, it chooses "parser implementation
	file" over names like "parser file", "parser source file", "parser
	source code file", and "parser output file".  The new name makes
	it clearer where Bison generates the main parser implementation,
	and it is easily distinguishable from "parser header file".
	* doc/bison.texinfo: Implement throughout.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: give credit to more of Bison's developers.
	* doc/bison.texinfo (Introduction): Don't imply that only Robert
	Corbett, Richard Stallman, and Wilfred Hansen have contributed to
	Bison.  However, I don't have time to write a full history, so
	just point readers to THANKS and ChangeLog.

2011-02-06  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: document experimental features better.
	* doc/bison.texinfo (Introduction): Say that IELR(1) and canonical
	LR(1) are experimental.  Mention Java.  Normally experimental
	features probably shouldn't be mentioned in the introduction.
	However, if Bison's limitations to LALR(1), C, and C++ are so
	important that they should be mentioned here, then it's important
	to point out that Bison is beginning to escape those limitations.
	Moreover, these particular experimental features have very little
	chance of being removed.
	* src/getargs.c (usage): Say that IELR(1) and canonical LR(1) are
	experimental.

2011-01-29  Joel E. Denny  <joeldenny@joeldenny.org>

	Do not allow identifiers that start with a dash.
	This cleans up our previous fixes for a bug whereby Bison
	discarded `.field' in `$-1.field'.  The previous fixes were less
	restrictive about where a dash could appear in an identifier, but
	the restrictions were hard to explain.  That bug was reported and
	this final fix was originally suggested by Paul Hilfinger.  This
	also fixes a remaining bug reported by Paul Eggert whereby Bison
	parses `%token ID -123' as `%token ID - 123' and handles `-' as an
	identifier.  Now, `-' cannot be an identifier.  Discussed in
	threads beginning at
	<http://lists.gnu.org/archive/html/bug-bison/2011-01/msg00000.html>,
	<http://lists.gnu.org/archive/html/bug-bison/2011-01/msg00004.html>.
	* NEWS (2.5): Update entry describing the dash extension to
	grammar symbol names.  Also, move that entry before the named
	references entry because the latter mentions the former.
	* doc/bison.texinfo (Symbol): Update documentation for symbol
	names.  As suggested by Paul Eggert, mention the effect of periods
	and dashes on named references.
	(Decl Summary): Update documentation for unquoted %define values,
	which, as a side effect, can no longer start with dashes either.
	* src/scan-code.l (id): Implement.
	* src/scan-gram.l (id): Implement.
	* tests/actions.at (Exotic Dollars): Extend test group to exercise
	bug reported by Paul Hilfinger.
	* tests/input.at (Symbols): Update test group, and extend to
	exercise bug reported by Paul Eggert.
	* tests/named-refs.at (Stray symbols in brackets): Update test
	group.
	($ or @ followed by . or -): Likewise.
	* tests/regression.at (Invalid inputs): Likewise.

2011-01-24  Joel E. Denny  <joeldenny@joeldenny.org>

	* data/yacc.c: Fix last apostrophe warning from xgettext.

2011-01-09  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems encountered by a fresh bootstrap.
	* data/glr.c, data/yacc.c: Do not use apostrophes in '#' comments,
	as they confuse xgettext, which tries to parse them as C character
	constants in a preprocessor directive.
	* data/yacc.c (yy_lac): Don't use printf %d format on *yyesp, as
	that expression might not promote to int on some platforms.
	* src/parse-gram.c, src/parse-gram.h: Regenerate.

2011-01-09  Joel E. Denny  <joeldenny@joeldenny.org>

	Improve error messages for `$' or `@' followed by `.' or `-'.
	Previously, for this special case of an invalid reference, the
	usual "symbol not found in production:" was printed.  However,
	because the symbol name was parsed as the empty string, that
	message was followed immediately by a newline instead of a symbol
	name.  In reality, this is a syntax error, so the reference is
	invalid regardless of the symbols actually appearing in the
	production.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2011-01/msg00012.html>.
	* src/scan-code.l (parse_ref): Report the above case as a syntax
	error.  Other than that, continue to handle this case like any
	other invalid reference that Bison manages to parse because
	"possibly meant" messages can still be helpful to the user.
	* tests/named-refs.at ($ or @ followed by . or -): New test group.

2011-01-08  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: don't use @acronym.
	Lately, many GNU packages are dropping it.  See
	<http://lists.gnu.org/archive/html/bison-patches/2011-01/msg00003.html>.
	* doc/bison.texinfo: Remove all uses.

2011-01-05  Alex Rozenman  <rozenman@gmail.com>

	Do not allow identifiers that start with a negative number.
	Reported by Paul Hilfinger as a side effect of named references
	support at
	<http://lists.gnu.org/archive/html/bug-bison/2011-01/msg00000.html>.
	Suggested by Paul Eggert.
	* src/scan-code.l ({letter}, {id}): Adjust lexical definitions.
	* src/scan-gram.l ({letter}, {id}): Likewise.

2011-01-03  Joel E. Denny  <joeldenny@joeldenny.org>

	* ChangeLog (2011-01-02): improve description.

2011-01-03  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: don't update copyright years in bootstrap.
	* .x-update-copyright: Add entry for bootstrap.
	* bootstrap: Remove 2011 from copyright years.  The bootstrap
	version we're currently using comes from an older version of
	gnulib.
	* bootstrap.conf (bootstrap_sync): Add comments explaining this
	issue.

2011-01-02  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: run "make update-copyright".

2011-01-02  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: prepare to use year ranges in copyright notices.
	* README (Copyright statements): New section explaining the range
	notation.  The GNU maintainers document requires this explanation:
	<http://www.gnu.org/prep/maintain/maintain.html#Copyright-Notices>.
	I copied our explanation from coreutils.
	* build-aux/update-b4-copyright: Revert 2010-06-17 changes that
	disabled Bison's automated use of ranges.
	* cfg.mk (update-copyright-env): Likewise.

2011-01-02  Joel E. Denny  <joeldenny@joeldenny.org>

	Correct my email address.
	* ChangeLog: In all recent entries.
	* THANKS (Joel E. Denny): Here.

2010-12-19  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: cleanup.
	* NEWS (2.5): Try to sort entries according to how interesting
	users might find them.

2010-12-19  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: cleanup.
	* NEWS (2.5): Make some minor improvements to wording, and format
	entries more consistently.
	* doc/bison.texinfo (Language and Grammar): Point out that IELR
	and canonical LR are experimental features.
	(Decl Summary): In list of %define variables, make wording more
	consistent.  Improve discussion of using LALR for GLR.

2010-12-19  Joel E. Denny  <joeldenny@joeldenny.org>

	parse.lac: document.
	* NEWS (2.5): Add entry for LAC, and mention LAC in entry for
	other corrections to verbose syntax error messages.
	* doc/bison.texinfo (Decl Summary): Rewrite entries for
	lr.default-reductions and lr.type to be clearer, to mention
	%nonassoc's effect on canonical LR, and to mention LAC.  Add entry
	for parse.lac.
	(Glossary): Add entry for LAC.

2010-12-11  Joel E. Denny  <joeldenny@joeldenny.org>

	parse.lac: implement exploratory stack reallocations.
	* data/yacc.c: Rename %define variable parse.lac.es-capacity to
	parse.lac.es-capacity-initial.  Accept parse.lac.memory-trace
	with values of "failures" (default) or "full".
	(b4_declare_parser_state_variables): Add yyesa, yyes, and
	yyes_capacity variables.
	(YYSTACK_USE_ALLOCA): Ignore it if LAC requested.
	(YYSTACK_ALLOC, YYSTACK_FREE, YYSTACK_ALLOC_MAXIMUM): Define if
	LAC requested.
	(YYCOPY_NEEDED): New cpp macro.
	(YYCOPY): Define if LAC requested.
	(yy_lac_stack_realloc): New function implementing stack
	reallocations.  Use YYMAXDEPTH for maximum stack size given that
	the stack should never need to grow larger than the main state
	stack needs to grow without LAC.
	(YY_LAC_ESTABLISH): Update yy_lac invocation.
	(yy_lac): Add arguments for exploratory stack memory data
	recorded in the main parser.  Invoke yy_lac_stack_realloc when
	reallocation is necessary.
	(yysyntax_error): Add the same new arguments and pass them to
	yy_lac.
	(yypstate_delete): Free yyes if necessary.
	(yyesa, yyes, yyes_capacity): #define these to yypstate members
	in the case of push parsing.
	(yyparse, yypush_parse): Initialize yyes and yyes_capacity.
	Update yysyntax_error invocations.  At yyreturn, free yyes if
	necessary.
	* src/parse-gram.y: %define parse.lac full.
	* tests/input.at (LAC: errors for %define): Extend for
	parse.lac-memory-trace.
	* tests/regression.at (LAC: Exploratory stack): Extend to check
	that stack reallocs happen when expected.
	(LAC: Memory exhaustion): Update to use YYMAXDEPTH and
	parse.lac.es-capacity-initial.

2010-12-11  Joel E. Denny  <joeldenny@joeldenny.org>

	parse.lac: implement as %define variable.
	LAC = lookahead correction.  See discussion at
	<http://lists.gnu.org/archive/html/bison-patches/2009-09/msg00034.html>.
	However, one point there must be corrected: because of %nonassoc,
	LAC is *not* always redundant for lr.type=canonical-lr.
	* data/yacc.c: Accept values of "none" (default) or "full" for
	parse.lac.  Accept %define parse.lac.es-capacity to specify
	capacity of LAC's temporary exploratory stack.  It defaults to 20
	and, for now, will not grow dynamically.
	(b4_lac_flag, b4_lac_if): New m4 macros.  Evaluate as true for
	parse.lac!=none.
	(YYBACKUP): Invoke YY_LAC_DISCARD.
	(YY_LAC_ESTABLISH, YY_LAC_DISCARD): New cpp macros that invoke
	yy_lac and track when it needs to be invoked
	(yy_lac): New function that, given the current stack, determines
	whether a token can eventually be shifted.  Return status mimics
	yyparse return status.
	(yysyntax_error): Change yystate argument to yyssp so stack top
	can be passed to yy_lac.  If LAC is requested, build expected
	token list by invoking yy_lac for every token instead of just
	checking the current state for lookaheads.  Return 2 if yy_lac
	exhausts memory.
	(yyparse, yypush_parse): Use local variable yy_lac_established and
	cpp macros YY_LAC_ESTABLISH and YY_LAC_DISCARD to implement LAC.
	Update yysyntax_error invocation.  Add yyexhaustedlab code if LAC
	is requested.
	* tests/conflicts.at (%nonassoc and eof): Extend to check the
	effect of each of -Dlr.type=canonical-lr and -Dparse.lac=full.
	(parse.error=verbose and consistent errors): Likewise.
	(LAC: %nonassoc requires splitting canonical LR states): New test
	group demonstrating how LAC can fix canonical LR.
	* tests/input.at (LAC: Errors for %define): New test group.
	* tests/regression.at (LAC: Exploratory stack): New test group.
	(LAC: Memory exhaustion): New test group.

2010-11-21  Joel E. Denny  <joeldenny@joeldenny.org>

	build: use gnulib's new bootstrap_sync option.
	Now, whenever we update bison's copy of gnulib, bootstrap will
	update itself the next time it's run.
	* bootstrap: Copy from latest gnulib for bootstrap_sync support.
	* bootstrap.conf (bootstrap_sync): Set to true.
	* gnulib: Update to latest so bootstrap is in sync now.

2010-11-07  Joel E. Denny  <joeldenny@joeldenny.org>

	yysyntax_error: fix for consistent error with lookahead.
	* NEWS (2.5): Document.
	* data/yacc.c (yysyntax_error): In a verbose syntax error
	message while in a consistent state with a default action (which
	must be an error action given that yysyntax_error is being
	invoked), continue to drop the expected token list, but don't
	drop the unexpected token unless there actually is no lookahead.
	Moreover, handle that internally instead of returning 1 to tell
	the caller to do it.  With that meaning of 1 gone, renumber
	return codes more usefully.
	(yyparse, yypush_parse): Update yysyntax_error usage.  Most
	importantly, set yytoken to YYEMPTY when there's no lookahead.
	* data/glr.c (yyreportSyntaxError): As in yacc.c, don't drop the
	unexpected token unless there actually is no lookahead.
	* data/lalr1.cc (yy::parser::parse): If there's no lookahead,
	pass yyempty_ not yyla.type to yysyntax_error_.
	(yy::parser::yysyntax_error_): Again, don't drop the unexpected
	token unless there actually is no lookahead.
	* data/lalr1.java (YYParser::parse): If there's no lookahead,
	set yytoken to yyempty_ before invoking yysyntax_error.
	(YYParser::yysyntax_error): Again, don't drop the unexpected
	token unless there actually is no lookahead.
	* tests/conflicts.at (parse.error=verbose and consistent
	errors): Extend test group to further reveal how the previous
	use of the simple "syntax error" message was too general.  Test
	yacc.c, glr.c, lalr1.cc, and lalr1.java.  No longer an expected
	failure.
	* tests/java.at (AT_JAVA_COMPILE, AT_JAVA_PARSER_CHECK): Move
	to...
	* tests/local.at: ... here.
	(_AT_BISON_OPTION_PUSHDEFS): Push AT_SKEL_JAVA_IF definition.
	(AT_BISON_OPTION_POPDEFS): Pop it.
	(AT_FULL_COMPILE): Extend to handle Java.

2010-11-07  Joel E. Denny  <joeldenny@joeldenny.org>

	yysyntax_error: more preparation for readability of next patch.
	There are no behavioral changes here.
	* data/glr.c (yyreportSyntaxError): Reorganize.
	* data/lalr1.cc (yy::parser::yysyntax_error_): Reorganize.
	* tests/conflicts.at (parse.error=verbose and consistent errors):
	Reorganize.

2010-11-07  Joel E. Denny  <joeldenny@joeldenny.org>

	yysyntax_error: prepare for readability of next patches.
	These are purely whitespace changes that result in ugly code
	but that make the next couple of patches much easier to read.
	* data/glr.c (yyreportSyntaxError): Reindent.
	* data/lalr1.cc (yy::parser::yysyntax_error_): Reindent.
	* data/lalr1.java (YYParser::yysyntax_error): Reindent.
	* data/yacc.c (yysyntax_error): Reindent.

2010-10-31  Joel E. Denny  <joeldenny@joeldenny.org>

	Fix memory leak.
	* src/output.c (prepare_rules): Free temporary array.

2010-10-31  Joel E. Denny  <joeldenny@joeldenny.org>

	yysyntax_error: improve invocation readability.
	* data/yacc.c (yyparse, yypush_parse): For yysyntax_error
	invocation, get rid of the while loop, which is misleading
	because there are really at most two iterations.

2010-10-31  Joel E. Denny  <joeldenny@joeldenny.org>

	* ChangeLog: Correct some errors in previous entries.

2010-10-17  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: re-anchor all .gitignore entries.
	* bootstrap: Copy from gnulib's latest for the fix to
	automatically anchor entries it constructs.
	* gnulib: Update to latest just so it has the same bootstrap.
	* .gitignore, build-aux/.gitignore, doc/.gitignore:
	* lib/.gitignore, m4/.gitignore, po/.gitignore:
	* runtime-po/.gitignore: Re-anchor all entries.

2010-10-08  Paul Eggert  <eggert@cs.ucla.edu>

	Fix portability problem on OpenBSD 4.7.

	Jim Meyering reported this in
	<http://lists.gnu.org/archive/html/bug-bison/2010-10/msg00007.html>.
	* data/yacc.c: Use EXIT_SUCCESS as a witness for stdlib.h,
	not _STDLIB_H.  EXIT_SUCCESS has been defined by the standard
	for quite some time.
	* src/parse-gram.c, src/parse-gram.h: Regenerate.
	* tests/regression.at: Tamper with the renamed witness.

	Adjust to recent changes to gnulib bootstrap.

	* .cvsignore, build-aux/.cvsignore, doc/.cvsignore, etc/.cvsignore:
	* examples/calc++/.cvsignore, lib/.cvsignore, m4/.cvsignore:
	* po/.cvsignore, runtime-po/.cvsignore, src/.cvsignore:
	* tests/.cvsignore: Remove; I don't use CVS to maintain Bison
	anymore and don't know of anybody else who does.  If someone needs
	these files, they can resurrect them.
	* .gitignore, build-aux/.gitignore, doc/.gitignore, lib/.gitignore:
	* m4/.gitignore, po/.gitignore, runtime-po/.gitignore:
	Omit leading '/', since bootstrap omits it.
	Adjust file names to match current contents better.
	* bootstrap: Sync from gnulib: this contains the new gnulib_mk_hook
	installed just for us.
	* bootstrap.conf (excluded_files): Don't exclude codeset.m4,
	glibc21.m4, inttypes_h.m4, size_max.m4, xsize.m4, as they are now
	needed somehow.  Don't have time to look into why.
	(gnulib_modules): Change malloc to malloc-gnu.  Do we really assume
	the GNU malloc behavior, where malloc (0) != NULL unless we're
	out of storage?  If not, we can omit malloc-gnu; but for now I left
	it in to be safe.
	(vc_ignore): Remove.
	(gnulib_mk_hook): New function.
	* README-hacking: Renamed from HACKING, since gnulib bootstrap now
	uses that convention.

2010-09-09  Paul Hilfinger  <hilfinger@cs.berkeley.edu>

	* data/glr.c (yySymbol): Define as int to avoid compiler warnings about
	possible change of value.

2010-09-08  Paul Hilfinger  <hilfinger@cs.berkeley.edu>

	* data/glr.c (yy_reduce_print): Change yyrhsVals to yyvsp to remove
	compiler errors when using %debug.
	Add declaration of yylow when locations in use to avoid compilation
	error.
	(yyglrReduce): Conditionalize message "Parse ... rejected by rule..."
	on whether we are in split mode, for consistency with behavior of
	non-GLR parsing.

2010-09-01  Akim Demaille  <demaille@gostai.com>

	Address GCC warnings about shadowed local variables (yyflag).
	* data/glr.c (YYCHK): Rename yyflag as yychk_flag.
	(yyprocessOneStack): Reduce the scope of yyaction, yyconflicts,
	yyrule, and yyflag.

2010-08-05  Joel E. Denny  <joeldenny@joeldenny.org>

	Version 2.4.3.
	* NEWS (2.4.3): Set date.

2010-08-04  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: add gettext version to release announcements.
	Suggested by Paul Hilfinger at
	<http://lists.gnu.org/archive/html/bison-patches/2010-07/msg00019.html>
	<http://lists.gnu.org/archive/html/bison-patches/2010-08/msg00002.html>.
	* cfg.mk (bootstrap-tools): Add gettext.

2010-08-04  Joel E. Denny  <joeldenny@joeldenny.org>

	doc: fix -W and %expect documentation some.
	* NEWS (2.4.3): Mention that there are documentation fixes.
	* doc/bison.texinfo (Expect Decl): Make it clear that %expect
	turns conflicts into errors not warnings.
	(Shift/Reduce): Likewise.
	(Bison Options): Don't mention -Wsyntax.  It doesn't exist.

2010-08-01  Joel E. Denny  <joeldenny@joeldenny.org>

	-Werror: fix for rules useless in parser after conflicts.
	* NEWS (2.4.3): Document fix.
	* src/complain.c (error_message): Extend to handle incomplete
	error messages so warn and warn_at can be used in more cases.
	* src/gram.c (grammar_rules_useless_report): Use warn_at so that
	-Werror is always obeyed.
	* src/reduce.c (reduce_print): Use warn so that the "warnings
	being treated as errors" message is printed consistently before
	the first warning message.  This makes testing easier.
	* tests/local.at (AT_BISON_WERROR_MSG): New macro.
	(AT_BISON_CHECK_NO_XML): Extend to check -Werror and
	--warnings=error when warnings appear in bison's stderr.

2010-07-29  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: enable gnits only at stable releases.
	* configure.ac (AM_INIT_AUTOMAKE): Underscore or dash in a
	version string should disable gnits.  Explain in comments.

2010-07-28  Joel E. Denny  <joeldenny@joeldenny.org>

	i18n: update.
	* po/POTFILES.in: Add src/graphviz.c.

2010-07-28  Joel E. Denny  <joeldenny@joeldenny.org>

	i18n: fix for gnulib.
	* po/POTFILES.in: Add remaining gnulib files that have
	translatable strings.

2010-07-25  Joel E. Denny  <joeldenny@joeldenny.org>

	build: fix our adjustments for gnulib files in lib.
	* configure.ac: For prepending lib/ to the values of config
	variables, fix detection of empty values.  Also, due to recent
	gnulib changes, add LIBUNISTRING_UNITYPES_H and
	LIBUNISTRING_UNIWIDTH_H to the list of those variables.

2010-07-25  Joel E. Denny  <joeldenny@joeldenny.org>

	maint: use announce-gen's new --mail-headers.
	* HACKING (Announce): Update instructions.
	* cfg.mk (announcement_Cc_): Define.
	* configure.ac (AM_GNU_GETTEXT_VERSION): Update to 0.18 as
	required by latest gnulib.
	* gnulib: Update to latest.

2010-07-24  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: handle Valgrind that complains about >&-.
	* tests/output.at (AT_CHECK_OUTPUT): Extend to accept pre-tests.
	(Output files: -dv >&-): Skip test group if running
	maintainer-check-valgrind.

2010-07-23  Paul Hilfinger  <hilfingr@EECS.Berkeley.EDU>

	* NEWS: Describe new semantic-predicate feature.
	* data/c.m4 (b4_predicate_case): New definition.
	* data/java.m4 (b4_predicate_case): New definition.
	* data/glr.c (yyimmediate): Add definition.
	(yydoAction): Remove comment, now obsolete.
	Do YY_REDUCE_PRINT here.
	(yyglrReduce): Alter comment to indicate that semantic values
	need not be deferred.
	Remove YY_REDUCE_PRINT from here; done in yydoAction.
	(yyprocessOneStack): Pass immediate flag.
	Delete stacks rejected by predicates in newly split-off parsers.
	Change handling of yyerr so that only current stack gets deleted
	when semantic predicate fails.
	(yyfillin): Don't crash if a semantic value is unresolved (as may
	happen in predicate rules).
	Copy lr state as well in debugging mode.
	Update comment on setting of yysval to include yyloc as well.
	(yy_reduce_print): Add yynormal argument.  Perform fillin properly.
	Report unresolved RHS values.
	(yyimmediate): New table.
	* src/gram.h (struct rule): Add is_predicate field.
	* src/output.c (user_actions_output): Use b4_predicate_case for
	predicates.
	(prepare_symbols): Output yyimmediate.
	* src/scan-gram.l: Add %? token, SC_PREDICATE state.
	* src/scan-code.l (code_props_rule_action_init): Add is_predicate
	argument.
	* src/scan-code.h (struct code_props): Add is_predicate field.
	(code_props_rule_action_init): New interface.
	* src/parse-gram.y (%?{...}): New token.
	(rhs): Add %?{...} rule.
	* src/parse-gram.c: Regenerate.
	* src/parse-gram.h: Regenerate.
	* src/reader.c (grammar_current_rule_action_append): Add
	immediate argument.
	(grammar_midrule_action): Use new interface for
	code_props_rule_action_init.
	(grammar_current_rule_action_append): Ditto.
	(packgram): Transfer is_predicate value.
	* src/reader.h (grammar_current_rule_action_append): New interface.
	* doc/bison.texinfo: Document semantic predicates (%?).

	* data/glr.c (yylhsNonterm, yyisDefaultedState,yyDefaultAction)
	(yygetLRActions,yynewGLRStackItem,yyaddDeferredAction,yyinitStateSet)
	(yyinitGLRStack,yyexpandGLRStack,yyupdateSplit,yymarkStackDeleted)
	(yyundeleteLastStack,yyglrShift,yyglrShiftDefer,yydoAction,yyglrReduce)
	(yyidenticalOptions,yymergeOptionSets,yyresolveStates,yyresolveAction)
	(yyresolveLocations,yyresolveValue,yyreducePrint): Update parameter
	names in comments and mention all parameters.
	(struct yyGLRState): Fix description of yyposn field.
	(yyresolveLocations): Correct comment so as not to imply action when
	yyn1==0.

2010-06-17  Paul Eggert  <eggert@cs.ucla.edu>

	Update from GFDL GFDL 1.2 to 1.3.
	* doc/bison.texinfo: Update GFDL version number.
	* doc/fdl.texi: Update to version 1.3, taken from:
	http://www.gnu.org/licenses/fdl.texi

	Do not use date ranges in copyright notices.
	See http://www.gnu.org/prep/maintain/maintain.html#Copyright-Notices

	* HACKING, Makefile.am, NEWS, PACKAGING, README, README-alpha:
	* TODO, bootstrap, bootstrap.conf:
	* build-aux/update-b4-copyright, cfg.mk, configure.ac:
	* data/README, data/bison.m4, data/c++-skel.m4, data/c++.m4:
	* data/c-skel.m4, data/c.m4, data/glr.c, data/glr.cc:
	* data/java-skel.m4, data/java.m4, data/lalr1.cc:
	* data/lalr1.java, data/local.mk, data/location.cc:
	* data/stack.hh, data/variant.hh, data/xslt/bison.xsl:
	* data/xslt/xml2dot.xsl, data/xslt/xml2text.xsl:
	* data/xslt/xml2xhtml.xsl, data/yacc.c, djgpp/Makefile.maint:
	* djgpp/README.in, djgpp/config.bat, djgpp/config.sed:
	* djgpp/config.site, djgpp/config_h.sed, djgpp/djunpack.bat:
	* djgpp/local.mk, djgpp/subpipe.c, djgpp/subpipe.h:
	* djgpp/testsuite.sed, doc/bison.texinfo, doc/local.mk:
	* doc/refcard.tex, etc/README, etc/bench.pl.in, etc/local.mk:
	* examples/calc++/Makefile.am, examples/extexi:
	* examples/local.mk, lib/abitset.c, lib/abitset.h:
	* lib/bbitset.h, lib/bitset.c, lib/bitset.h:
	* lib/bitset_stats.c, lib/bitset_stats.h, lib/bitsetv-print.c:
	* lib/bitsetv-print.h, lib/bitsetv.c, lib/bitsetv.h:
	* lib/ebitset.c, lib/ebitset.h, lib/get-errno.c:
	* lib/get-errno.h, lib/lbitset.c, lib/lbitset.h:
	* lib/libiberty.h, lib/local.mk, lib/main.c, lib/timevar.c:
	* lib/timevar.def, lib/timevar.h, lib/vbitset.c:
	* lib/vbitset.h, lib/yyerror.c, m4/bison-i18n.m4:
	* m4/c-working.m4, m4/cxx.m4, m4/subpipe.m4, m4/timevar.m4:
	* src/AnnotationList.c, src/AnnotationList.h:
	* src/InadequacyList.c, src/InadequacyList.h, src/LR0.c:
	* src/LR0.h, src/Sbitset.c, src/Sbitset.h, src/assoc.c:
	* src/assoc.h, src/closure.c, src/closure.h, src/complain.c:
	* src/complain.h, src/conflicts.c, src/conflicts.h:
	* src/derives.c, src/derives.h, src/files.c, src/files.h:
	* src/flex-scanner.h, src/getargs.c, src/getargs.h:
	* src/gram.c, src/gram.h, src/graphviz.c, src/ielr.c:
	* src/ielr.h, src/lalr.c, src/lalr.h, src/local.mk:
	* src/location.c, src/location.h, src/main.c:
	* src/muscle-tab.c, src/muscle-tab.h, src/named-ref.c:
	* src/named-ref.h, src/nullable.c, src/nullable.h:
	* src/output.c, src/output.h, src/parse-gram.y:
	* src/print-xml.c, src/print-xml.h, src/print.c, src/print.h:
	* src/print_graph.c, src/print_graph.h, src/reader.c:
	* src/reader.h, src/reduce.c, src/reduce.h, src/relation.c:
	* src/relation.h, src/scan-code.h, src/scan-code.l:
	* src/scan-gram.h, src/scan-gram.l, src/scan-skel.h:
	* src/scan-skel.l, src/state.c, src/state.h, src/symlist.c:
	* src/symlist.h, src/symtab.c, src/symtab.h, src/system.h:
	* src/tables.c, src/tables.h, src/uniqstr.c, src/uniqstr.h:
	* tests/actions.at, tests/atlocal.in, tests/c++.at:
	* tests/calc.at, tests/conflicts.at, tests/cxx-type.at:
	* tests/existing.at, tests/glr-regression.at:
	* tests/headers.at, tests/input.at, tests/java.at:
	* tests/local.at, tests/local.mk, tests/named-refs.at:
	* tests/output.at, tests/push.at, tests/reduce.at:
	* tests/regression.at, tests/sets.at, tests/skeletons.at:
	* tests/synclines.at, tests/testsuite.at, tests/torture.at:
	Don't use date ranges in copyright notices.

2010-05-11  Akim Demaille  <demaille@gostai.com>

	lalrl1.cc: give a chance to user defined YYLLOC_DEFAULT.
	* data/lalr1.cc (YYLLOC_DEFAULT): Move its definition from the
	header file to the implementation file, after the user %code
	sections.
	* NEWS (2.5): Document this.

2010-05-11  Akim Demaille  <demaille@gostai.com>

	doc: please Emacs.
	* doc/bison.texinfo (Local Variables): Move this after the
	LocalWords, since the latter are looked for in the whole document,
	while the former are looked for only at its end.
	Require american spell checking.

2010-05-10  Akim Demaille  <demaille@gostai.com>

	doc: fix lalr1.cc documentation.
	* doc/bison.texinfo (C++ Scanner Interface): Fix yylex signature.
	(C++ Bison Interface): Fix lalr1.cc skeleton name.
	(C++ Parser Interface): Fix semantic_type and location_type names.
	Document yy::parser::token.
	Reported by Jerry Quinn.

2010-05-10  Akim Demaille  <demaille@gostai.com>

	c++: use YYRHSLOC.
	* data/lalr1.cc (YYRHSLOC): New.
	(YYLLOC_DEFAULT): Use it.
	* data/glr.cc: If location_type was user defined, do not include
	location.hh, and do not produce location.hh and position.hh.
	* tests/calc.at (YYLLOC_DEFAULT): Use YYRHSLOC.
	Check that glr.cc supports user defined location_type.
	* NEWS: Document this.

2010-05-07  Akim Demaille  <demaille@gostai.com>

	doc: fix typo.
	* tests/synclines.at: here.

2010-05-04  Akim Demaille  <demaille@gostai.com>

	tests: enhance AT_SYNCLINES_COMPILE.
	* tests/synclines.at (AT_SYNCLINES_COMPILE): More distcc patterns.
	(AT_TEST_SYNCLINE): Remove GCC 4.5 protection which is already
	taken care of in AT_SYNCLINES_COMPILE.

2010-05-04  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: don't generate location.hh when location_type is defined
	* data/bison.m4 (b4_percent_define_get): Accept a default value.
	* data/c++.m4: Do not provide a default value for the %define
	variable location_type, rather, use b4_percent_define_get with a
	default argument where its value is needed.
	* data/lalr1.cc: Do not load location.cc (which outputs both
	location.hh and position.hh) if the user defined location_type.
	Do not include location.hh either.

2010-05-04  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: minor refactoring.
	* data/lalr1.cc: Don't issue empty namespaces.

2010-05-04  Akim Demaille  <demaille@gostai.com>

	tests: fix %printer.
	Currently, there is no check that %printer ... <foo> (nor
	%destructor) is about an existing <foo> type.  This C++ test had
	it wrong (<::std::string> vs. <std::string>).

	* tests/c++.at (AT_CHECK_VARIANTS): In list.yy, redefine the
	pretty-printing of lists into something better for parser traces.
	Update the expected output.
	Fix correspondance between %type/%token and %printer.

2010-05-04  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: location_type: make sure we don't depend on loc.(begin|end).
	* tests/calc.at (Span): Instead of begin/end, as in the built-in
	location class, use first and last.
	Define YYLLOC_DEFAULT to adjust to these changes.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Adjust to the
	location_type changes.

2010-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: fix maintainer-xml-check.
	* data/xslt/xml2dot.xsl (xsl:template match="bison-xml-report"):
	Update output to include comments now produced by --graph.
	(xsl:template match="automaton"): As for --graph, name the
	digraph after the grammar file.
	* src/print-xml.c (escape_bufs): Enlarge array.
	(print_xml): Add bug-report and url attributes to
	bison-xml-report element.

2010-05-01  Joel E. Denny  <joeldenny@joeldenny.org>

	In DOT output, convert from "/*" comments to "//" comments.
	This handles the possibility that a "*/" might appear in
	variable portions of those comments at some point in the future.
	* src/graphviz.c (start_graph): Implement.

2010-04-30  Joel E. Denny  <joeldenny@joeldenny.org>

	Document that undefined %prec identifier warnings will remain.
	* NEWS (2.4.3): Here.
	(2.4.2): Here.

2010-04-30  Joel E. Denny  <joeldenny@joeldenny.org>

	Revert 2009-12-30 change for undefined %prec token complaints.
	That is, keep them as warnings because that should be sufficient
	to satisfy POSIX without creating backward compatibility issues.
	Suggested by Richard Stallman at
	<http://lists.gnu.org/archive/html/bison-patches/2010-03/msg00033.html>.
	* NEWS (2.5): Remove mention of complaint.
	* src/reader.c (grammar_rule_check): Convert complaint back to
	warning.
	* tests/input.at (%prec's token must be defined): Update.

2010-04-25  Joel E. Denny  <joeldenny@joeldenny.org>

	build: don't require src/bison during bootstrap.
	Suggested by Eric Blake at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00003.html>.
	* bootstrap.conf (bootstrap_epilogue): New function to make sure
	src/parse-gram.[ch] are stamped later than src/parse-gram.y.

2010-04-25  Joel E. Denny  <joeldenny@joeldenny.org>

	i18n: fix untranslatable string.
	Reported by Goran Uddeborg at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00000.html>.
	* src/muscle-tab.c (muscle_percent_define_insert): Here.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	tests: calc: minor refactoring.
	* tests/calc.at (_AT_DATA_CALC_Y): Simplify yylex.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	tests: calc: simplify location management.
	* tests/local.at (AT_LOC_PUSHDEF, AT_LOC_POPDEF): New.
	(_AT_BISON_OPTION_PUSHDEFS, AT_BISON_OPTION_POPDEFS): Use them to
	define the appropriate AT_LOC accessors.
	* tests/calc.at: Use AT_LOC accessors.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	test location_type.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS):
	Define AT_LOCATION_TYPE_IF.
	(_AT_BISON_OPTION_POPDEFS): Undefine AT_LOCATION_TYPE_IF.
	* tests/calc.at (_AT_DATA_CALC_Y): When %define location_type is
	used, provide a user location type and use it.
	(Simple LALR1 C++ Calculator): Add a test case for location_type.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	tests: check fclose's return value.
	* tests/calc.at (_AT_DATA_CALC_Y): Check fclose's return status.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	tests: don't depend on the actual location type.
	* tests/calc.at: Use yy::parser::location_type rather than
	yy::location, since the former is always right, and might point to
	another type than the latter.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	formatting changes.
	* tests/calc.at: Formatting changes.

2010-04-13  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: remove useless forward declaration.
	* data/lalr1.cc: Include location.hh before stack.hh.
	Remove the useless forward declarations of position and location.
	Reported by Chris Morley.
	* data/glr.cc: Likewise.

2010-04-11  Joel E. Denny  <joeldenny@joeldenny.org>

	* NEWS (2.4.3): Mention fix for Sun Studio C++.

2010-04-10  Joel E. Denny  <joeldenny@joeldenny.org>

	tests: fix for newer Sun Studio C++.
	Reported by Dagobert Michelsen at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00023.html>.
	* THANKS (Dagobert Michelsen): Add.
	* configure.ac (AC_PREREQ): Set to 2.64 so we get the latest
	Autoconf macro for handling the restrict keyword.
	* gnulib: Update to latest, which no longer overrides that macro
	from Autoconf.

2010-04-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	portability: fix pointer arithmetic to conform to C standard.
	Reported by Tys Lefering at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00035.html>.
	This fix is already implemented in glr.c and does not apply to
	lalr1.java.
	* data/lalr1.cc (yy::parser::parse): Increase size of
	yyerror_range and adjust subscripting so you don't have to
	subtract one from the beginning of the array.
	* data/yacc.c (b4_declare_parser_state_variables,
	yyparse, yypush_parse): Likewise.

2010-04-05  Akim Demaille  <demaille@gostai.com>

	remove useless include.
	* src/graphviz.h: Don't include stdbool.h.

2010-04-05  Akim Demaille  <demaille@gostai.com>

	graph: sign the output file.
	* src/graphviz.c (start_graph): Issue comments about Bison.
	Suggested by Tys Lefering.

2010-03-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	portability: fix test suite for GCC 4.5's new #error message.
	Reported by Tys Lefering at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00030.html>.
	* NEWS (2.4.3): Mention.
	* tests/synclines.at (AT_TEST_SYNCLINE): Implement.

2010-03-30  Akim Demaille  <demaille@gostai.com>

	fix comments.
	* src/graphviz.h: Add missing license notice.
	Document.

2010-03-25  Akim Demaille  <demaille@gostai.com>

	tests: fix 250: parse.error=verbose overflow.
	* tests/regression.at (parse.error=verbose overflow): Avoid the
	double inclusion of stdlib.h as it triggers hard errors.

2010-03-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	portability: fix for BSD make.
	Reported by Johan van Selst at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00016.html>.
	* tests/local.mk ($(TESTSUITE)): Qualify package.m4 in
	this dependency list as in package.m4's target rule.

2010-03-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	portability: fix spawning on at least FreeBSD 8 and FreeBSD 9.
	Reported by Johan van Selst at
	<http://lists.gnu.org/archive/html/bug-bison/2010-03/msg00014.html>.
	* NEWS (2.4.3): New.
	* THANKS (Johan van Selst): Add.
	* etc/prefix-gnulib-mk (prefix): Adjust regex for makefile
	targets so that gnulib's new c++defs.h is matched.
	* gnulib: Update to latest.

2010-03-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	maint: update for changes to gnulib's announce-gen.
	* HACKING (Announce): RELEASE_TYPE=major must now be written
	RELEASE_TYPE=stable.

2010-03-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Version 2.4.2.
	* NEWS (2.4.2): Set version and date.  For the recent test suite
	portability fixes, don't be so optimistic about their success
	given the lack of feedback on the affected platforms.

2010-02-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	tests: fix maintainer-xml-check for recent changes.
	* tests/output.at (AT_CHECK_CONFLICTING_OUTPUT): Use
	AT_BISON_CHECK_NO_XML rather than AT_BISON_CHECK because an
	output file whose name conflicts with a previous output file
	is now never generated.

2010-02-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	portability: fix several issues with M4 subprocess.

	M4's output pipe was not being drained upon fatal errors during
	scan_skel.  As a result, broken-pipe messages from M4 were seen
	on at least AIX, HP-UX, Solaris, and RHEL4, and this caused a
	failure in the test suite.  The problem was that, on platforms
	where the default disposition for SIGPIPE is ignore instead of
	terminate, M4 sometimes saw fwrite fail with errno=EPIPE and
	then reported it.  However, there's some sort of race condition,
	because the new test group occasionally succeeded.
	Reported by Albert Chin at
	<http://lists.gnu.org/archive/html/bug-bison/2010-02/msg00004.html>.

	There were also problems with the test suite livelocking on
	Tru64 5.1b.  Reported by Didier Godefroy at
	<http://lists.gnu.org/archive/html/bug-bison/2009-05/msg00005.html>.
	Switching to create_pipe_bidi suggested by Akim Demaille.

	To attempt to solve both of these problems, switch to gnulib's
	create_pipe_bidi and register M4 process as a slave.  Along the
	way, clean up file name conflict handling, which was affected by
	the broken-pipe problem before the switch.
	* NEWS (2.4.2): Document.
	* THANKS (Didier Godefroy): Add.
	* bootstrap.conf (gnulib_modules): Add pipe.
	* gnulib: Update to latest to make sure we have all the latest
	fixes.
	* lib/local.mk (lib_libbison_a_SOURCES): Remove subpipe.h and
	subpipe.c.
	* po/POTFILES.in (lib/subpipe.c): Remove.
	* src/files.c (compute_output_file_names): Update invocations
	of output_file_name_check.
	(output_file_name_check): In the case that the grammar file
	would be overwritten, use complain instead of fatal, but replace
	the output file name with /dev/null.  Use the /dev/null solution
	for the case of two conflicting output files as well because it
	seems safer in case Bison one day tries to open both files at
	the same time.
	* src/files.h (output_file_name_check): Update prototype.
	* src/output.c (output_skeleton): Use create_pipe_bidi and
	wait_subprocess.  Assert that scan_skel completely drains the
	pipe.
	* src/scan-skel.l (at_directive_perform): Update
	output_file_name_check invocation.
	* tests/output.at (AT_CHECK_CONFLICTING_OUTPUT): Check that the
	grammar file actually isn't overwritten.
	(Conflicting output files: -o foo.y): Update expected output.
	* tests/skeletons.at (Fatal errors but M4 continues producing
	output): New test group.

2010-02-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update POTFILES.
	* HACKING (Release Procedure): Add reminder about keeping
	POTFILES files up-to-date.
	* po/POTFILES.in (src/muscle-tab.c, src/scan-skel.l): Add.

2010-02-01  Joel E. Denny  <jdenny@clemson.edu>

	Code cleanup.
	* tests/atlocal.in (abs_top_srcdir): Remove shell variable,
	which is already defined in atconfig.

2010-01-22  Joel E. Denny  <jdenny@clemson.edu>

	tests: fix missing include caught by g++ 4.4.1.
	Reported by Tys Lefering.
	* HACKING (Release checks): Add note about trying a recent GCC.
	* tests/regression.at (_AT_DATA_DANCER_Y): For C++, include
	cstdlib for abort.
	(_AT_DATA_EXPECT2_Y): Likewise.

2010-01-21  Joel E. Denny  <jdenny@clemson.edu>

	* cfg.mk (gnulib_dir): Assume gnulib is a subdirectory.

2010-01-21  Joel E. Denny  <jdenny@clemson.edu>

	maint: automate PACKAGE_COPYRIGHT_YEAR update, and update it.
	* HACKING (Release Procedure): Update notes on copyright years.
	* Makefile.am (update-package-copyright-year): New target rule.
	* build-aux/update-package-copyright-year: New file.
	* cfg.mk (update-copyright): Add update-package-copyright-year
	as a dependency.

2010-01-19  Joel E. Denny  <jdenny@clemson.edu>

	* bootstrap: Import improvements from latest gnulib.

2010-01-19  Joel E. Denny  <jdenny@clemson.edu>

	build: require Automake 1.11.1 to avoid a security flaw.
	* HACKING (Release Procedure): Don't document Automake security
	flaw here.
	* configure.ac (AM_INIT_AUTOMAKE): Require 1.11.1, and explain
	why here.

2010-01-19  Joel E. Denny  <jdenny@clemson.edu>

	gnulib: update to latest.

2010-01-19  Joel E. Denny  <jdenny@clemson.edu>

	ChangeLog (2006-09-15): add Odd Arild Olsen's role for push.c.

2010-01-15  Joel E. Denny  <jdenny@clemson.edu>

	Thank the developer of the initial push parser implementation.
	This unfortunate oversight is several years old.
	* THANKS (Odd Arild Olsen): Add.

2010-01-04  Joel E. Denny  <jdenny@clemson.edu>

	Fix some comments concerning LR(0) versus LALR(1).

	Stop equating LR(0) with nondeterminism and LALR(1) with
	determinism.  That is, if all states are consistent, then LR(0)
	tables are deterministic.  On the other hand, LALR(1) tables
	might be nondeterministic before conflict resolution, and GLR
	permits LALR(1) tables to remain nondeterministic.
	* src/LR0.c, src/LR0.h: Here.
	* src/lalr.c, src/lalr.h: Here.
	* src/main.c (main): Here.
	* src/state.c, src/state.h: Here.

	* src/ielr.h (ielr): In preconditions, expect LR(0) not LALR(1)
	parser tables.

2010-01-04  Joel E. Denny  <jdenny@clemson.edu>

	maint: run "make update-copyright"

2009-12-30  Joel E. Denny  <jdenny@clemson.edu>

	POSIX: complain if %prec's token was not defined.
	* NEWS (2.5): Document.
	* src/reader.c (grammar_rule_check): Convert warning to
	complaint.
	* tests/input.at (%prec's token must be defined): Update.

2009-12-30  Joel E. Denny  <jdenny@clemson.edu>

	POSIX: warn if %prec's token was not defined.
	Reported by Florian Krohm at
	<http://lists.gnu.org/archive/html/bug-bison/2009-12/msg00005.html>.
	* NEWS (2.4.2): Document.
	* src/reader.c (grammar_rule_check): Implement.
	(grammar_current_rule_prec_set): Add comments explaining that we
	here assume a %prec identifier is a token, but we still manage
	to support POSIX.
	* tests/input.at (%prec's token must be defined): New test
	group.

2009-12-31  Joel E. Denny  <jdenny@clemson.edu>

	* HACKING (Release Procedure): Recommend a secure automake.

2009-12-29  Joel E. Denny  <jdenny@clemson.edu>

	portability: `<' and `>' are not always defined on addresses.
	Specifically, don't sort objects by their memory addresses when
	they're not allocated in the same array or other object.  Though
	I haven't found a test case where that fails on my platform, C
	says the behavior is undefined.
	* src/AnnotationList.c (AnnotationList__insertInto): Remove
	FIXME.  Use new id field of InadequacyList nodes rather than
	their memory addresses when sorting.
	(AnnotationList__compute_from_inadequacies): Add
	inadequacy_list_node_count argument to pass to
	InadequacyList__new_conflict.
	* src/AnnotationList.h
	(AnnotationList__compute_from_inadequacies): Update prototype
	and documentation for new argument.
	* src/InadequacyList.c (InadequacyList__new_conflict): Add
	node_count argument and use it to assign a unique ID.
	* src/InadequacyList.h (InadequacyListNodeCount): New typedef.
	(InadequacyList): Add id field.
	(InadequacyList__new_conflict): Update prototype and
	documentation for new argument.
	* src/ielr.c (ielr_compute_annotation_lists): Update
	AnnotationList__compute_from_inadequacies invocation.

2009-12-20  Joel E. Denny  <jdenny@clemson.edu>

	Fix handling of yychar manipulation in user semantic actions.
	The problem was that yacc.c didn't always update the yychar
	translation afterwards.  However, other skeletons appear to be
	fine.  glr.c appears to already translate yychar before every
	use.  lalr1.cc does not define yychar and does not document its
	replacement, yyla, for users.  It does provide yyclearin, but
	that does not manipulate yyla and thus requires no translation
	update.  In lalr1.java, yychar is out of scope during semantic
	actions.
	* NEWS (2.5): Document.
	* data/yacc.c (YYBACKUP): Don't bother translating yychar into
	yytoken here.
	(yyparse, yypush_parse): Instead, translate before every use of
	yytoken, and add comments explaining this approach.
	* tests/actions.at (Destroying lookahead assigned by semantic
	action): New test group checking that translation happens before
	lookahead destructor calls at parser return.  Previously,
	incorrect destructors were called.
	* tests/conflicts.at (parse.error=verbose and consistent
	errors): New test group checking that translation happens at
	syntax error detection before the associated verbose error
	message and the associated lookahead destructor calls.  While
	the destructor call is fixed by this patch, the verbose error
	message is currently incorrect due to another bug (see
	comments in test group), so this is an expected failure for now.

2009-12-21  Joel E. Denny  <jdenny@clemson.edu>

	YYFAIL: warn about uses and remove from lalr1.java.
	* NEWS (2.5): Document.
	* data/lalr1.java (YYParser::YYFAIL): Rename to YYERRLAB,
	and make it private.  Update all uses.
	* src/scan-code.l (SC_RULE_ACTION): Implement warning.

2009-12-21  Joel E. Denny  <jdenny@clemson.edu>

	YYFAIL: deprecate.
	* NEWS (2.4.2): Document deprecation and the phase-out plan.
	* data/lalr1.java (YYParser::YYFAIL): Add comment about
	deprecation.
	* data/yacc.c (YYFAIL): Likewise, and suppress warnings about
	YYFAIL from GCC cpp's -Wunused-macros.
	* doc/bison.texinfo (Java Action Features): Remove YYFAIL
	documentation.
	(LocalWords): Remove YYFAIL.

2009-12-20  Joel E. Denny  <jdenny@clemson.edu>

	tests: cleanup.
	* tests/c++.at (Syntax error discarding no lookahead): Don't
	ignore stderr.  Instead, eliminate remaining warnings.

2009-12-18  Joel E. Denny  <jdenny@clemson.edu>

	lalr1.cc: don't discard non-existent lookahead on syntax error.
	* data/lalr1.cc (yy::parser::parse): Check yyempty first.
	* tests/c++.at (Syntax error discarding no lookahead): New test
	group.

2009-12-17  Joel E. Denny  <jdenny@clemson.edu>

	Code cleanup.
	* src/symtab.c, src/symtab.h (symbol_class_get_string): Remove
	function, which is no longer used.

2009-12-16  Joel E. Denny  <jdenny@clemson.edu>

	Add gcc's -Wundef to test suite and fix another warning from it.
	* NEWS (2.4.2): Update description of -Wundef fix.
	* configure.ac (WARN_CXXFLAGS_TEST): New substitution.
	(WARN_CFLAGS_TEST): New substitution.
	* data/glr.c: Avoid warning about __STRICT_ANSI__.
	* tests/atlocal.in (CFLAGS): Use WARN_CFLAGS_TEST instead of
	WARN_CFLAGS.
	(NO_WERROR_CFLAGS): Likewise.
	(CXXFLAGS): Use WARN_CXXFLAGS_TEST instead of WARN_CXXFLAGS.

2009-12-16  Joel E. Denny  <jdenny@clemson.edu>

	* data/yacc.c: Reformat m4 a little.

2009-12-16  Joel E. Denny  <jdenny@clemson.edu>

	Document gcc -Wundef fix.
	* NEWS (2.4.2): Here.
	* THANKS (Jonathan Nieder): Add.

2009-12-15  Jonathan Nieder  <jrnieder@gmail.com>  (tiny change)

	Simplify y.tab.c when location tracking is disabled.
	* data/yacc.c: Do not check YYLTYPE_IS_TRIVIAL if location
	tracking is not enabled.  Instead, unconditionally define
	YY_LOCATION_PRINT as a no-op for backward compatibility.

2009-12-15  Jonathan Nieder  <jrnieder@gmail.com>  (tiny change)

	Avoid warnings from gcc -Wundef y.tab.c.
	* data/glr.c: Check if YYENABLE_NLS and YYLTYPE_IS_TRIVIAL are
	defined before using them.
	* data/lalr1.cc: Likewise.
	* data/yacc.c: Likewise.

2009-12-15  Joel E. Denny  <jdenny@clemson.edu>

	autoconf: update to latest for fix of M4 detection.
	Reported by Eric Blake.
	* submodules/autoconf: Update.

2009-12-15  Joel E. Denny  <jdenny@clemson.edu>

	portability: use -DGNULIB_POSIXCHECK.
	Reported by Eric Blake.  See discussions at
	<http://lists.gnu.org/archive/html/bug-bison/2009-09/msg00008.html>
	and
	<http://lists.gnu.org/archive/html/bug-gnulib/2009-10/msg00108.html>.
	* HACKING (Release checks): Suggest -DGNULIB_POSIXCHECK.
	* bootstrap.conf (gnulib_modules): Add all the printf modules
	suggested by -DGNULIB_POSIXCHECK.  Add realloc-posix as
	suggested by -DGNULIB_POSIXCHECK for gnulib's own vasnprintf.c.
	(excluded_files): Remove m4/printf-posix.m4.
	* tests/atlocal.in (LIBS): As for LDADD in src/local.mk, add
	lib/libbison.a so gnulib libraries can be linked.

2009-12-15  Joel E. Denny  <jdenny@clemson.edu>

	gnulib: update for fix of fprintf-posix, which we'll use soon.
	* etc/prefix-gnulib-mk (prefix): Adjust regex for make file
	targets so that gnulib's new arg-nonnull.h and link-warning.h
	are matched.
	* gnulib: Update.

2009-12-14  Joel E. Denny  <jdenny@clemson.edu>

	Enable assertion output and --disable-assert for configure.
	* bootstrap.conf (gnulib_modules): Add assert module.
	* src/system.h (aver): Define as assert, and summarize the
	discussion on this issue.

2009-12-14  Joel E. Denny  <jdenny@clemson.edu>

	Expand GLR acronym in summary of Bison.
	Based on discussion with Akim Demaille starting at
	<http://lists.gnu.org/archive/html/bison-patches/2009-04/msg00087.html>.
	* doc/bison.texinfo (Introduction): Here.
	* src/getargs.c (usage): Here.

2009-10-03  Alex Rozenman  <rozenman@gmail.com>

	Document named references.
	* doc/bison.texinfo (Actions): Add new example and xref to
	Using Named References node.
	(Using Named References): New node.

2009-10-16  Joel E. Denny  <jdenny@clemson.edu>

	cleanup.
	* src/Sbitset.c (Sbitset__new_on_obstack): Use Sbitset instead
	of char*.
	(Sbitset__isEmpty): Use Sbitset instead of char*.
	* src/Sbitset.h (Sbitset): Make it a pointer to unsigned char
	instead of char.  This helps to avoid casting errors.
	(Sbitset__or): Use Sbitset instead of char*.

2009-10-16  Joel E. Denny  <jdenny@clemson.edu>

	portability: don't assume 8-bit bytes.
	That is, use CHAR_BIT and UCHAR_MAX instead of 8 and 0xff.
	* src/Sbitset.h (Sbitset__nbytes): Here.
	(Sbitset__byteAddress): Here.
	(Sbitset__bit_mask): Here.
	(Sbitset__last_byte_mask): Here.
	(Sbitset__ones): Here.
	(SBITSET__FOR_EACH): Here.

2009-10-11  Joel E. Denny  <jdenny@clemson.edu>

	portability: use va_start and va_end in the same function.
	* src/complain.c (error_message): Move va_end from here...
	(ERROR_MESSAGE): ... to here.

2009-10-08  Joel E. Denny  <jdenny@clemson.edu>

	* data/bison.m4: Update comments for rename to muscle-tab.h.

2009-10-07  Joel E. Denny  <jdenny@clemson.edu>

	Minor code cleanup.
	* src/muscle-tab.c (MUSCLE_USER_NAME_CONVERT): Remove macro and
	replace all uses with UNIQSTR_CONCAT.
	* src/uniqstr.c (uniqstr_vsprintf): New function.
	* src/uniqstr.h (uniqstr_vsprintf): Add prototype.
	(UNIQSTR_CONCAT, UNIQSTR_GEN_FORMAT, UNIQSTR_GEN_FORMAT_): New
	macros.

2009-10-06  Joel E. Denny  <jdenny@clemson.edu>

	* TODO (Complaint submessage indentation): New.

2009-10-04  Joel E. Denny  <jdenny@clemson.edu>

	Minor code cleanup.
	* src/parse-gram.y: Clean up sorting of declarations.
	Use types to simplify %printer declarations where possible.
	Provide %printer for BRACKETED_ID and symbol.prec.
	* src/symtab.c: Whitespace change.

2009-10-04  Joel E. Denny  <jdenny@clemson.edu>

	tests: skip tests of file names that platform does not support.
	Reported by Michael Raskin at
	<http://lists.gnu.org/archive/html/bug-bison/2009-09/msg00001.html>.
	* THANKS (Michael Raskin): Add.
	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): Fix.  Cygwin used
	to fail at least for file names containing ":" or "\".

2009-09-23  Joel E. Denny  <jdenny@clemson.edu>

	yysyntax_error: avoid duplicate lookahead collection.
	Except when memory reallocation is required, this change
	eliminates the need to invoke yysyntax_error twice and thus to
	repeat the collection of lookaheads.  It also prepares for
	future extensions that will make those repetitions more
	expensive and that will require additional memory management in
	yysyntax_error.  Finally, it fixes an obscure bug already
	exercised in the test suite.
	* data/yacc.c (yysyntax_error): Add arguments for message
	buffer variables stored in the parser.  Instead of size, return
	status similar to yyparse status but indicating success of
	message creation.  Other than the actual reallocation of the
	message buffer, import and clean up memory management code
	from...
	(yyparse, yypush_parse): ... here.
	* tests/regression.at (parse.error=verbose overflow): No longer
	an expected failure.

2009-09-23  Joel E. Denny  <jdenny@clemson.edu>

	yysyntax_error: test memory management more.
	* tests/atlocal.in (NO_WERROR_CFLAGS): New cpp macro.
	* tests/regression.at (parse.error=verbose and
	YYSTACK_USE_ALLOCA): New test group.
	(parse.error=verbose overflow): New test group that reveals an
	obscure bug.  Expected fail for now.

2009-10-04  Joel E. Denny  <jdenny@clemson.edu>

	benchmarks: use %debug consistently among grammars.
	* etc/bench.pl.in (generate_grammar_triangular): Do not activate
	%debug by default.  It can affect the timings even if yydebug=0.
	(generate_grammar_calc): For consistency with other grammars,
	use YYDEBUG environment variable to set yydebug.

2009-10-03  Joel E. Denny  <jdenny@clemson.edu>

	Remove dead code.
	* src/symtab.c (symbol_pack): Here because every symbol's number
	is always defined by this time.

2009-10-03  Alex Rozenman  <rozenman@gmail.com>

	Add additional space after periods in NEWS.
	* NEWS (2.5): here.

2009-09-29  Joel E. Denny  <jdenny@clemson.edu>

	Use the correct conversion specifier for size_t.
	Reported by Jim Meyering.
	* src/Sbitset.h (SBITSET__INDEX__CONVERSION_SPEC): New, "zu"
	because Sbitset__Index is size_t.
	* src/Sbitset.c (Sbitset__fprint): Use it instead of %d.

2009-09-27  Joel E. Denny  <jdenny@clemson.edu>

	tests: don't abuse AT_BISON_CHECK.
	* tests/regression.at (parse-gram.y: LALR = IELR): Move
	additional shell commands outside of AT_BISON_CHECK.

2009-09-26  Joel E. Denny  <jdenny@clemson.edu>

	tests: check that parse-gram.y's IELR and LALR are identical.
	* tests/atlocal.in (abs_top_srcdir): New shell variable.
	* tests/regression.at (parse-gram.y: LALR = IELR): New test
	group.

2009-09-19  Alex Rozenman  <rozenman@gmail.com>

	Keep sub-messages aligned. Fix strings for translation.
	* src/location.h (location_print): Add return value.
	* src/location.c (location_print): Return number of printed
	characters.
	* src/complain.h (complain_at_indent, warn_at_indent): Prototype
	new functions.
	* src/complain.cpp (indent_ptr): New static variable.
	(error_message, complain_at_indent, warn_at_indent): Implement
	the alignment mechanism.
	* src/scan-code.l (parse_ref, show_sub_messages): Fix strings
	for translations. Use new alignment mechanism.
	* tests/named-ref.at: Adjust test-cases.
	* NEWS (2.5): Add an announcement about named references.

2009-09-17  Akim Demaille  <demaille@gostai.com>

	doc: fixes.
	* doc/bison.texinfo: here.
	Reported by Alex Rozenman.

2009-09-16  Akim Demaille  <demaille@gostai.com>

	doc: lalr1.cc and variants.
	* doc/bison.texinfo (Decl Summary): Document the "lex_symbol" and
	"variant" %define variables.
	(C++ Semantic Values): Split into...
	(C++ Unions, C++ Variants): these.
	The latter is new.
	(C++ Parser Interface): Fix type names.
	Document parser::syntax_error.
	Document the fact that locations are not mandatory.
	(C++ Scanner Interface): Split into...
	(Split Symbols, Complete Symbols): these.
	The later is new.
	(Calc++ Parsing Driver): Use variants.
	Add more comments.
	Adjust style.
	(Calc++ Parser): Declare all the tokens, no
	longer accept raw characters.
	Remove %union.
	Adjust types and printers.
	Remove destructors.
	(Calc++ Scanner): Use make_<SYMBOL> functions.
	Use strerror in error message.

2009-09-16  Akim Demaille  <demaille@gostai.com>

	doc: spell checking.
	* doc/bison.texinfo: here.

2009-09-16  Akim Demaille  <demaille@gostai.com>

	doc: comment changes.
	* doc/bison.texinfo: Comment changes.

2009-09-16  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: factor the yytranslate_ invocation in make_SYMBOLS.
	* data/c++.m4, data/lalr1.cc (parser::symbol_type): Change the
	constructor to take a token_type instead of the (internal) symbol
	number.
	Call yytranslate_.
	* data/variant.hh (b4_symbol_constructor_define_): Therefore,
	don't call yytranslate_ here.

2009-09-16  Akim Demaille  <demaille@gostai.com>

	TODO: statistics.
	* TODO (Figures): New.

2009-09-13  Joel E. Denny  <jdenny@clemson.edu>

	tests: clean up push.at test group titles.
	* tests/push.at: Remove "Push Parsing: " from test group titles
	because these are already under the banner "Push Parsing Tests".

2009-09-12  Alex Rozenman  <rozenman@gmail.com>

	Provide an additional sub-message for clarity.
	Add "symbol not found in production" error message when
	an "invalid reference" is detected in named references
	resolution.
	* src/scan-code.l: Update "invalid reference" case.
	* tests/named-ref.at: Adjust test-cases.

2009-09-10  Joel E. Denny  <jdenny@clemson.edu>

	Clean up yacc.c a little.
	* data/yacc.c: Clean up M4 for readability, and make output
	whitespace more consistent.  For the main parse function
	comment, instead of saying "yyparse or yypush_parse", say either
	"yyparse" or "yypush_parse" depending on which it actually is.

2009-09-10  Joel E. Denny  <jdenny@clemson.edu>

	Fix --enable-gcc-warnings.
	* src/parse-gram.y (%printer <param>): Handle param_none.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: syntax_error as exceptions.
	It is common to use sort of factories in the user actions.  These
	factories may check some "syntactic" constraints that are not
	enforced by the grammar itself.  This is possible using YYERROR
	within the action itself.  Provide the user with a means to throw
	a syntax_error exception.

	* data/c++.m4 (b4_public_types_declare, b4_public_types_define):
	Declare and define yy::parser::syntax_error.
	* data/lalr1.cc: Include stdexcept.
	(yy::parser::parse): Wrap the user action within a try/catch.
	* data/glr.cc: Include stdexcept.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: add missing "inline".
	* data/c++.m4 (b4_public_types_define): Add missing inline to
	implementations provided in headers.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	%param: documentation.
	* NEWS (2.6): Document %param, %lex-param, and %parse-param
	changes.
	* doc/bison.texinfo: Document that %lex-param and %parse-param
	are n-ary.
	Changes some examples to demonstrate it.
	(Calc++ Parser): Use %param.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	Regen.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	style changes.
	* src/parse-gram.y (add_param): Scope changes.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	%parse: support several arguments.
	* src/parse-gram.y (current_param): New.
	(param_type): Add param_none.
	(params): New nonterminal.
	Use it.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	Regen.

2009-09-09  Akim Demaille  <demaille@gostai.com>

	%param.
	Provide a means to factor lex-param and parse-param common
	declarations.

	* src/parse-gram.y (param_type): New.
	Define a %printer for it.
	(add_param): Use it.
	(%parse-param, %lex-param): Merge into...
	(%parse): this new token.
	Adjust the grammar to use it.
	* src/scan-gram.l (RETURN_VALUE): New.
	(RETURN_PERCENT_FLAG): Use it.
	(RETURN_PERCENT_PARAM): New.
	Use it to support %parse-param, %lex-param and %param.

2009-09-03  Joel E. Denny  <jdenny@clemson.edu>

	Use aver not assert.
	* src/output.c: Don't include assert.h.
	(output_skeleton): Use aver not assert.
	* src/system.h (aver): In documentation of why, add links to
	Paul Eggert's explanations in the mailing lists.

2009-09-05  Alex Rozenman  <rozenman@gmail.com>

	Use "Unresolved reference" error message when no symbols were found
	in a symbolic reference resolution. Remove .expr and -expr from
	the shown reference when the reference is unresolved.
	* src/scan-code.l: Change the error message, adjust location columns,
	rename variable "exact_mode" to "explicit_bracketing".
	* tests/named-ref.at: Adjust existing tests and add a new one.

2009-09-04  Akim Demaille  <demaille@gostai.com>

	Adjust synclines in src/parse-gram.[ch].
	* tests/bison.in: Do some magic (including working around issues
	with ylwrap) when this wrapper is used to compile
	src/parse-gram.y.

2009-09-03  Joel E. Denny  <jdenny@clemson.edu>

	Complain about unused %define variables and %code qualifiers.
	* NEWS (2.5): Document.
	* data/bison.m4 (b4_check_user_names): Complain instead of warn.
	* doc/bison.texinfo (Decl Summary): Document complaint, and
	improve %define documentation a little otherwise.
	* tests/input.at (Reject unused %code qualifiers): Update.
	(%define errors): Update.
	(%define, --define, --force-define): Update.
	(%define backward compatibility): Update.
	(Unused %define api.pure): Update.
	* tests/push.at (Push Parsing: Unsupported Skeletons): Update.

2009-09-03  Joel E. Denny  <jdenny@clemson.edu>

	Don't suppress warnings about unused parse.error.
	* data/bison.m4 (b4_error_verbose_flag): Don't examine value of
	%define variable parse.error unless b4_error_verbose_flag is
	actually expanded in a skeleton.

2009-09-03  Akim Demaille  <demaille@gostai.com>

	* NEWS (2.4.2): Add "Internationalization" item.

2009-09-03  Akim Demaille  <demaille@gostai.com>

	bootstrap: fix/improve find_tool.
	* bootstrap (find_tool): Improve error messages.
	Fix typo about find_tool_names.

2009-08-29  Joel E. Denny  <jdenny@clemson.edu>

	Fix gcc 3.4.4 shadowing warning reported by Eric Blake.
	See
	<http://lists.gnu.org/archive/html/bison-patches/2009-08/msg00093.html>.
	* src/scan-code.h (code_props_rule_action_init): Rename
	named_ref arg to name so it doesn't shadow named_ref type.  This
	makes it consistent with the function definition in scan-code.l
	anyway.

2009-08-28  Joel E. Denny  <jdenny@clemson.edu>

	%define: accept unquoted values.
	* NEWS (2.5): Group all %define changes together, and document
	this one.  Remove quotes in IELR and canonical LR entry.
	* doc/bison.texinfo: Remove quotes in most examples throughout.
	(Decl Summary): Update %define documentation.
	(Table of Symbols): Likewise.
	* src/ielr.c (LrType): Update documentation.
	* src/parse-gram.y (content.opt): Add production for ID.
	* tests/actions.at: Remove quotes in most tests.
	* tests/calc.at: Likewise.
	* tests/existing.at: Likewise.
	* tests/input.at: Likewise.
	* tests/local.at: Likewise.
	* tests/push.at: Likewise.
	* tests/reduce.at: Likewise.
	* tests/torture.at: Likewise.

2009-08-28  Joel E. Denny  <jdenny@clemson.edu>

	%define lr.type: make values lowercase IDs.
	That is, "LALR" => "lalr", "IELR" => "ielr", and
	"canonical LR" => "canonical-lr".
	* NEWS (2.5): Update documentation.
	* doc/bison.texinfo (Decl Summary): Likewise.
	* src/ielr.c (ielr): Use new values.
	* src/ielr.h (ielr): Update documentation.
	* src/reader.c (prepare_percent_define_front_end_variables): Use
	and validate new values.
	* tests/existing.at (AT_TEST_EXISTING_GRAMMAR): Update test
	grammars.
	* tests/reduce.at (AT_TEST_LR_TYPE): Likewise.

2009-08-27  Eric Blake  <ebb9@byu.net>

	scan-gram: avoid portability trap with ctype usage.
	* src/scan-gram.l (<SC_ESCAPED_STRING,SC_ESCAPED_CHARACTER>):
	Avoid compiler warning.

2009-08-27  Joel E. Denny  <jdenny@clemson.edu>

	tests: use perl for printing special sequences to files.
	And skip tests if perl is not available.  This is better than
	playing tricks with shell portability.  Suggested by Akim
	Demaille.
	* tests/input.at (Bad character literals): Use it here for
	omitting final newlines.
	(Bad escapes in literals): Use it here for special characters.

2009-08-26  Joel E. Denny  <jdenny@clemson.edu>

	tests: show a use of %define lr.default-reductions "consistent"
	* tests/conflicts.at (%nonassoc and eof): Extend to test that it
	prevents the omission of expected tokens for %error-verbose.

2009-08-26  Akim Demaille  <demaille@gostai.com>

	tests: portability fix.
	* tests/input.at (Bad escapes in literals): Don't expect "echo
	'\0'" to output \ then 0.

2009-08-26  Joel E. Denny  <jdenny@clemson.edu>

	Actually handle the yytable zero value correctly this time.
	* data/bison.m4 (b4_integral_parser_tables_map): Don't mention
	zero values in the YYTABLE comments.
	* data/glr.c (yytable_value_is_error): Don't check for zero
	value.
	* data/lalr1.cc (yy_table_value_is_error_): Likewise.
	* data/yacc.c (yytable_value_is_error): Likewise.
	* data/lalr1.java (yy_table_value_is_error_): Likewise.
	(yysyntax_error): Fix typo in code: use yytable_ not yycheck_.
	* src/tables.h: In header comments, explain why it's useless to
	check for a zero value in yytable.

2009-08-25  Joel E. Denny  <jdenny@clemson.edu>

	More fixes related to last two patches.
	* data/bison.m4 (b4_integral_parser_tables_map): Fix YYTABLE
	comments: zero indicates syntax error not default action.
	* data/c.m4 (b4_table_value_equals): Comment that YYID must be
	defined.
	* data/glr.c (yyis_pact_ninf): Rename to...
	(yypact_value_is_default): ... this.
	(yyisDefaultedState): Update for rename.
	(yyis_table_ninf): Rename to...
	(yytable_value_is_error): ... this, and check for value zero
	besides just YYTABLE_NINF.
	(yygetLRActions): Check for default value from yypact.  It
	appears that this check is always performed before this function
	is invoked, and so adding the check here is probably redundant.
	However, the code may evolve after this subtlety is forgotten.
	Also, update for rename to yytable_value_is_error.  Because that
	macro now checks for zero, a different but equivalent branch of
	the if-then-else here is evaluated.
	(yyreportSyntaxError): Update for rename to
	yytable_value_is_error.  The zero condition was mishandled
	before.
	(yyrecoverSyntaxError): Update for renames.  No behavioral
	changes.
	* data/lalr1.cc, data/lalr1.java (yy_pact_value_is_default_):
	New function.
	(yy_table_value_is_error_): New function.
	(parse): Use new functions where possible.  No behavioral
	changes.
	(yysyntax_error_, yysyntax_error): Use yy_table_value_is_error_.
	The zero condition was mishandled before.
	* data/yacc.c (yyis_pact_ninf): Rename to...
	(yypact_value_is_default): ... this.
	(yyis_table_ninf): Rename to...
	(yytable_value_is_error): ... this, and check for value zero
	besides just YYTABLE_NINF.
	(yysyntax_error): Update for rename to yytable_value_is_error.
	The zero condition was mishandled before.
	(yyparse): Update for renames.  No behavioral changes.
	* src/tables.h: Improve comments about yypact, yytable, etc.
	more.  Most importantly, say yytable value of zero means syntax
	error not default action.

2009-08-25  Joel E. Denny  <jdenny@clemson.edu>

	Fix %error-verbose for conflicts resolved by %nonassoc.
	* NEWS (2.5): Document.
	* data/glr.c (yyreportSyntaxError): Fix this by checking
	yyis_table_ninf.
	* data/yacc.c (yysyntax_error): Likewise.
	* data/lalr1.cc (yysyntax_error_): Fix this by checking
	yytable_ninf_.
	* data/lalr1.java (yysyntax_error): Likewise.
	* tests/conflicts.at (%nonassoc and eof): Update expected output
	and remove FIXME.

2009-08-25  Joel E. Denny  <jdenny@clemson.edu>

	Some code and documentation improvements.
	* data/c.m4 (b4_table_value_equals): New macro to capture
	some repeated code.
	* data/glr.c (yyis_pact_ninf): Use it here.
	(yyis_table_ninf): Likewise.
	(yyreportSyntaxError): Improve internal comments.
	* data/yacc.c (yyis_pact_ninf): New macro copied from glr.c.
	Use it everywhere possible.
	(yyis_table_ninf): Likewise.
	(yysyntax_error): Improve internal comments.
	* data/lalr1.cc (yysyntax_error_): Likewise.
	* data/lalr1.java (yysyntax_error): Likewise.
	* src/tables.h: Improve comments about yypact, yytable, etc.

2009-08-21  Joel E. Denny  <jdenny@clemson.edu>

	Use locale when quoting.
	* src/scan-gram.l (SC_ESCAPED_STRING, SC_ESCAPED_CHARACTER): Use
	quote rather than implementing quoting here.

2009-08-20  Eric Blake  <ebb9@byu.net>

	Make previous patch more robust.
	* src/output.c (ARRAY_CARDINALITY): New macro, copied from
	argmatch.h.
	(output_skeleton): Use it.
	Suggested by Akim Demaille.

	Import latest m4/m4.m4.
	* submodules/autoconf: Update to autoconf 2.64.
	* configure.ac (M4_GNU_OPTION): New define.
	* src/output.c (output_skeleton): Use it to resolve FIXME.
	* NEWS: Mention this.

2009-08-19  Joel E. Denny  <jdenny@clemson.edu>

	Fix complaints about escape sequences.
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2009-08/msg00036.html>.
	* src/scan-gram.l (SC_ESCAPED_STRING, SC_ESCAPED_CHARACTER):
	For a \0 and similar escape sequences meaning the null
	character, report an invalid escape sequence instead of an
	invalid null character because the latter does not actually
	appear in the user's input.
	In all escape sequence complaints, don't escape the initial
	backslash, and don't quote when the sequence appears at the end
	of the complaint line unless there's whitespace that quotearg
	won't escape.
	Consistently say "invalid" not "unrecognized".
	Consistently prefer "empty character literal" over "extra
	characters in character literal" warning for invalid escape
	sequences; that is, consistently discard those sequences.
	* tests/input.at (Bad escapes in literals): New.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	doc: fixes.
	* doc/bison.texinfo: Fix minor Texinfo errors.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	tests: distcc compliance.
	* tests/synclines.at (AT_SYNCLINES_COMPILE): Discard distcc's
	error messages from the output.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	variables: simplify the upgrade of namespace into api.namespace.

	This patch simplifies "variables: rename namespace as
	api.namespace", commit 67501061076ba46355cfd9f9361c7eed861b389c.
	Suggested by Joel E. Denny in
	http://lists.gnu.org/archive/html/bison-patches/2009-07/msg00006.html

	* src/muscle-tab.c (muscle_percent_variable_update): New.
	(muscle_percent_define_insert): Use it in replacement of the
	previous tr invocation.
	Remove variable_tr, no longer needed.
	* data/bison.m4 (b4_percent_define_copy_, b4_percent_define_copy):
	Remove.
	* data/c++.m4: No longer handle namespace -> api.namespace.
	* tests/input.at (%define backward compatibility): Check that
	namespace is treated as api.namespace.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	doc: %initial-action to initialize yylloc.
	Reported by Bill Allombert.
	* doc/bison.texinfo: Set fill-column to 76.
	(Location Type): Document the use of %initial-action to initialize
	yylloc.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: use state_type.
	* data/lalr1.cc (yysyntax_error_): Use state_type.
	Move argument names into yy*.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: get rid of yyparse's yystate.
	yystate and yystack_[0].state are equal, keep only the latter.
	The former was also used as a temporary variable to compute the
	post-reduction state.  Move this computation into an auxiliary
	function.

	* data/glr.c (yyLRgotoState): Fuse variable definition and first
	assignment.
	* data/lalr1.cc (yy_lr_goto_state_): New.
	(yyparse): Use it.
	Replace remaining uses of yystate by yystate_[0].state.
	Remove the former.

2009-08-19  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: destroy $$ when YYERROR is called.
	* data/lalr1.cc (yyreduce): Compute the resulting state before
	running the user action so that yylhs is a valid symbol.
	(yyerrorlab): Since yylhs is complete (it knows its type), we can
	simply call yy_destroy_ to destroy $$ on YYERROR invocations.
	* tests/c++.at (AT_CHECK_VARIANTS): Test YYERROR with variants.

2009-08-18  Joel E. Denny  <jdenny@clemson.edu>

	maint: update for gnulib's recent update-copyright changes
	* gnulib: Update.
	* .x-update-copyright (COPYING): Add as it's no longer implied
	when .x-update-copyright is present.
	* cfg.mk (update-copyright-local): Remove, now ignored.
	(update-copyright): Declare update-b4-copyright as a dependency.

2009-08-17  Akim Demaille  <demaille@gostai.com>

	build: require gettext 0.17.

	Suggested by Bruno Haible.
	http://lists.gnu.org/archive/html/bug-bison/2009-08/msg00009.html
	* configure.ac: require gettext 0.17 to ensure compatibility with
	gnulib.

2009-08-17  Akim Demaille  <demaille@gostai.com>

	build: lower gettext requirements.

	Bison was uselessly requiring the formatstring macros from
	gettext, which resulted in mo files not being installed on systems
	that perfectly supported Bison mo files.  Lower the requirement.
	http://lists.gnu.org/archive/html/bug-bison/2009-08/msg00006.html

	* configure.ac: Require need-ngettext instead of
	need-formatstring-macros.
	Reported by Martin Jabocs.
	Suggested by Bruno Haible.
	* INSTALL: Restructure.
	(Internationalization): New.

2009-08-14  Joel E. Denny  <jdenny@clemson.edu>

	maint: fix use of copyright year intervals.
	* gnulib: Update.
	* bootstrap.conf (gnulib_modules): Update getopt to getopt-gnu
	as now recommended in gnulib/NEWS.
	* build-aux/update-b4-copyright: Fix.
	* cfg.mk (update-copyright-env): Configure update-copyright.

2009-08-13  Joel E. Denny  <jdenny@clemson.edu>

	Make it easier to write deterministic tests.
	Continues Akim's work from his 2009-06-10 commits.
	* src/reader.c (check_and_convert_grammar): Don't add any
	symbols after the first symbols_do invocation.
	* src/symtab.c (symbols_sorted): New static global.
	(user_token_number_redeclaration): Update comments.
	(symbol_from_uniqstr): If a new symbol is being created, assert
	that symbols_sorted hasn't been allocated yet.
	(symbols_free): Free symbols_sorted.
	(symbols_cmp, symbols_cmp_qsort): New functions.
	(symbols_do): Sort symbol_table into symbols_sorted on first
	invocation.
	* tests/input.at (Numbered tokens): Recombine tests now that the
	output should be deterministic across multiple numbers.

2009-08-12  Akim Demaille  <demaille@gostai.com>

	tests: GCC 4.5 compliance.
	* tests/synclines.at (AT_SYNCLINES_COMPILE): Adjust to GCC 4.5's
	messages about #error.

2009-08-12  Akim Demaille  <demaille@gostai.com>

	build: fix the generation of the documentation.
	Some of our targets use "bison --help", but they can't depend on
	"bison" itself (to avoid additional requirements on the user), so
	they used to call "make src/bison" in the commands.  Then
	concurrent builds may fail: one make might be aiming one of its
	jobs at compiling src/bison, and another job at generating the man
	page.  If the latter is faster than the former, then we have two
	makes that concurrently try to compile src/bison.

	This might also be a more convincing explanation for the failure
	described in the patch "build: fix paths".

	* Makefile.am (SUFFIXES): Initialize.
	* build-aux/move-if-change: New, symlink to gnulib's.
	* build-aux/local.mk: Ship it.
	* doc/common.x: Remove, merged into...
	* doc/bison.x: here.
	* doc/local.mk (doc/bison.help): New.
	($(CROSS_OPTIONS_TEXI)): Depend on it.
	Use src/bison.
	(.x.1): Replace with...
	(doc/bison.1): this explicit, simpler, target.
	(common_dep): Remove, inlined where appropriate.
	(SUFFIXES, PREPATH): Remove, unused.

2009-08-12  Akim Demaille  <demaille@gostai.com>

	gnulib: improve prefixing.
	* configure.ac (gl_PREFIXED_LIBOBJS): Don't rename it, rather,
	change the value of...
	(gl_LIBOBJS): this.
	Adjust more variables.
	* etc/prefix-gnulib-mk (prefix_assignment): Don't rename
	gl_LIBOBJS.
	(prefix): Also transform rules whose targets have slashes.
	Use $prefix liberally.
	Map @MKDIR_P@ to $(MKDIR_P).
	Prefix directories that are mkdir'd.

2009-08-12  Akim Demaille  <demaille@gostai.com>

	build: fix paths.
	When using $(top_builddir) inconsistently, Make (including GNU
	Make) is sometimes confused.  As a result it may want to build
	lib/libbison.la and $(top_builddir)/lib/libbison.la (the same
	file, different names) concurrently, which, amusingly enough,
	might end with:

	  ranlib lib/libbison.a
	  ranlib lib/libbison.a
	  make[2]: *** [lib/libbison.a] Segmentation fault

	on OS X.

	* doc/local.mk, src/local.mk: Do not use $(top_builddir) when not
	needed.

2009-08-12  Akim Demaille  <demaille@gostai.com>

	distcheck: fix.

	* examples/calc++/Makefile.am: (EXTRA_DIST): Ship calc.stamp.

2009-08-10  Joel E. Denny  <jdenny@clemson.edu>

	* tests/local.mk (TESTSUITE_AT): Add named-refs.at.

2009-08-10  Joel E. Denny  <jdenny@clemson.edu>

	Miscellaneous code readability improvements.

	* src/reader.c (reader): Move %define front-end variable
	defaults and checking into...
	(prepare_percent_define_front_end_variables): ... this new
	function.

	* src/scan-gram.l (INITIAL): For consistency with string
	literals, don't store open quote on character literal.  It's
	discarded before returning anyway.
	(SC_ESCAPED_CHARACTER): Similarly, don't store close quote.
	Make length test more readable, and make the character stored
	for an empty literal more obvious while consistent with the
	previous behavior.

	* src/symtab.c, src/symtab.h: Rename USER_NUMBER_ALIAS to
	USER_NUMBER_HAS_STRING_ALIAS throughout.
	* src/symtab.c (symbol_make_alias): Remove comment from symtab.c
	that is repeated in symtab.h.  Improve argument names to make it
	clear which side of the symbol-string alias pair is which.
	(symbol_check_alias_consistency): Improve local variable names
	for the same purpose.
	* src/symtab.h (struct symbol): Make comments about aliases
	clearer.
	(symbol_make_alias): Improve comments and argument name.
	* src/output.c (token_definitions_output): Update for rename to
	USER_NUMBER_HAS_STRING_ALIAS and improve comments about aliases.

2009-08-08  Alex Rozenman  <rozenman@gmail.com>

	Convert "misleading reference" messages to warnings.
	* src/scan-code.l: New function 'show_sub_messages', more
	factoring.
	* tests/named-ref.at: Adjust tests.

2009-08-06  Joel E. Denny  <jdenny@clemson.edu>

	maint: run "make update-copyright"

2009-08-06  Joel E. Denny  <jdenny@clemson.edu>

	maint: make update-b4-copyright easier to use
	* build-aux/update-b4-copyright: In warnings, report line
	numbers rather than character positions.
	* cfg.mk (update-copyright-local): Set to update-b4-copyright so
	that update-copyright runs it.
	* gnulib: Update.

2009-08-05  Joel E. Denny  <jdenny@clemson.edu>

	maint: clean up update-b4-copyright code
	* build-aux/update-b4-copyright: Do not accept 2-digit
	UPDATE_COPYRIGHT_YEAR, which was not handled correctly.
	Don't accept a `[' in a b4_copyright argument.
	Format code more consistently.
	Don't assume b4*copyright never occurs.

2009-08-04  Joel E. Denny  <jdenny@clemson.edu>

	maint: automate b4_copyright updates.
	* Makefile.am (update-b4-copyright): New target rule.
	* build-aux/local.mk (EXTRA_DIST): Add update-b4-copyright.
	* build-aux/update-b4-copyright: New.
	* data/yacc.c: Remove stray characters around b4_copyright
	invocations.

2009-08-04  Joel E. Denny  <jdenny@clemson.edu>

	maint: automate annual package-wide copyright-year update.
	* .x-update-copyright: New.
	* Makefile.am (EXTRA_DIST): Remove maint.mk.
	* bootstrap.conf (gnulib_modules): Add maintainer-makefile and
	update-copyright.  Remove gnumakefile, which is implied by
	maintainer-makefile.
	* cfg.mk (bootstrap-tools): Copy from old maint.mk.
	* gnulib: Update.
	* maint.mk: Remove, now copied from gnulib.
	* examples/extexi: Add missing "(C)" in copyright statement so
	update-copyright can recognize it.
	* src/LR0.h: Likewise.
	* src/print.h: Likewise.
	* src/print_graph.h: Likewise.
	* src/gram.c: Add missing comma in copyright statement.
	* src/gram.h: Likewise.

2009-08-04  Joel E. Denny  <jdenny@clemson.edu>

	Fix "make distcheck".
	* examples/calc++/Makefile.am: Say $(srcdir)/calc.stamp instead
	of just calc.stamp.

2009-08-01  Joel E. Denny  <jdenny@clemson.edu>

	Pacify "gcc -Wunused" for the input function from Flex.
	Reported by Alex Rozenman.  This warning shows up with gcc-4.3.0
	and later.
	* src/scan-code.l: Add "%option noinput", which I cannot find in
	the Flex manual, but which Flex has supported since at least as
	far back as 2.5.4.  However, if any of our developers still use
	Flex 2.5.4, they'll need to stop configuring with
	--enable-gcc-warnings because "%option noinput" didn't work
	correctly until Flex 2.5.6.
	* src/scan-gram.l: Likewise.
	* src/scan-skel.l: Likewise.

2009-07-31  Alex Rozenman  <rozenman@gmail.com>

	Fix --enable-gcc-warnings problems.
	* src/reader.c: Adjust variable names.
	* src/scan-code.l: Fix prototypes and adjust names.
	* src/named-ref.c: Remove redundant "if".

2009-07-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix a --enable-gcc-warnings problem.
	* src/scan-gram.l (SC_ESCAPED_CHARACTER): Actually use length
	variable.

2009-07-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	Warn about character literals not of length one.
	* NEWS (2.5): Document.
	* src/scan-gram.l (INITIAL): Remove comment that we don't check
	the length.
	(SC_ESCAPED_CHARACTER): Warn if length is wrong.
	* tests/input.at (Bad character literals): New test group.

2009-07-24  Alex Rozenman  <rozenman@gmail.com>

	Fix some memory leaks.
	* src/named-ref.c: Add a pointer check (named_ref_free).
	* src/scan-code.l: New function (variant_table_free). Called in
	code_scanner_free.
	* src/symlist.c: Call to named_ref_free (symbol_list_free).

2009-07-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/lalr.c (state_lookahead_tokens_count): Correct comment.

2009-07-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	Some M4 cleanup in the testsuite.
	Suggested by Eric Blake at
	<http://lists.gnu.org/archive/html/bison-patches/2009-04/msg00083.html>.
	* tests/existing.at (_AT_TEST_EXISTING_GRAMMAR): Do not
	complicate the code by distinguishing between a missing value
	and an empty string value for an optional argument.  This fix is
	allowed by the similar fix in AT_TEST_TABLES_AND_PARSE below.
	* tests/local.at (_AT_TEST_TABLES_AND_PARSE): Merge into...
	(AT_TEST_TABLES_AND_PARSE): ... this now that the special
	arguments are not needed because of the following changes.
	Fix stale comments.
	Bison developers should use GNU M4 and should not use
	POSIXLY_CORRECT when building the test suite, so do not
	complicate the code by avoiding $10 and above.
	Do not quote an empty string value for an optional argument, and
	do not distinguish between a missing value and an empty string
	value.

2009-07-15  Joel E. Denny  <jdenny@ces.clemson.edu>

	Revert unnecessary column realignment in --help output.
	Reported by Akim Demaille at
	<http://lists.gnu.org/archive/html/bison-patches/2009-06/msg00010.html>.
	* src/getargs.c (usage): Here.

2009-07-04  Alex Rozenman  <rozenman@gmail.com>

	Alphabetical order in src/local.mk.
	* src/local.mk: Adjust.

2009-07-04  Alex Rozenman  <rozenman@gmail.com>

	Style changes and factoring.
	* src/named-ref.h: Add comments.
	* src/parse-gram.y: Readability and style changes.
	* src/reader.c: Factoring: assign_named_ref function.
	* src/scan-code.l: Factoring and style changes. Rename
	parse_named_ref to parse_ref. Use "c-ctype.h" from gnulib.
	Use "unsigned" type for variant index. Improve readablity.
	* src/scan-gram.l: Change error messages and add comments.
	* src/symlist.h: symbol_list_null: New function decl.
	* src/symlist.c: symbol_list_null: Implement here.
	* tests/named-refs.at: Adjust for new error messages.

2009-06-29  Eric Blake  <ebb9@byu.net>

	scan-code: avoid compiler warnings
	* src/scan-code.l (parse_named_ref): Use correct specifiers.

2009-06-29  Akim Demaille  <demaille@gostai.com>

	build: avoid concurrent extraction of calc++.
	* examples/calc++/Makefile.am (calc.stamp): New.
	Depend on it to create the sources of calc++ so that concurrent
	builds don't launch several "extexi" in parallel.
	Not only this is inefficient, this also builds incorrect sources
	with several extractions mixed together.

2009-06-29  Akim Demaille  <demaille@gostai.com>

	parse.error: fix.
	* data/bison.m4: Move code related to specific variables after the
	definition of the variable-maintaining macros so that we don't
	"invoke" b4_percent_define_check_values before it is defined.

2009-06-29  Akim Demaille  <demaille@gostai.com>

	variables: parse.error

	Implement, document, and test the replacement of %error-verbose
	by %define parse.error "verbose".
	* data/bison.m4 (b4_error_verbose_if): Reimplement to track the
	values of the parse.error variable.
	Make "simple" its default value.
	Check the valid values.
	* src/parse-gram.y: Use %define parse.error.
	(PERCENT_ERROR_VERBOSE): New token.
	Support it.
	* src/scan-gram.l: Support %error-verbose.

	* doc/bison.texinfo (Decl Summary): Replace the documentation of
	%define error-verbose by that of %define parse.error.
	* NEWS: Document it.

	* tests/actions.at, tests/calc.at: Use parse.error instead of
	%error-verbose.

2009-06-27  Alex Rozenman  <rozenman@gmail.com>

	Implement support for named symbol references.
	* src/parse-gram.y: Add new syntax (named_ref.opt).
	* src/reader.c: Store named refs in symbol lists.
	* src/reader.h: New argument for symbol_append and
	action_append functions.
	* src/scan-code.h: Add new field (named_ref) into
	code_props data structure. Keeps named ref of midrule
	actions.
	* src/scan-code.l: Support for named refs in semantic
	action code. New function 'parse_named_ref'.
	* src/scan-gram.l: Support bracketed id.
	* src/symlist.c: Store named refs in symbol lists.
	* src/symlist.h: New field in symbol list: named_ref.
	* src/named-ref.h: New file, a struct for named_ref.
	* src/named-ref.cp: New file, named_ref_new function.
	* src/local.mk: Add two new files.
	* tests/testsuite.at: Include new test group:
	* tests/named-refs.at: this new file.

2009-06-25  Akim Demaille  <demaille@gostai.com>

	hash: check insertion for memory exhaustion.
	* src/uniqstr.c (uniqstr_new): New.

2009-06-24  Akim Demaille  <demaille@gostai.com>

	variables: rename namespace as api.namespace.
	Discussed in
	http://lists.gnu.org/archive/html/bison-patches/2009-04/msg00033.html

	* data/bison.m4 (b4_percent_define_copy_, b4_percent_define_copy):
	New.
	(b4_percent_define_use): New.
	Use it where applicable.
	* data/c++.m4: Replace uses of the variable "namespace" by
	"api.namespace".
	Default the latter to the former.
	* doc/bison.texinfo (Decl Summary): Document "namespace" as
	obsolete.
	Document api.namespace.
	Use @samp to document %define uses, keep @code for identifiers.
	* NEWS: Likewise.
	* tests/c++.at, tests/input.at: Test api.namespace instead of
	namespace. (The tests passed with namespace.)

2009-06-11  Akim Demaille  <demaille@gostai.com>

	style changes.
	* data/xslt/xml2dot.xsl, data/xslt/xml2xhtml.xsl: Space changes.
	* src/print-xml.c: Style changes.
	* tests/conflicts.at: Comment changes.

2009-06-11  Akim Demaille  <demaille@gostai.com>

	xml: beware of user strings used to give a %prec to rules.
	* tests/conflicts.at (%prec with user strings): New.
	* src/gram.c (grammar_rules_print_xml): Escape the precedence for
	XML output.

2009-06-11  Akim Demaille  <demaille@gostai.com>

	hash: check insertion for memory exhaustion.
	* src/muscle-tab.c (muscle_insert, muscle_grow)
	* src/state.c (state_hash_insert): Check the return value of
	hash_insert.

2009-06-11  Akim Demaille  <demaille@gostai.com>

	tests: honor TESTSUITEFLAGS in every check target.
	* tests/local.mk (RUN_TESTSUITE): New.
	(check-local, installcheck-local, maintainer-check-g++)
	(maintainer-check-posix, maintainer-check-valgrind): Use it.

2009-06-10  Akim Demaille  <demaille@gostai.com>

	deterministic test suite.
	Some consistency checks on symbols are performed after all the
	symbols were read, by an iteration over the symbol table.  This
	traversal is nondeterministic, which can be a problem for test
	cases.
	Avoid this.
	Addresses another form of nondeterminism reported by Joel E. Denny.
	http://lists.gnu.org/archive/html/bison-patches/2009-05/msg00023.html

	* tests/input.at (Numbered tokens): Split the hexadecimal/decimal
	test in two.
	Use different file names for the three tests to make the
	maintenance easier.

2009-06-10  Akim Demaille  <demaille@gostai.com>

	gnulib: update.
	* gnulib: Update to latest.
	* lib/.cvsignore, lib/.gitignore, m4/.cvsignore,
	* m4/.gitignore: Regen.
	* src/symtab.c (symbol_from_uniqstr, semantic_type_from_uniqstr):
	Call xalloc_die on hash_insert failures.
	Requested by the new __warn_unused_result__ attribute of
	hash_insert.

2009-06-10  Akim Demaille  <demaille@gostai.com>

	deterministic user-token-number redeclaration errors.
	Address nondeterminism reported by Joel E. Denny.
	http://lists.gnu.org/archive/html/bison-patches/2009-05/msg00023.html

	* src/uniqstr.h: Comment changes.
	* src/location.h (boundary_cmp, location_cmp): New.
	* src/symtab.c (user_token_number_redeclaration): New.
	(symbol_translation): Use it.
	* tests/input.at (Numbered tokens): Adjust the expected output.

2009-05-25  Akim Demaille  <demaille@gostai.com>

	build: avoid ignored errors.
	* doc/local.mk ($(CROSS_OPTIONS_TEXI)): Don't generate ignored
	errors, they pollute the output.

2009-05-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	Convert multiple variable definition warnings to complaints.
	* NEWS (2.5): Add a new entry for that change.
	* doc/bison.texinfo (Decl Summary): Update %define entry.
	(Bison Options): Update -D/--define/-F/--force-define entry.
	* src/muscle-tab.c (muscle_percent_define_insert): Implement.
	* src/muscle-tab.h (muscle_percent_define_insert): Update
	comments.
	* tests/input.at (`%define errors'): Update.
	(`%define, --define, --force-define'): Update.

2009-05-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	-F/--force-define and relative %define/-D/--define priorities.
	* NEWS (2.5): Add documentation to -D/--define entry.
	* build-aux/cross-options.pl: Hard-code association of
	--force-define with %define.
	* doc/bison.texinfo (Decl Summary): In %define entry,
	cross-reference command-line options.
	(Bison Options): Add documentation to -D/--define entry.
	(Option Cross Key): Widen column for --force-define row.
	* src/getargs.c (usage): Document -F/--force-define.  Realign
	options in output.
	(short_options, long_options, getargs): Parse -F/--force-define,
	and update muscle_percent_define_insert invocations.
	* src/muscle-tab.h (muscle_percent_define_how): New enum type.
	(muscle_percent_define_insert): Add argument with that type.
	* src/muscle-tab.c (muscle_percent_define_insert): Implement
	-F/--force-define behavior and priorities.
	(muscle_percent_define_ensure): Update
	muscle_percent_define_insert invocation.
	* src/parse-gram.y (prologue_declaration): Update
	muscle_percent_define_insert invocations.
	* tests/input.at (`%define, --define'): Rename to...
	(`%define, --define, --force-define'): ... this and extend.

2009-05-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update some comments to make sense for -D.
	* data/bison.m4 (b4_check_user_names): In header comments, say
	"user occurrence" instead of "grammar occurrence".
	* src/muscle-tab.h (muscle_percent_define_insert): Likewise.
	(muscle_percent_code_grow): Likewise just for consistency.

2009-05-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/c++.m4 (b4_namespace_close): Simplify slightly.

2009-05-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	Handle a trailing `:' in a user-supplied C++ namespace better.
	* data/c++.m4 (b4_namespace_close): Don't let it be printed
	among the closing braces here.  This fix might make the
	generated code easier to debug, but otherwise it should be
	insignificant because a trailing `:' is a C++ error already.

2009-05-19  Akim Demaille  <demaille@gostai.com>

	remove useless variable.
	* src/getargs.c (skeleton_arg): Remove now useless variable.
	Should help the compiler see that this printf-like call is sane.

2009-05-15  Akim Demaille  <demaille@gostai.com>

	Rename token.prefix as api.tokens.prefix.
	Discussed here.
	http://lists.gnu.org/archive/html/bison-patches/2009-05/msg00024.html.

	* NEWS, data/bison.m4, data/c.m4, data/java.m4, doc/bison.texinfo,
	* tests/c++.at, tests/calc.at, tests/java.at, tests/local.at
	(token.prefix): Rename as...
	(api.tokens.prefix): this.

2009-05-11  Akim Demaille  <demaille@gostai.com>

	doc: use C++ headers.
	* doc/bison.texinfo (Calc++ Scanner): Prefer C++ headers to C
	headers.

2009-05-11  Akim Demaille  <demaille@gostai.com>

	doc: token.prefix
	* doc/bison.simple (Decl Summary): Document token.prefix.
	(Calc++ Parser): Various fixes.
	Formatting changes.
	Use token.prefix.
	Introduce a macro TOKEN to shorten the code and make it more
	readable.
	(Calc++ Scanner): Adjust.
	* NEWS (Variable token.prefix): New.

2009-05-04  Akim Demaille  <demaille@gostai.com>

	bison: catch bad symbol names.
	* src/scan-gram.l({int}{id}): Report as an invalid identifier.
	* tests/input.at: Adjust.

2009-05-04  Akim Demaille  <demaille@gostai.com>

	identifiers: dashes are letters.
	Dashes can now start identifiers (symbols and directives).

	* src/scan-gram.l ({letter}): Add dash.
	({id}): Remove it.
	* tests/input.at (Symbols): Adjust.
	Remove stray comment.
	* tests/regression.at (Invalid inputs): Adjust error message.
	* doc/bison.texinfo (Symbols): Update.

2009-05-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	Declare %code to be a permanent feature.
	* NEWS (2.4.2): Here.
	* doc/bison.texinfo (Prologue Alternatives): Don't say it's
	experimental.
	(Decl Summary): Likewise.

2009-04-30  Joel E. Denny  <jdenny@ces.clemson.edu>

	Convert underscores to dashes in some %define variable names.
	For now, just api.push-pull and lr.keep-unreachable-states.
	Maintain old names for backward compatibility.
	* NEWS (2.5): Document.
	* data/c.m4 (b4_identification): Update comment.
	* data/yacc.c: Update access.
	* doc/bison.texinfo: Update.
	* etc/bench.pl.in (bench_push_parser): Update use.
	* src/files.c (tr): Move to...
	* src/getargs.c, src/getargs.h (tr): ... here because I can't
	think of a better place to expose it.  My logic is that, for all
	uses of tr so far, command-line arguments can be involved, and
	getargs.h is already included.
	* src/main.c (main): Update access.
	* src/muscle_tab.c (muscle_percent_define_insert): Convert old
	variable names to new variable names before assigning value.
	* src/reader.c (reader): Update setting default.
	* tests/calc.at: Update uses.
	* tests/conflicts.at (Unreachable States After Conflict
	Resolution): Update use.
	* tests/input.at (%define enum variables): Update use.
	(%define backward compatibility): New test group.
	* tests/push.at: Update uses.
	* tests/reduce.at: Update uses.
	* tests/torture.at: Update uses.

2009-04-30  Joel E. Denny  <jdenny@ces.clemson.edu>

	Set all front-end %define defaults in one place.
	* src/main.c (main): Move lr.keep_unreachable_states default...
	* src/reader.c (reader): ... to here.

2009-04-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Rename lr.default_reductions to lr.default-reductions.
	* NEWS (2.5): Here.
	* doc/bison.texinfo: Here.
	* src/lalr.c (initialize_LA): Here.
	* src/print.c (print_reductions): Here.
	* src/reader.c (reader): Here.
	* src/tables.c (action_row): Here.
	* tests/input.at (%define enum variables): Here.
	* tests/reduce.at (AT_TEST_LR_DEFAULT_REDUCTIONS): Here.

2009-04-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Pacify ./configure --enable-gcc-warnings.
	* tests/input.at (Symbols): Prototype yyerror and yylex.

2009-04-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Document how `%define "var" "value"' is not M4-friendly.
	* src/parse-gram.y (variable): In comments here.

2009-04-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up recent patches a little.
	Reported by Akim Demaille.
	* doc/bison.texinfo (Understanding): Fix typos.
	* src/print.c (print_reductions): Don't use negated variable.

2009-04-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	List accepted values for a %define enum variable with an invalid value.
	Suggested by Akim Demaille at
	<http://lists.gnu.org/archive/html/bison-patches/2009-04/msg00082.html>.
	* data/bison.m4 (_b4_percent_define_check_values): Implement.
	* src/muscle-tab.c (muscle_percent_define_check_values): Implement.
	* tests/input.at (%define lr.default_reductions invalid values): Merge
	into...
	(%define enum variables): ... here, and update output.

2009-04-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	Rename "default rule" to "default reduction".
	This includes changing variable names in code, changing
	comments, and renaming %define lr.default_rules to %define
	lr.default_reductions.
	* NEWS (2.5): Update IELR documentation.
	* data/bison.m4 (b4_integral_parser_tables_map): Adjust YYDEFACT
	documentation.
	* data/glr.c, data/lalr1.java: Sync copyright dates.
	* doc/bison.texinfo (Decl Summary): Adjust lr.default_reductions
	and lr.type documentation.  Make some other wording
	improvements.
	(Glossary): Adjust cross-references and Default Reduction
	definition.
	* src/lalr.c (state_lookahead_tokens_count): Adjust code.
	Remove a confusing comment pointed out by Akim Demaille.
	(initialize_LA): Adjust code.
	* src/print-xml.c (print_reductions): Adjust code.
	* src/print.c (print_reductions): Adjust code.
	* src/reader.c (reader): Adjust code.
	* src/tables.c (action_row): Adjust code.
	(token_actions): Adjust code.
	* src/tables.h: Adjust YYDEFACT documentation.
	* tests/input.at (%define lr.default_rules invalid values):
	Rename test group to...
	(%define lr.default_reductions invalid values): ... this, and
	update grammar file and expected output.
	* tests/reduce.at (AT_TEST_LR_DEFAULT_RULES): Rename to...
	(AT_TEST_LR_DEFAULT_REDUCTIONS): ... this, and update.

2009-04-21  Akim Demaille  <demaille@gostai.com>

	tests: check the use of dashes and periods in symbols.
	* tests/input.at (Symbol): New test group.

2009-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Document %define lr.type and lr.default_rules.
	* NEWS (2.5): Add an entry.
	* src/getargs.c (usage): Mention IELR(1) and canonical LR(1)
	besides just LALR(1) and GLR(1).
	* doc/bison.texinfo (Introduction): Likewise.
	(Language and Grammar): Bison is no longer limited to LALR(1)
	restrictions.
	(GLR parsing): Say deterministic or LR(1) rather than LALR(1)
	when trying to distinguish from GLR.  Talk about LR(1) grammars
	rather than LALR(1) grammars.
	(Decl Summary): In %define api.push_pull entry, say it applies
	to deterministic parsers in C rather than LALR(1) parsers in C.
	Add lr.default_rules entry.
	Add lr.type entry.
	(Mystery Conflicts): Bison is no longer limited to LALR(1)
	restrictions.
	(Generalized LR Parsing): Same changes as for the previous GLR
	section.
	(Memory Management): Say deterministic rather than LALR(1).
	(Understanding): Correct some bison output.
	Index discussion of "accepting state".
	Say deterministic rather than LALR(1).
	(Bison Options): In --yacc entry, say deterministic rather than
	LALR(1).
	In --report, --graph, and --xml entries, just don't mention
	LALR(1).
	(C++ Parsers): Say deterministic rather than LALR(1).
	(Table of Symbols): Likewise in YYSTACK_USE_ALLOCA entry.
	(Glossary): Add Accepting State, Consistent State, Default Rule,
	and IELR(1) definitions.
	In Generalized LR (GLR) definition, make same changes as in
	previous GLR sections.
	In LALR(1) definition, say Bison uses LALR(1) by default rather
	than implying Bison is limited to LALR(1).
	(LocalWords): Add IELR.

2009-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Finish implementing %define lr.type.
	Its value can be "LALR", "IELR", or "canonical LR".
	* lib/timevar.def (TV_IELR_PHASE1): New var.
	(TV_IELR_PHASE2): New var.
	(TV_IELR_PHASE3): New var.
	(TV_IELR_PHASE4): New var.
	* src/Makefile.am (bison_SOURCES): Add AnnotationList.c,
	AnnotationList.h, InadequacyList.c, InadequacyList.h, Sbitset.c,
	Sbitset.h, ielr.h, and ielr.c.
	* src/getargs.h, src/getargs.c (enum trace, trace_args,
	trace_types): Add trace_ielr.
	* src/lalr.h, src/lalr.c (ngotos): Export it.
	(F): Rename to...
	(goto_follows): ... this, update all uses, and export it.
	(set_goto_map): Export it.
	(map_goto): Export it.
	(compute_lookahead_tokens): Don't free goto_follows yet.  Now
	handled in ielr.
	(initialize_LA): Export it.  Move lookback allocation to...
	(lalr): ... here because, for canonical LR, initialize_LA must
	be invoked but lookback and much of the rest of LALR isn't
	needed.
	* main.c (main): Instead of lalr, invoke ielr, which invokes
	lalr.
	* src/reader.c (reader): Default lr.type to "LALR".
	Default lr.default_rules to "accepting" if lr.type is "canonical
	LR".  Leave the default as "all" otherwise.
	Check for a valid lr.type value.
	* src/state.h, src/state.c (struct state_list): Add state_list
	member.
	(state_new): Initialize state_list member to NULL.
	(state_new_isocore): New function, exported.
	* tests/existing.at (AT_TEST_EXISTING_GRAMMAR): New macro that
	exercises all values of lr.type.
	(GNU AWK Grammar): Rename test group to...
	(GNU AWK 3.1.0 Grammar): ... this, and extend to use
	AT_TEST_EXISTING_GRAMMAR.
	(GNU Cim Grammar): Extend to use AT_TEST_EXISTING_GRAMMAR.
	(GNU pic Grammar): Rename test group to...
	(GNU pic (Groff 1.18.1) Grammar): ... this, and extend to use
	AT_TEST_EXISTING_GRAMMAR.
	* tests/reduce.at (AT_TEST_LR_TYPE): New macro that exercises
	all values of lr.type.
	(Single State Split): New test groups using AT_TEST_LR_TYPE.
	(Lane Split): Likewise.
	(Complex Lane Split): Likewise.
	(Split During Added Lookahead Propagation): Likewise.

2009-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add new files for IELR and canonical LR implementation.
	* src/AnnotationList.c: New.
	* src/AnnotationList.h: New.
	* src/InadequacyList.c: New.
	* src/InadequacyList.h: New.
	* src/Sbitset.c: New.
	* src/Sbitset.h: New.
	* src/ielr.c: New.
	* src/ielr.h: New.

2009-04-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Implement %define lr.default_rules.
	Its value describes the states that are permitted to contain
	default rules: "all", "consistent", or "accepting".
	* src/reader.c (reader): Default lr.default_rules to "all".
	Check for a valid lr.default_rules value.
	* src/lalr.c (state_lookahead_tokens_count): If lr.default_rules
	is "accepting", then only mark the accepting state as
	consistent.
	(initialize_LA): Tell state_lookahead_tokens_count whether
	lr.default_rules is "accepting".
	* src/tables.c (action_row): If lr.default_rules is not "all",
	then disable default rules in inconsistent states.
	* src/print.c (print_reductions): Use this opportunity to
	perform some assertions about whether lr.default_rules was
	obeyed correctly.
	* tests/local.at (AT_TEST_TABLES_AND_PARSE): New macro that
	helps with checking the parser tables for a grammar.
	* tests/input.at (%define lr.default_rules invalid values): New
	test group.
	* tests/reduce.at (AT_TEST_LR_DEFAULT_RULES): New macro using
	AT_TEST_TABLES_AND_PARSE.
	(`no %define lr.default_rules'): New test group generated by
	AT_TEST_LR_DEFAULT_RULES.
	(`%define lr.default_rules "all"'): Likewise.
	(`%define lr.default_rules "consistent"'): Likewise.
	(`%define lr.default_rules "accepting"'): Likewise.

2009-04-20  Akim Demaille  <demaille@gostai.com>

	Formatting change.

2009-04-20  Akim Demaille  <demaille@gostai.com>

	bison: factoring.
	* src/output.c (token_definitions_output): Use symbol_id_get
	instead of duplicating its logic.
	* TODO (YYERRCODE): Extend.

2009-04-20  Akim Demaille  <demaille@gostai.com>

	variables: prefer error-verbose to error_verbose.
	* data/bison.m4 (b4_error_verbose_if): Based on error-verbose
	instead of error_verbose.
	* src/scan-gram.l (%error-verbose): Map to the error-verbose
	variable.
	* doc/bison.texinfo: Promote %define error-verbose instead of
	%error-verbose.
	* tests/actions.at: Prefer %define error-verbose to %error-verbose.

2009-04-15  Akim Demaille  <demaille@gostai.com>

	variables: accept dashes.
	* data/bison.m4 (b4_percent_define_if_define_): Also map dashes to
	underscores.
	* src/scan-gram.l ({id}): Also accept dashes after the initial
	letter.
	({directive}): Use {id}.
	* src/parse-gram.y: Comment and formatting changes.
	* doc/bison.texinfo (Symbols): Adjust the lexical definitions of
	symbols.
	* src/complain.h, src/complain.c (yacc_at): New.
	* src/symtab.c (symbol_new): Use yacc_at to report inappropriate
	symbol names.
	* src/output.c (token_definitions_output): Do not #define token
	names with dashes.

2009-04-20  Akim Demaille  <demaille@gostai.com>

	Consistently refer to Yacc, not YACC.
	* src/getargs.c (usage, warnings_args): s/YACC/Yacc/.

2009-04-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Pacify make maintainer-check-posix.
	* tests/input.at (%define, --define): Move bison command-line
	options before grammar file name.

2009-04-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Document semicolon warnings.
	* NEWS (2.5): Here.

2009-04-14  Akim Demaille  <demaille@gostai.com>

	variables: use `parse.assert' instead of `assert'.
	* TODO (assert): Remove.
	* data/bison.m4 (b4_assert_if): Replace with...
	(b4_parse_assert_if): this.
	* data/lalr1.cc, data/variant.hh, tests/c++.at: Adjust.
	* doc/bison.texinfo (Decl Summary): Document parse.assert.

2009-04-14  Akim Demaille  <demaille@gostai.com>

	variables: use `parse.trace' instead of `debug'.
	* src/getargs.c (getargs): Map -t to %define trace.parse.
	* src/scan-gram.l (%debug): Map to %define trace.parse.
	* data/bison.m4 (b4_percent_define_if_define): Map `.' in variable
	names to `_' in macro names.
	(b4_debug_if): Replace with...
	(b4_parse_trace_if): this.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/lalr1.java,
	* data/yacc.c: Adjust.
	* doc/bison.texinfo (Decl Summary): Document %debug as obsoleted.
	Use @code to label the variable list.
	Document the variable parse.trace.
	(Tracing): Promote the parse.trace variable.
	* TODO: %printer is not documented.

2009-04-14  Akim Demaille  <demaille@gostai.com>

	doc: minor fixes.
	* doc/bison.texinfo (Decl Summary): Fix entry about %debug.
	(Table of Symbols): Remove duplicate entry for %debug.

2009-04-10  Eric Blake  <ebb9@byu.net>

	submodules: update to latest
	* submodules/autoconf: Use latest upstream Autoconf.

2009-04-06  Eric Blake  <ebb9@byu.net>

	Work around autoconf 2.63b bug in testsuite.
	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): Avoid tripping
	autoconf bug related to # in test.

2009-04-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.5): New section.  Describe new -D/--define feature.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	rename muscle_tab.* as muscle-tab.* for consistency.
	* src/muscle_tab.h, src/muscle_tab.c: Rename as...
	* src/muscle-tab.h, src/muscle-tab.c: these.
	* src/getargs.c, src/local.mk, src/main.c, src/output.c,
	* src/parse-gram.y, src/reader.c, src/scan-code.l: Adjust.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	Makefile: introduce $(BISON).
	* src/local.mk (BISON): New.
	(YACC): Use it.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	parser: handle %locations as %define locations.
	* src/getargs.h, src/getargs.c (locations_flag): Remove.
	* src/getargs.c, src/scan-code.l: Use muscle_percent_define_ensure
	to set "locations" to true.
	* src/output.c (prepare): Don't output "locations".
	* src/scan-gram.l (%locations): Handle it as a %<flag>.
	* src/parse-gram.y: It's no longer a token.
	Don't handle it.
	* data/bison.m4 (b4_locations_if): Define it with
	b4_percent_define_if_define.
	* data/c.m4, data/glr.cc: Adjust.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.c: Regen.

2009-04-06  Akim Demaille  <demaille@gostai.com>

	muscle: factor the handling of obsolete of obsolete directives.
	Suggested by Joel E. Denny.

	* src/muscle_tab.h, src/muscle_tab.c (muscle_percent_define_ensure):
	New, extracted from...
	* src/parse-gram.y (prologue_declaration: pure-parser): here.
	Remove it.
	(prologue_declaration: "%<flag>"): Use
	muscle_percent_define_ensure.
	(%error-verbose, %pure-parser): No longer tokens.
	* src/scan-gram.l (pure-parser): Return as a %<flag>.

2009-04-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix options documentation.
	* build-aux/cross-options.pl: As in --help output, write optional
	arguments as [=ARG] not =[ARG].
	* doc/bison.texinfo (Bison Options): Add -W/--warnings argument.

2009-04-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Replace BISON_PROG_GNU_M4 with Autoconf's AC_PROG_GNU_M4.
	If the first m4 in $PATH is wrong, it keeps looking.  Moreover, its
	requirements for a correct m4 are stricter.
	* m4/m4.m4: Make it a symbolic link to submodules/autoconf/m4/m4.m4.
	* configure.ac: Update to use AC_PROG_GNU_M4.
	Reported by Eric Blake.

2009-04-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Help with updating web manual.
	* HACKING: Incorporate instructions from gnulib/doc/README.
	* bootstrap.conf (gnulib_modules): Add gendocs.

2009-04-03  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2009-04-03  Akim Demaille  <demaille@gostai.com>

	Factor %FLAG at scan level.
	* src/parse-gram.y (PERCENT_DEBUG, PERCENT_ERROR_VERBOSE): Token
	definitions and associated rules, replaced by....
	(PERCENT_FLAG): this new token type, and rule.
	* src/scan-gram.l (RETURN_PERCENT_FLAG): New.
	Use it for %debug and %error-verbose.

2009-04-03  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2009-04-03  Akim Demaille  <demaille@gostai.com>

	Treat %debug as %define debug.
	* data/bison.m4 (b4_debug_if): New.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/yacc.c,
	* data/lalr1.java: Use it instead of b4_debug_flag.
	* src/getargs.h, src/getargs.c (debug_flag): Remove.
	* src/output.c (prepare): Don't output it.
	* src/parse-gram.y: Treat %debug as %define debug.

2009-04-03  Akim Demaille  <demaille@gostai.com>

	Treat %error-verbose as %define error_verbose.
	This allows to pass -Derror_verbose on the command line.  Better
	yet, it allows to pass -Derror_verbose=$(ERROR_VERBOSE), with
	ERROR_VERBOSE being defined as false or true.
	* data/bison.m4 (b4_percent_define_if_define): Instead of relying
	on b4_percent_define_ifdef, for does not check the defined value,
	but only whether the symbol is defined, rely on
	b4_percent_define_flag_if, so that a value of "false" is processed
	as a false.
	If not defined, define the flag to "false".
	(b4_error_verbose_if): New.
	* data/glr.c, data/lalr1.cc, data/yacc.c: Use it instead of
	b4_error_verbose_flag.
	* src/getargs.h, src/getargs.c (error_verbose_flag): Remove.
	* src/output.c (prepare): Don't output it.
	* src/parse-gram.y (%error-verbose): Treat as %define error_verbose.

2009-04-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix strange %define locations for default values.
	Reported by Akim Demaille at
	<http://lists.gnu.org/archive/html/bug-bison/2007-12/msg00001.html>
	and discussed again starting at
	<http://lists.gnu.org/archive/html/bison-patches/2008-11/msg00102.html>.
	* data/bison.m4 (b4_percent_define_default): Leave syncline blank
	because location information is bogus.
	Use angle brackets to delimit fake file name because square brackets
	look like underexpanded m4.  Choose a better fake file name.
	Use negative line numbers.
	* src/muscle_tab.c (muscle_percent_define_default): Likewise.
	* src/location.c (location_print): If line for a boundary is negative,
	only print that boundary's file name.
	* src/location.h: Document that.
	* tests/skeletons.at (%define Boolean variables: invalid skeleton
	defaults): Update output.

2009-04-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Pacify ./configure --enable-gcc-warnings.
	* Makefile.am (AM_CFLAGS): Remove $(WERROR_CFLAGS) because many files
	in lib won't compile with it.
	* src/local.mk (src_bison_CFLAGS): Use $(WERROR_CFLAGS) here only.

2009-03-31  Akim Demaille  <demaille@gostai.com>

	bootstrap: --help to stdout.
	* bootstrap (usage): Don't send --help to stderr.
	Use a here doc instead of a long string.

2009-03-31  Akim Demaille  <demaille@gostai.com>

	bootstrap: README-hacking no longer exists
	* bootstrap (checkout_only_file): Set to HACKING.

2009-03-26  Akim Demaille  <demaille@gostai.com>

	doc: merge HACKING and README-hacking.
	Two files is confusing.
	Reported by Alexandre Duret-Lutz.

	* README-hacking: Merge into...
	* HACKING (Working from the repository): here.

2009-03-26  Akim Demaille  <demaille@gostai.com>

	doc: update README-hacking.
	* README-hacking: We now use git and git submodules.
	Reported by Ralf Wildenhues and Alexandre Duret-Lutz.

2009-03-26  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: avoid GCC 4.3 warnings.
	GCC 4.3 now warns about "a || b && c" and asks for explicit
	parentheses.
	Reported by Alexandre Duret-Lutz.
	* data/location.cc: Update copyright years.
	(Position::operator==): Use parens to make precedence explicit.
	Compare lines and columns first, as they are more likely to be
	different, and they are faster to compare.

2009-03-26  Akim Demaille  <demaille@gostai.com>

	gnulib: update.
	* gnulib: Update to latest.
	* src/local.mk (AM_CFLAGS): Move to...
	* Makefile.am: here.
	* etc/prefix-gnulib-mk (prefix_assignment): Also transform
	AM_CFLAGS.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Comment changes.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Share b4_yytranslate_define.
	* data/lalr1.cc (b4_yytranslate_define): Move to...
	* data/c++.m4: here.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Use locations in the variant example.
	Yes, this obfuscates the point of this example, variants only.
	But glr.cc cannot work (yet?) without locations.  This change
	makes it easier to use this example with glr.cc.

	* examples/variant.yy (assert): %define it.
	(locations): Request them.
	(yylex): Bind the location to the stage.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Dub make_TOKEN as a public type interface.
	* data/c++.m4 (b4_symbol_constructor_declare)
	(b4_symbol_constructor_define): New empty stubs.
	(b4_public_types_declare, b4_public_types_define): Use them.
	* data/lalr1.cc (b4_symbol_constructor_declare)
	(b4_symbol_constructor_declare_)
	(b4_symbol_constructor_define_, b4_symbol_constructor_define):
	Move to...
	* data/variant.hh: here.
	Remove the "b4_variant_if" parts, as variant.hh is loaded only if
	needed.
	* data/lalr1.cc: No longer invoke b4_symbol_constructor_define and
	b4_symbol_constructor_declare, as it is now done by
	b4_public_types_define and b4_public_types_declare.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Coding style changes.
	* data/lalr1.cc (b4_symbol_constructor_declaration_)
	(b4_symbol_constructor_declarations)
	(b4_symbol_constructor_definition_)
	(b4_symbol_constructor_definitions)
	(b4_yytranslate_definition): Rename as...
	(b4_symbol_constructor_declare_)
	(b4_symbol_constructor_declare)
	(b4_symbol_constructor_define_)
	(b4_symbol_constructor_define)
	(b4_yytranslate_define): these.
	* data/variant.hh (b4_variant_definition): Rename as...
	(b4_variant_define): this.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Factor b4_assert_if, b4_lex_symbol_if, and b4_variant_if.
	* data/bison.m4 (b4_percent_define_if_define): New.
	* data/c++.m4 (b4_variant_if): Move to...
	* data/bison.m4: Here, using b4_percent_define_if_define.
	* data/lalr1.cc (b4_assert_if, b4_lex_symbol_if): Move to...
	* data/bison.m4: Here, using b4_percent_define_if_define.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	Dub symbol_type_base as a public type.
	* data/c++.m4 (b4_public_types_declare): Now define
	symbol_type_base and symbol_type.
	(b4_public_types_define): New.
	In both cases, the definitions are taken verbatim from lalr1.cc.
	* data/lalr1.cc: Adjust.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	b4_public_types_declare.
	* data/c++.m4 (b4_public_types_declare): New.
	* data/glr.cc, data/lalr1.cc: Use it.

2009-03-02  Akim Demaille  <demaille@gostai.com>

	b4_semantic_type_declare.
	* data/c++.m4 (b4_semantic_type_declare): New.
	Factors and generalizes what was in glr.cc and lalr1.cc.
	* data/variant.hh (b4_semantic_type_declare): Redefine it for
	variants.
	* data/lalr1.cc, data/glr.cc: Use it.

2009-02-26  Akim Demaille  <demaille@gostai.com>

	Upgrade gnulib.
	* gnulib: Upgrade from master.
	* lib/.cvsignore, lib/.gitignore, m4/.cvsignore, m4/.gitignore:
	Regen.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Remove useless arguments.
	* data/glr.c (yy_reduce_print): $$ and @$ are not used and not
	relevant.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Comment changes.
	* data/lalr1.cc: here.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Fix glr.cc's debug level handling.
	* data/glr.cc (yydebug_): Remove, as it is actually yydebug from
	glr.c which is used.
	(debug_level, set_debug_level): Adjust.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Copyright years.
	* data/glr.c: Add 2007 and 2008 here, consistently with the comments.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Style changes.
	* etc/bench.pl.in (generate_grammar_list): Consistently use
	location_type, not yy::location.

2009-02-25  Akim Demaille  <demaille@gostai.com>

	Comment change.
	* data/lalr1.cc: here.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Make yyparser::error public.
	* data/lalr1.cc: here.
	There is no good reason to keep it private (and it is convenient
	to use it from the scanner for instance).  It is already public in
	glr.cc.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Comment changes.
	* data/glr.cc: here.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Remove trailing blanks.
	The epilogue has its own ending \n, no need to add another.

	* data/glr.c, data/lalr1.java, data/yacc.c: dnl when outputting the
	epilogue.
	* data/glr.cc: dnl when extending the epilogue.
	Remove stray "private:".

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Use b4_c_modern.
	* data/c.m4 (b4_c_function_decl): Here.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Comment changes.
	* data/lalr1.cc: here.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Extract variant.hh
	* data/variant.hh: New, extracted from...
	* data/lalr1.cc: here.
	Adjust.
	* data/local.mk: Adjust.

2009-02-19  Akim Demaille  <demaille@gostai.com>

	Extract stack.hh from lalr1.cc.
	* data/stack.hh: New.
	* data/lalr1.cc: Extract from here.
	* data/local.mk: Adjust.

2009-02-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add reminder about uploading public key to keys.gnupg.net.
	* HACKING (Release Procedure): Here.

2009-01-28  Akim Demaille  <demaille@gostai.com>

	* NEWS: Update information about 2.4.1 and 2.4.2.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Reformat NEWS.
	* NEWS: Use more outline-mode markup.
	Suggested by Jim Meyering.

2009-01-08  Akim Demaille  <demaille@gostai.com>

	Fix grep portability issues.
	Grep on Solaris does not support -q.
	Reported by Summum Bonum.

	* NEWS: Add a stub for 2.4.2.
	* THANKS: Add Summum Bonum.
	* tests/atlocal.in (EGREP): New.
	(CC, CXX, XSLTPROC): Make it possible to override them via
	envvars.
	* tests/java.at: Use $EGREP instead of egrep.
	Use AT_CHECK's ignore instead of grep's -q.

2008-12-11  Akim Demaille  <demaille@gostai.com>

	Pass the token type to yysyntax_error.
	* data/yacc.c (yysyntax_error): Take the translated token instead
	of the raw number.
	Adjust callers.
	* TODO: Update.

2008-12-11  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* data/glr.c: Formatting changes.

2008-12-11  Akim Demaille  <demaille@gostai.com>

	Propagate i18n changes into glr.c.
	* TODO: Update.
	* data/glr.c (yyreportSyntaxError): Use "switch" instead of
	building the error message format dynamically.
	* data/lalr1.java: Formatting changes.

2008-12-11  Akim Demaille  <demaille@gostai.com>

	Use testsuite -C.
	* tests/local.mk: Replace "cd && testsuite" by "testsuite -C".
	Solves problems when top_srcdir is an absolute path.
	Suggested by Eric Blake.
	* configure.ac: Require Autoconf 2.62.

2008-12-11  Akim Demaille  <demaille@gostai.com>

	Simplify the i18n of the error messages.
	* data/lalr1.cc: Comment changes.
	* data/yacc.c (yysyntax_error): Rewrite, using a switch as in
	lalr1.cc instead of building dynamically the format string.

2008-12-08  Akim Demaille  <demaille@gostai.com>

	Fix portability issue in the test suite.
	* tests/local.at (AT_MATCHES_CHECK): New.
	Based on Perl instead of Sed.  Sed has too many portability
	pitfalls, not ever Sed is GNU Sed.
	* tests/actions.at (Fix user actions without a trailing semicolon):
	Use it.

2008-12-08  Akim Demaille  <demaille@gostai.com>

	Update data/README.
	* data/README: Document glr.cc, lalr1.java, m4sugar and xslt.

2008-12-08  Akim Demaille  <demaille@gostai.com>

	Install autoconf as a submodule to get m4sugar.
	* .gitmodules: Add submodules/autoconf.
	* data/m4sugar/foreach.m4, data/m4sugar/m4sugar.m4: Now links into
	submodules/autoconf.

2008-12-08  Akim Demaille  <demaille@gostai.com>

	Test token.prefix in all the skeletons.
	* data/java.m4 (b4_token_enum): Use the token.prefix.
	* tests/local.at (AT_BISON_OPTION_PUSHDEFS): Define AT_TOKEN_PREFIX.
	* tests/calc.at (_AT_DATA_CALC_Y): Use it.
	Add checks for yacc.c, glr.c, lalr1.cc and glr.cc.
	* tests/java.at: Comment changes.
	(AT_CHECK_JAVA_MINIMAL): Define the END token.
	(Java parser class and package names): Add token.prefix check.

2008-12-08  Akim Demaille  <demaille@gostai.com>

	Fix regeneration of atconfig.
	* tests/local.mk (tests/atconfig): The rule was incorrect, but
	remove it: now that there is no tests/Makefile.am, the top-level
	Makefile properly updates atconfig when needed.

2008-12-07  Di-an Jan  <dianj@freeshell.org>

	Implement the FIXME that ends an user action with a semicolon
	if it seems necessary.
	* src/scan-code.l (flex rules section): Flag cpp directive from
	any `#' to the first unescaped end-of-line.  Semicolon is not
	needed after `;', `{', '}', or cpp directives and is needed after
	any other token (whitespaces and comments have no effect).
	* tests/actions.at (Fix user actions without a trailing semicolon):
	New test.
	* tests/input.at (AT_CHECK_UNUSED_VALUES): Add semicolons to
	to make user actions complete statements.
	Adjust column numbers in error messages.
	* tests/regression.at (Fix user actions without a trailing semicolon):
	Remove.  Covered by new test.

2008-12-07  Akim Demaille  <demaille@gostai.com>

	Update gnulib.
	* gnulib: Update from master.

2008-12-05  Eric Blake  <ebb9@byu.net>

	Avoid compiler warning.
	* src/output.c (muscle_insert_item_number_table): Delete unused
	function.

2008-12-02  Eric Blake  <ebb9@byu.net>

	Build testsuite with newer autoconf.
	* tests/output.at (m4_expand): Don't override in newer autoconf,
	where the underlying implementation changed.
	* tests/cxx-type.at (_AT_RESOLVED_GLR_OUTPUT)
	(_AT_RESOLVED_GLR_OUTPUT_WITH_LOC, _AT_AMBIG_GLR_OUTPUT)
	(_AT_AMBIG_GLR_OUTPUT_WITH_LOC, _AT_GLR_STDERR)
	(_AT_VERBOSE_GLR_STDERR): Expand to double-quoted strings,
	since some of them contain unbalanced ')'.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Use b4_symbol for printers and destructors everywhere.
	* data/bison.m4 (b4_symbol_action_location): New.
	* data/c.m4 (b4_symbol_actions): Remove.
	Adjust all callers to use by b4_symbol_foreach and the corresponding
	b4_symbol_printer/destructor macro.
	* data/glr.cc: Adjust.
	* data/lalr1.java: Adjust the %destructor sanity check.
	* src/output.c (symbol_code_props_output): Remove, we no longer
	need the b4_symbol_printers/destructors tables.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Use b4_symbol_case_.
	* data/lalr1.cc, data/bison.m4 (b4_symbol_action): Use
	b4_symbol_case_.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Move b4_symbol based macro to bison.m4.
	* data/lalr1.cc (b4_symbol_, b4_symbol, b4_symbol_if)
	(b4_symbol_action, b4_symbol_destructor, b4_symbol_printer)
	(b4_symbol_case_, b4_symbol_foreach, b4_type_action_)
	(b4_type_foreach): Move to...
	* data/bison.m4: Here.
	* data/lalr1.cc (b4_symbol_action): Specialize for C++: use
	b4_symbol_value_template instead of b4_symbol_value.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	b4_symbol/type_foreach.
	* data/lalr1.cc (b4_symbol_foreach, b4_type_foreach): New.
	Use them.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Use the symbol properties to output the printer/destructor for lalr1.cc.
	Instead of defining complex list of tuples to define various
	properties of the symbols, we now prefer to define symbols as
	"structs" in m4: using the symbol key (its number), and the
	property name, b4_symbol gives it value.  Use this to handle
	destructors and printers.

	* src/output.c (CODE_PROP): New.
	(prepare_symbol_definitions): Use it to define the printer and
	destructor related attributes of the symbols.
	* data/lalr1.cc (b4_symbol_actions): Rename as...
	(b4_symbol_action): this.
	Use b4_symbol instead of 6 arguments.
	(b4_symbol_printer, b4_symbol_destructor): New.
	Use them instead of b4_symbol_actions.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Avoid capturing variables too easily.
	* src/muscle_tab.h (MUSCLE_INSERT_BOOL, MUSCLE_OBSTACK_SGROW): Use
	v__ and p__ instead of v and p.

2008-12-01  Akim Demaille  <demaille@gostai.com>

	Remove spurious empty line before syncline.
	* data/bison.m4 (b4_syncline): Don't output an empty line before
	the output.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Convert lib/Makefile.am into lib/local.mk.
	The real problem is rather gnulib.mk, which itself is extracted
	from a Makefile.am that gnulib expects to the "recursive".  The
	tool prefix-gnulib-mk converts such a gnulib.mk to be
	non-recursive.  Also, some AC_SUBST variables need to be adjusted.

	* etc/prefix-gnulib-mk: New.
	* bootstrap (slurp): Use it to convert further gnulib.mk.
	No longer try to avoid re-creation of lib/gnulib.mk as the changes
	are deeper.
	* lib/Makefile.am: Rename as...
	* lib/local.mk: this.
	Adjust to be prefixed.
	* Makefile.am, configure.ac: Adjust.
	* src/local.mk (AM_CPPFLAGS): Extend it, don't define it.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	s/_FLAGS/FLAGS/.
	* tests/local.mk (TESTSUITE_FLAGS, AUTOTEST_FLAGS): Rename as...
	(TESTSUITEFLAGS, AUTOTESTFLAGS): these to compy with the GCS.
	Reported by Eric Blake.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Use b4_parser_tables_define in glr.cc.
	* data/glr.c: Use b4_parser_tables_define instead of defining the
	(deterministic integral) tables by hand.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Use b4_parser_tables_define in Java.
	* data/java.m4 (b4_typed_parser_table): Rename as...
	(b4_typed_parser_table_define): this, for consistency.
	Accept a comment as $4.
	Move $2 into yy*_.
	(b4_integral_parser_table): Rename as...
	(b4_integral_parser_table_define): this.
	* data/lalr1.java: Adjust all uses.
	Use b4_parser_tables_define instead of generation by hand.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Prepare the convergence bw C style and Java table generation.
	* data/bison.m4 (b4_tables_map, b4_tables_declare)
	(b4_tables_define): Rename as...
	(b4_integral_parser_tables_map, b4_parser_tables_declare)
	(b4_parser_tables_define): these.
	* data/c.m4 (b4_table_define): Rename as...
	(b4_integral_parser_table_define): this.
	* data/lalr1.cc: Adjust.
	(b4_table_define, b4_table_declare): Rename as...
	(b4_integral_parser_table_define)
	(b4_integral_parser_table_declare): these.
	(yyrline_): Move the comment where it is actually used.
	* data/yacc.c: Adjust.
	(yyrline): Use b4_integral_parser_table_define.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Factor the generation of the (integral) tables bw yacc.c and lalr1.cc.
	* data/lalr1.cc (b4_tables_map): Move to...
	* data/bison.m4: here.
	Update the comment for yytable during the flight.
	(b4_tables_declare, b4_tables_define): New.
	* data/lalr1.cc: Use them.
	* data/c.m4 (b4_table_define): New.
	* data/yacc.c: Use b4_tables_define instead of output the tables
	by hand.
	* tests/regression.at (Web2c Actions): Adjust the expected output,
	the order of the tables changed.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Get rid of (yy)rhs and (yy)prhs.
	These tables are no longer needed in the parsers, and they don't seem to
	be useful.  They are not documented either.

	* src/output.c (prepare_rules): Get rid of rhs and prhs.
	Adjust the computation of (yy)r2.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Rule length is unsigned.
	* src/gram.h, src/gram.c (rule_rhs_length): Return a size_t.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Get rid of lalr1-split.cc.
	It was no longer maintainer.

	* data/lalr1-split.cc: Remove.
	* etc/bench.pl.in (bench_fusion_parser): Remove.
	Adjust.

2008-11-26  Akim Demaille  <demaille@gostai.com>

	Use yy* consistently.
	* data/glr.c: Now that yyrhs no longer exists as a global
	variable, rename local "rhs" variables into "yyrhs" for
	consistency.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Get rid of yyrhs and yyprhs in glr.c.
	* data/glr.c (yyrhs, yyprhs): Remove.
	Instead, use the state stack and yystos.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Flag glr tests.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): If glr, declare it
	as an Autotest keyword.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Prefer TESTSUITE_FLAGS.
	TESTSUITEFLAGS is barely readable.

	* tests/local.mk (TESTSUITE_FLAGS): Default to $(TESTSUITEFLAGS)
	for backward compatibility.
	Use the former instead of the latter.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Get rid of yyrhs and yyprhs in larl1.java.
	* data/lalr1.java (yyrhs_, yyprhs_): Remove.
	(yy_reduce_print): Rather, use yystos_ and the state stack.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Formatting changes.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Get rid of yyrhs and yyprhs in yacc.c.
	They were used to get the symbol types, given a rule number, when
	displaying the top of the stack before a reduction.  But the
	symbol type is available from the state stack.  This has two be
	benefits: two tables less in the parser (making it smaller), and a
	more consistent use of the three stacks which will help to fuse
	them.

	* data/yacc.c (yyprhs, yyrhs): Remove.
	(YY_REDUCE_PRINT): Pass yyssp to yy_reduce_print.
	(yy_reduce_print): Take yyssp as argument.
	Use it, together with yystos, to get the symbol type.
	* tests/regression.at (Web2c Report): Remove these tables from the
	expected output.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	b4_tables_map.
	The point is to factor the generation of the tables across skeletons.
	This is language dependant.

	* data/c.m4 (b4_comment_): New.
	Should be usable to define how to generate tables independently of
	the language.
	(b4_c_comment): New.
	(b4_comment): Bounce to b4_c_comment.
	Now support $2 = [PREFIX] for indentation.
	* data/lalr1.cc (b4_table_declare): Don't output a comment if
	there is no comment.
	Indent it properly when there is one.
	Output the ending semicolon.
	(b4_table_define): Space changes.
	Output the ending semicolon.
	(b4_tables_map): New.
	Use it twice instead of declaring and defining the (integral)
	tables by hand.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	b4_table_declare.
	* data/lalr1.cc (b4_table_declare): New.
	Use it to declare the tables defined with b4_table_define.
	(b4_table_define): Declare a third arg to match b4_table_declare
	signature.
	Move all the comments around invocations of b4_table_define into
	the invocations itselves.
	Move things around to have the order for declarations and
	definitions.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* data/lalr1.java: here.

2008-11-25  Akim Demaille  <demaille@gostai.com>

	b4_args is more general than only C++.
	* data/lalr1.cc (b4_args, _b4_args): Move to...
	* data/bison.m4: here.

2008-11-21  Di-an Jan  <dianj@freeshell.org>

	Implement no-XXX arguments for --warnings, --report, --trace.
	* src/getargs.c (flags_argmatch): Handles no-XXX.
	Fix typo in doxygen comment.

2008-11-21  Akim Demaille  <demaille@gostai.com>

	Display the changes in cross-options.texi.
	* build-aux/cross-options.pl ($sep): New, to separate items.
	* doc/local.mk ($(CROSS_OPTIONS_TEXI)): Use diff to display the
	changes.

2008-11-20  Di-an Jan  <dianj@freeshell.org>

	Improves options in the manual.
	* doc/bison.texinfo (-g, -x): Add space before argument.
	(Option Cross Key): Implement FIXME: listing directives also.
	* build-aux/cross-options.pl:  Read from <STDIN> rather than <>.
	(Short Option): Special case -d.  Put arguments inside @option.
	(Bison Directive): Add column, automatically extracted from
	src/scan-gram.l (actual name passed as the first argument)
	with special case for %define.
	* doc/local.mk (doc/cross-options.texi): Pass src/scan-gram.l
	to build-aux/cross-options.pl.
	* src/getargs.c (usage): Document limitations of cross-options.pl.
	* src/scan-gram.l: Likewise.

2008-11-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix unexpanded macros in GLR defines file.
	Reported by Csaba Raduly at
	<http://lists.gnu.org/archive/html/bug-bison/2008-11/msg00048.html>.
	* THANKS (Csaba Raduly): Add.
	* data/glr.c: Fix overquoting on b4_prefix for yylval and yylloc.
	* tests/calc.at (_AT_DATA_CALC_Y): If %defines is specified, generate
	lexer in a separate module that includes the defines file.
	(AT_CHECK_CALC): From AT_FULL_COMPILE, request compilation of lexer
	source.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Push AT_DEFINES_IF.
	Adjust AT_LOC and AT_VAL to use AT_NAME_PREFIX.
	(AT_BISON_OPTION_POPDEFS): Pop AT_DEFINES_IF.
	(AT_DATA_SOURCE_PROLOGUE): New.
	(AT_DATA_GRAMMAR_PROLOGUE): Use AT_DATA_SOURCE_PROLOGUE.
	(AT_DATA_SOURCE): New.
	(AT_FULL_COMPILE): Extend to support an additional source file.

2008-11-18  Akim Demaille  <demaille@gostai.com>

	More TODO.
	* TODO: More short term issues.

2008-11-18  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2008-11-18  Akim Demaille  <demaille@gostai.com>

	Use b4_subtract where possible.
	* data/lalr1.cc (b4_subtract): Move to...
	* data/bison.m4: here.
	* data/glr.c (b4_rhs_data): Use it.
	* data/yacc.c (b4_rhs_value, b4_rhs_location): Use it.

2008-11-18  Akim Demaille  <demaille@gostai.com>

	Remove incorrect mode specification.
	* data/glr.cc: Don't pretend it's C code.

2008-11-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Simplify last patch slightly.
	* src/getargs.c (getargs): Here.

2008-11-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix last warning from --enable-gcc-warnings.
	* src/getargs.c (getargs): Don't assign const address to non-const
	pointer.

2008-11-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't let maintainer-*-check targets force a version update.
	* cfg.mk (_is-dist-target): Implement.  maintainer-check* was already
	handled.

2008-11-17  Di-an Jan  <dianj@freeshell.org>

	* doc/bison.texinfo: Synchronize ``Detail Node Listing''.
	Align menus.  Adjust word wrapping.  Use node names for menu names.
	(Examples): Don't abbreviate node names.
	(LocalWords): Remove abbreviations.
	(Copying): Make description a sentence.
	(Java Action Features): Remove period to match the rest of menu.

2008-11-17  Di-an Jan  <dianj@freeshell.org>

	Handles several --enable-gcc-warnings.
	* src/getargs.c (command_line_location): Set parameters to void.
	* src/output.c (symbol_type_name_cmp): Make static.
	(symbols_by_type_name): Set parameters to void.
	(symbol_definitions_output): Remove unused parameter.  Rename as...
	(prepare_symbol_definitions): this.
	(muscles_output): Move symbol_definitions_output to...
	(output): here as prepare_symbol_definitions.
	* tests/c++.at (AT_CHECK_VARIANTS): Remove unused parameters of main.
	(AT_CHECK_NAMESPACE): Make unused parameter lloc unnamed.

2008-11-17  Di-an Jan  <dianj@freeshell.org>

	* tests/c++.at (AT_CHECK_VARIANTS): Fixes tests 198-202.
	Use AT_DATA_GRAMMAR instead of AT_DATA for compiled tests.

2008-11-16  Akim Demaille  <demaille@gostai.com>

	Add missing $(EXEEXT).
	* doc/local.mk ($(CROSS_OPTIONS_TEXI)): The target is
	"src/bison$(EXEEXT)".
	Reported by Di-an Jan.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	* TODO: Update.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* tests/input.at: here.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove duplicate header inclusion.
	* src/LR0.c: here.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	* src/parse-gram.h, src/parse-gram.c: Regen.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Support parametric types.

	There are two issues to handle: first scanning nested angle
	bracket pairs to support types such as std::pair< std::string,
	std::list<std::string> > >.

	Another issue is to address idiosyncracies of C++: do not glue two
	closing angle brackets together (otherwise it's operator>>), and
	avoid sticking blindly a TYPE to the opening <, as it can result
	in '<:' which is a digraph for '['.

	* src/scan-gram.l (brace_level): Rename as...
	(nesting): this.
	(SC_TAG): New.
	Implement support for complex tags.
	(tag): Accept
	, but not <.
	* data/lalr1.cc (b4_symbol_value, b4_symbol_value_template)
	(b4_symbol_variant): Leave space around types as parameters.
	* examples/variant.yy: Use nested template types and leading ::.
	* src/parse-gram.y (TYPE, TYPE_TAG_ANY, TYPE_TAG_NONE, type.opt):
	Rename as...
	(TAG, TAG_ANY, TAG_NONE, tag.opt): these.
	* tests/c++.at: Test parametric types.

2008-11-15  Akim Demaille  <akim@betelgeuse.gostai.ensta.fr>

	Test token.prefix.
	This is not sufficient, but we test at least that the make_SYMBOL
	interface is not affected by token.prefix.  A more general test
	will be implemented when the support of token.prefix is generalized
	to more skeletons.

	* tests/c++.at: One more variant test, using token.prefix.

2008-11-15  Akim Demaille  <akim@betelgeuse.gostai.ensta.fr>

	Test the make_TOKEN interface.
	* tests/c++.at (AT_CHECK_VARIANTS): Require and use locations.
	Factor the common code in yylex.
	Use it to test "%define lex_symbol".

2008-11-15  Akim Demaille  <akim@betelgeuse.gostai.ensta.fr>

	Formatting change.

2008-11-15  Akim Demaille  <akim@betelgeuse.gostai.ensta.fr>

	Simplify code for variants bench marks.
	* etc/bench.pl.in (&generate_grammar_list): Define and use
	location_type.
	Factor the common code in yylex.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Better error message.
	* bootstrap (find_tool): Fix the error message.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Update variant.yy to newest interface.
	* examples/variant.yy: Define lex_symbol.
	Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Don't use locations in variant.yy.
	* examples/variant.yy: Adjust to not using locations.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Comment changes.
	* data/local.mk, etc/local.mk, examples/local.mk: Use Automake
	comments for the license.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove tests/Makefile.am.
	* tests/Makefile.am: Rename as...
	* tests/local.mk: this.
	* Makefile.am, configure.ac: Adjust.
	* Makefile.am (DISTCLEANFILES): Define.
	(maintainer-check, maintainer-xml-check, maintainer-push-check):
	Remove, we no longer need to bounce to the real targets.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Comment changes.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	djgpp/local.mk.
	* Makefile.am (EXTRA_DIST): Move djgpp related part to...
	* djgpp/local.mk: this new file.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove doc/Makefile.am.
	* doc/Makefile.am: Rename as...
	* doc/local.mk: this.
	Adjust paths
	* Makefile.am, configure.ac: Adjust.
	* Makefile.am (MOSTLYCLEANFILES): New.
	* src/local.mk: Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Move sc_tight_scope into maint.mk.
	It does not work, and I don't know how it was supposed to work: it
	seems to be looking for sources in the build tree.  I just moved
	it at a better place, fixing it is still required.

	* src/local.mk (echo): Remove.
	(sc_tight_scope): Move to...
	* maint.mk: here.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.h: Regen.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove src/Makefile.am.
	* src/Makefile.am: Rename as...
	* src/local.mk: this.
	Prefix all the paths with src/.
	(AUTOMAKE_OPTIONS): Build object files in the sub dirs.
	(AM_CPPFLAGS): Find find in builddir/src.
	(YACC): Move the flags into...
	(AM_YFLAGS): here.
	* maint.mk (sc_tight_scope): Disable.
	It used to bounce to the version in src/Makefile.am which is now
	part of this very Makefile.
	* Makefile.am, configure.ac: Adjust.
	* src/scan-code-c.c, src/scan-code.l: We can no longer rely on
	include "..." to find files "here": we are no longer in src/, so
	qualify the includes with src/.
	* doc/Makefile.am (PREPATH): No longer include the top_builddir
	prefix.
	(.x.1): Adjust to be able to create src/foo from the top level
	Makefile, instead of going bounce to src/Makefile the creation of
	foo.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove useless variable.
	* doc/Makefile.am (srcsrcdir): Remove.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove data/Makefile.am.
	* data/Makefile.am: Rename as...
	* data/local.mk: this.
	Adjust paths.
	* Makefile.am, configure.ac: Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove etc/Makefile.am.
	* etc/Makefile.am: Rename as...
	* etc/local.mk: this.
	Adjust.
	* Makefile.am, configure.ac: Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove examples/local.mk.
	examples/calc++/Makefile.am might be interesting to keep as is, since
	it is an example in itself.

	* examples/Makefile.am: Rename as...
	* examples/local.mk: this.
	Adjust.
	* Makefile.am, configure.ac: Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Remove build-aux/Makefile.am.
	Recursive Makefiles are really way too slow, let's get rid of some of
	them.

	* build-aux/Makefile.am: Rename as...
	* build-aux/local.mk: this.
	Adjust paths.
	* Makefile.am, configure.ac: Adjust.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Provide convenience constructors for locations and positions.
	* data/location.cc (position::position): Accept file, line and
	column as arguments with default values.
	Always qualify initial line and column literals as unsigned.
	(location::location): Provide convenience constructors.

2008-11-15  Akim Demaille  <demaille@gostai.com>

	Instead of using make_symbol<TOK_FOO>, generate make_FOO for each
	token type.
	Using template buys us nothing, and makes it uselessly complex to
	construct a symbol.  Besides, it could not be generalized to other
	languages, while make_FOO would work in C/Java etc.

	* data/lalr1.cc (b4_symbol_): New.
	(b4_symbol): Use it.
	(b4_symbol_constructor_declaration_)
	(b4_symbol_constructor_definition_): Instead of generating
	specializations of an overloaded template function, just generate
	several functions whose names are forged from the token names
	without the token.prefix.
	(b4_symbol_constructor_declarations): Generate them for all the
	symbols, not just by class of symbol type, now that instead of
	specializing a function template by the token, we generate a
	function named after the token.
	(b4_symbol_constructor_specialization_)
	(b4_symbol_constructor_specializations): Remove.
	* etc/bench.pl.in: Adjust to this new API.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	%define token.prefix.
	Provide a means to add a prefix to the name of the tokens as
	output in the generated files.  Because of name clashes, it is
	good to have such a prefix such as TOK_ that protects from names
	such as EOF, FILE etc.  But it clutters the grammar itself.

	* data/bison.m4 (token.prefix): Empty by default.
	* data/c.m4 (b4_token_enum, b4_token_define): Use it.
	* data/lalr1.cc (b4_symbol): Ditto.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Compute at M4 time some of the subtractions.
	* data/lalr1.cc (b4_subtract): New.
	(b4_rhs_data): Use it.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	symbol::token.
	This allows the user to get the type of a token returned by yylex.

	* data/lalr1.cc (symbol::token): New.
	(yytoknum_): Define when %define lex_symbol, independently of
	%debug.
	(yytoken_number_): Move into...
	(symbol::token): here, since that's the only use.
	The other one is YYPRINT which was not officially supported
	by lalr1.cc, and anyway it did not work since YYPRINT uses this
	array under a different name (yytoknum).

2008-11-13  Akim Demaille  <demaille@gostai.com>

	YYERRCODE.
	* TODO (YYERRCODE): Mention the case of $undef.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	TODO: YYPRINT.
	* TODO (YYPRINT): New.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Comment changes.
	* data/lalr1.cc, data/yacc.c: Fix the description of the
	yytranslate and yytoknum tables.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Define make_symbol in the header.
	To reach good performances these functions should be inlined (yet
	this is to measure precisely).  To this end they must be available
	to the caller.

	* data/lalr1.cc (b4_symbol_constructor_definition_): Qualify
	location_type with the class name.
	Since will now be output in the header, declare "inline".
	No longer use b4_symbol_constructor_specializations, but
	b4_symbol_constructor_definitions in the header.
	Don't call it in the *.cc file.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Define yytranslate in the header for lex_symbol.
	* data/lalr1.cc: Move the invocation of b4_yytranslate_definition
	into the header file when using %define lex_symbol.
	(yytranslate_): Declare inline.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Define the constructors of symbol_type in
	b4_symbol_constructor_definitions.
	The constructors are called by the make_symbol functions, which a
	forthcoming patch will move elsewhere.  Hence the interest of
	putting them together.

	The stack_symbol_type does not need to be moved, it is used only
	by the parser.

	* data/lalr1.cc: Move symbol_type and symbol_base_type
	constructors into...
	(b4_symbol_constructor_definitions): here.
	Adjust.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Make it easier to move the definition of yytranslate_.
	Forthcoming changes will make it possible to use yytranslate_
	from outside the parser implementation file.

	* data/lalr1.cc (b4_yytranslate_definition): New.
	Use it.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Remove useless class specification.
	* data/lalr1.cc (b4_symbol_constructor_specialization_): No need
	to refer to the class name to use a type defined by the class for
	arguments of member functions.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Finer input type for yytranslate.
	This patch is debatable: the tradition expects yylex to return an int
	which happens to correspond to token_number (which is an enum).  This
	allows for instance to return characters (such as '*' etc.).  But this
	goes against the stronger typing I am trying to have with the new
	lex interface which return a symbol_type.  So in this case, feed
	yytranslate_ with a token_type.

	* data/lalr1.cc (yytranslate_): When in %define lex-symbol,
	expect a token_type.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Honor lex-params in %define lex_symbol mode.
	* data/lalr1.cc: Use b4_lex_param.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Simplify names.
	* src/output.c (symbol_definitions_output): Rename symbol
	attributes type_name and has_type_name as type and has_type.
	* data/lalr1.cc: Adjust uses.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Use b4_type_names for the union type.
	The union used to compute the size of the variant used to iterate
	over the type of all the symbols, with a lot of redundancy.  Now
	iterate over the lists of symbols having the same type-name.

	* data/lalr1.cc (b4_char_sizeof_): New.
	(b4_char_sizeof): Use it.
	Adjust to be called with a list of numbers instead of a single
	number.
	Adjust its caller for new-line issues.

2008-11-13  Akim Demaille  <demaille@gostai.com>

	Define the "identifier" of a symbol.
	Symbols may have several string representations, for instance if
	they have an alias.  What I call its "id" is a string that can be
	used as an identifier.  May not exist.

	Currently the symbols which have the "tag_is_id" flag set are
	those that don't have an alias.  Look harder for the id.

	* src/output.c (is_identifier): Move to...
	* src/symtab.c (is_identifier): here.
	* src/symtab.h, src/symtab.c (symbol_id_get): New.
	* src/output.c (symbol_definitions_output): Use it to define "id"
	and "has_id".
	Remove the definition of "tag_is_id".
	* data/lalr1.cc: Use the "id" and "has_id" whereever "tag" and
	"tag_is_id" were used to produce code.
	We still use "tag" for documentation.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Locations are no longer required by lalr1.cc.
	* data/lalr1.cc (_b4_args, b4_args): New.
	Adjust all uses of locations to make them optional.
	* tests/c++.at (AT_CHECK_VARIANTS): No longer use the locations.
	(AT_CHECK_NAMESPACE): Check the use of locations.
	* tests/calc.at (_AT_DATA_CALC_Y): Adjust to be usable with or
	without locations with lalr1.cc.
	Test these cases.
	* tests/output.at: Check lalr1.cc with and without location
	support.
	* tests/regression.at (_AT_DATA_EXPECT2_Y, _AT_DATA_DANCER_Y):
	Don't use locations.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	AT_FULL_COMPILE.
	* tests/local.at (AT_FULL_COMPILE): New.
	* tests/actions.at, tests/calc.at, tests/regression.at: Use it.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Support parens in calc++.
	* doc/bison.texinfo (Calc++ Scanner, Calc++ Parser): Support parens.
	* examples/calc++/test (run): Check the expected output.
	Adjust callers.
	Check parens too.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Simplify lalr1.cc since %defines is mandatory.
	* data/lalr1.cc: Remove useless calls to b4_defines_if.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	TODO: yyfmt.
	* TODO (yysyntax_error): New item.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Prefer M4 to CPP.
	* data/lalr1.cc: Use b4_error_verbose_if instead of #if
	YYERROR_VERBOSE.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Support i18n of the parse error messages.
	* TODO (lalr1.cc/I18n): Remove.
	* data/lalr1.cc (yysyntax_error_): Support the translation of the
	error messages, as done in yacc.c.
	Stay within the yy* pseudo namespace.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	More TODO.
	* TODO (single stack, yysyntax_error): New.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Make it possible to return a symbol_type from yylex.
	* data/lalr1.cc (b4_lex_symbol_if): New.
	(parse): When lex_symbol is defined, expected yylex to return the
	complete lookahead.
	* etc/bench.pl.in (generate_grammar_list): Extend to support this
	yylex interface.
	(bench_variant_parser): Exercise it.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Remove useless bench case.
	* etc/bench.pl.in (bench_variant_parser): VARIANT_DESTROY is
	no longer used.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Improve display of directives.
	* etc/bench.pl.in (parse_term): Don't add useless eol.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Use string_cast in the bench.
	* etc/bench.pl.in (generate_grammar_list): Define and use
	string_cast.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Replace yychar with a Boolean.
	* data/lalr1.cc (parse::yychar): Replace by...
	(parse::yyempty): this.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Factor the tables.
	* TODO: New item.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Let yytranslate handle the eof case.
	* data/lalr1.cc (yytranslate_): Handle the EOF case.
	Adjust callers.
	No longer expect yychar to be equal to yyeof_, rather, test the
	lookahead's (translated) kind.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	yychar cannot be empty in yyerrlab.
	* TODO (yychar == yyempty_): New.
	* data/lalr1.cc: Remove the handling of this case.
	This eases forthcoming changes related to yychar and yytranslate.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Bench: syntactic sugar for %define/#define.
	* etc/bench.pl.in (parse_dirs): Support %d and #d with arguments.
	(&bench_push_parser, bench_variant_parser): Use this feature.
	(&eat): New.
	Use it.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Less memory pressure on the "list" bench.
	* etc/bench.pl.in (generate_grammar_list): Do not accumulate all
	the values, to limit memory pressure.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Introduce make_symbol.
	make_symbol provides a means to construct a full symbol (kind,
	value, location) in a single shot.  It is meant to be a Symbol
	constructor, parameterized by the symbol kind so that overloading
	would prevent incorrect kind/value pairs.  Unfortunately
	parameterized constructors do not work well in C++ (unless the
	parameter also appears as an argument, which is not acceptable),
	hence the use of a function instead of a constructor.

	* data/lalr1.cc (b4_symbol_constructor_declaration_)
	(b4_symbol_constructor_declarations)
	(b4_symbol_constructor_specialization_)
	(b4_symbol_constructor_specializations)
	(b4_symbol_constructor_definition_)
	(b4_symbol_constructor_definitions): New.
	Use them where appropriate to generate declaration, declaration of
	the specializations, and implementations of the templated
	overloaded function "make_symbol".
	(variant::variant): Always define a default ctor.
	Also provide a copy ctor.
	(symbol_base_type, symbol_type): New ctor overloads for value-less
	symbols.
	(symbol_type): Now public, so that functions such as yylex can use
	it.

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Inform m4 whether a tag is a valid id.
	* src/output.c (is_identifier): New.
	(symbol_definitions_output): Use it to define tag_is_id.
	But maybe this should be done at m4 level?

2008-11-11  Akim Demaille  <demaille@gostai.com>

	Test 214 was failing: it greps with a pattern containing [     ]*
	which obviously meant to catch spaces and tabs, but contained only
	spaces. Tabulations in sources are a nuisance, so to simplify the
	matter, get rid of all the tabulations in the Java sources.  The
	other skeletons will be treated equally later.

	* data/java.m4, data/lalr1.java: Untabify.
	* tests/java.at: Simplify AT_CHECK_JAVA_GREP invocations:
	tabulations are no longer generated.

2008-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* bootstrap.conf: Replace m4/warning.m4 with warnings module.
	* configure.ac: Adjust usage.
	* lib/Makefile.am: Replace $(WARNING_CFLAGS) with $(WARN_CFLAGS).
	* src/Makefile.am: Replace $(WARNING_CFLAGS) with $(WARN_CFLAGS).
	* tests/atlocal.in: Replace $(WARNING_*FLAGS) with $(WARN_*FLAGS).

2008-11-10  Di-an Jan  <dianj@freeshell.org>

	Workaround Java's ``code too large'' problem for parser tables
	in most cases, by using one function per initialization.
	* data/java.m4 (b4_typed_parser_table, b4_integral_parser_table): New.
	* data/lalr1.java (yypact_, yydefact_, yypgoto_, yydefgoto_,
	yytable_, yycheck_, yystos_, yytoken_number_, yyr1_, yyr2_, yyrhs_
	yyprhs_, yyrline_, yytranslate_table_): Use b4_integral_parser_table.
	(yytname_): Use b4_typed_parser_table.
	* doc/bison.texinfo (Java Bison Interface): Add note on Java's
	``code too large'' error.

2008-11-10  Di-an Jan  <dianj@freeshell.org>

	* NEWS: Document them.

	General Java skeleton improvements.
	* configure.ac (gt_JAVACOMP): Request target of 1.4, which allows
	using gcj < 4.3 in the testsuite, according to comments in
	gnulib/m4/javacomp.m4.
	* data/java.m4 (stype, parser_class_name, lex_throws, throws,
	location_type, position_type): Remove extraneous brackets from
	b4_percent_define_default.
	(b4_lex_param, b4_parse_param): Remove extraneous brackets from
	m4_define and m4_define_default.
	* data/lalr1.java (b4_pre_prologue): Change to b4_user_post_prologue,
	which marks the end of user code with appropriate syncline, like all
	the other skeletons.
	(b4_user_post_prologue): Add.  Don't silently drop.
	(yylex): Remove.
	(parse): Inline yylex.
	* doc/bison.texinfo (bisonVersion, bisonSkeleton): Document.
	(%{...%}): Fix typo of %code imports.
	* tests/java.at (AT_JAVA_COMPILE): Add "java" keyword.

	Support annotations on parser class with %define annotations.
	* data/lalr1.java (annotations): Add to parser class modifier.
	* doc/bison.texinfo (Java Parser Interface): Document
	%define annotations.
	(Java Declarations Summary): Document %define annotations.
	* tests/java.at (Java parser class modifiers): Test annotations.

	Do not generate code for %error-verbose unless requested.
	* data/lalr1.java (errorVerbose): Rename to yyErrorVerbose.
	Make private.  Make conditional on %error-verbose.
	(getErrorVerbose, setErrorVerbose): New.
	(yytnamerr_): Make conditional on %error-verbose.
	(yysyntax_error): Make some code conditional on %error-verbose.
	* doc/bison.texinfo (Java Bison Interface): Remove the parts
	about %error-verbose having no effect.
	(getErrorVerbose, setErrorVerbose): Document.

	Move constants for token names to Lexer interface.
	* data/lalr1.java (Lexer): Move EOF, b4_token_enums(b4_tokens) here.
	* data/java.m4 (b4_token_enum): Indent for move to Lexer interface.
	(parse): Qualify EOF to Lexer.EOF.
	* doc/bison.texinfo (Java Parser Interface): Move documentation of
	EOF and token names to Java Lexer Interface.
	* tests/java.at (_AT_DATA_JAVA_CALC_Y): Remove Calc qualifier.

	Make yyerror public.
	* data/lalr1.java (Lexer.yyerror): Use longer parameter name.
	(yyerror): Change to public.  Add Javadoc comments.  Use longer
	parameter names.  Make the body rather than the declarator
	conditional on %locations.
	* doc/bison.texinfo (yyerror): Document.  Don't mark as protected.

	Allow user to add code to the constructor with %code init.
	* data/java.m4 (b4_init_throws): New, for %define init_throws.
	* data/lalr1.java (YYParser.YYParser): Add b4_init_throws.
	Add %code init to the front of the constructor body.
	* doc/bison.texinfo (YYParser.YYParser): Document %code init
	and %define init_throws.
	(Java Declarations Summary): Document %code init and
	%define init_throws.
	* tests/java.at (Java %parse-param and %lex-param): Adjust grep.
	(Java constructor init and init_throws): Add tests.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Update TODO.
	* TODO (-D): is implemented.
	(associativity): Same precedence must have the same associativity.
	For instance, how can a * b / c be parsed if * is %left and / is
	%right?
	(YYERRORCODE, YYFAIL, YYBACKUP): New.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Formatting changes.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	More information about the symbols.
	* src/output.c (type_names_output): Document all the symbols,
	including those that don't have a type-name.
	(symbol_definitions_output): Define "is_token" and
	"has_type_name".
	* data/lalr1.cc (b4_type_action_): Skip symbols that have an empty
	type-name, now that they are defined too in b4_type_names.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Regen.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Make parser::yytranslate static.
	Small speedup (1%) on the list grammar.  And makes yytranslate_
	available in non member functions.

	* data/lalr1.cc (yytranslate_): Does not need to be a instance
	function.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Avoid trailing spaces.
	* data/c.m4: b4_comment(TEXT): Don't indent empty lines.
	* data/lalr1.cc: Don't indent before rule and symbol actions, as
	they can be empty, and anyway this incorrectly indents the first
	action.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Comment changes.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Use "enum" for integral constants.
	This is just nicer to read, I observed no speedup.

	* data/lalr1.cc (yyeof_, yylast_, yynnts_, yyempty_, yyfinal_)
	(yterror_, yyerrcode_, yyntokens_): Define as members of an enum.
	(yyuser_token_number_max_, yyundef_token_): Move into...
	(yytranslate_): here.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Shortcuts in bench directives.
	* etc/bench.pl.in (parse_dirs): New.
	Use it.
	(bench_variant_parser, bench_fusion_parser): Use %s and %d.
	Create the benches in "benches/".

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* data/lalr1.cc: here.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Adjust verbose message to using emacs.
	* etc/bench.pl.in: Inform compilation-mode when we change the
	directory.
	(generate_grammar_list): Recognize %define "variant" in addition
	to %define variant.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Classify symbols by type-name.
	* src/uniqstr.h (UNIQSTR_CMP): New.
	* src/output.c (symbol_type_name_cmp, symbols_by_type_name)
	(type_names_output): New.
	(muscles_output): Use it.
	* data/lalr1.cc (b4_symbol_action_): Remove.
	(b4_symbol_case_, b4_type_action_): New.
	Adjust uses of b4_symbol_action_ to use b4_type_action_.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Change the handling of the symbols in the skeletons.
	Before we were using tables which lines were the symbols and which
	columns were things like number, tag, type-name etc.  It is was
	difficult to extend: each time a column was added, all the numbers had
	to be updated (you asked for colon $2, not for "tag").  Also, it was
	hard to filter these tables when only a subset of the symbols (say the
	tokens, or the nterms, or the tokens that have and external number
	*and* a type-name) was of interest.

	Now instead of monolithic tables, we define one macro per cell.  For
	instance "b4_symbol(0, tag)" is a macro name which contents is
	self-descriptive.  The macro "b4_symbol" provides easier access to
	these cells.

	* src/output.c (type_names_output): Remove.
	(symbol_numbers_output, symbol_definitions_output): New.
	(muscles_output): Call them.
	(prepare_symbols): Define b4_symbols_number.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	--trace=muscles
	* src/getargs.h, src/getargs.c (trace_muscle): New.
	(trace_types, trace_args): Support it.
	* src/output.c (output_skeleton): Use it.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	muscles_output.
	* src/output.c (muscles_output): New, extracted from...
	(output_skeleton): here.
	Adjust.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Formatting changes.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Update the variant example.
	* examples/variant.yy: Formatting changes.
	One stage build.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Support constructor with an argument.
	This improves the "list" bench by 2%.

	* data/lalr1.cc (variant::build): Add an overloaded version with
	an argument.
	* tests/c++.at (AT_CHECK_VARIANT): Check it.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Test variants.
	* tests/c++.at (AT_CHECK_VARIANTS): New.
	Use it with and without %define assert.

2008-11-10  Akim Demaille  <demaille@gostai.com>

	Add %precedence support.
	Unfortunately it is not possible to reuse the %prec directive.  This
	is because to please POSIX, we do not require to end the rules with a
	semicolon.  As a result,

	foo: bar %prec baz

	is ambiguous: either a rule which precedence is that of baz, or a rule,
	and then a declaration of the precedence of the token baz.

	* doc/bison.texinfo: Document %precedence.
	(Precedence Only): New.
	* src/assoc.h, src/assoc.c (precedence_assoc): New.
	* src/conflicts.c (resolve_sr_conflict): Support it.
	* src/scan-gram.l, src/parse-gram.y (%precedence): New token.
	Parse it.
	* tests/calc.at: Use %precedence for NEG.
	* tests/conflicts.at (%precedence does not suffice)
	(%precedence suffices): New tests.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Make benches in a sub dirs.
	* etc/bench.pl.in ($dir): New.
	Use it.
	Check the use of constructors with an argument.
	(bench_variant_parser): Fix.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	fix eof condition

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Fix --help.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Require the generation of parse-gram.output.
	* src/Makefile.am (YACC): Pass --report=all.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Formatting changes.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Update TODO.
	* TODO: Remove obsolete items.
	Update others.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Enhance bench.pl.
	* etc/bench.pl.in (parse, parse_expr, parse_term, parse_fact)
	(@token, $grammar, $bench): New.
	(generate_grammar_variant): Rename as...
	(generate_grammar_list): this.
	(generate_grammar): Adjust.
	(bench_grammar): Rename as...
	(bench): this.
	Use it in the various bench-marking routines.
	(-b, -g): New options.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Use a static hierarchy for symbols in the C++ parser.
	* data/lalr1.cc (symbol_base_type, symbol_type)
	(stack_symbol_type): Make it a static hierarchy.
	Adjust dependencies.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	bench.pl -d, --directive.
	* etc/bench.pl.in (@directive): New.
	(&bench_grammar): Use it.
	(&bench_list_grammar): New, to provide access to the "variant"
	grammar.
	Use it.
	(getopts): Support -d, --directive.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Use inline for small operations.
	* data/lalr1.cc (symbol_base_type, symbol_type)
	(stack_symbol_type): Declare constructor and other operations as
	inline.
	(yy_destroy_): Inline.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Introduce a hierarchy for symbols.
	* data/lalr1.cc (symbol_base_type, symbol_type): New.
	(data_type): Rename as...
	(stack_symbol_type): this.
	Derive from symbol_base_type.
	(yy_symbol_value_print_): Merge into...
	(yy_symbol_print_): this.
	Rename as...
	(yy_print_): this.
	(yydestruct_): Rename as...
	(yy_destroy_): this.
	(b4_symbols_actions, YY_SYMBOL_PRINT): Adjust.
	(parser::parse): yyla is now of symbol_type.
	Use its type member instead of yytoken.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Rename data_type and stack_symbol_type.
	* data/lalr1.cc (data_type): Rename as...
	(stack_symbol_type): this.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Handle semantic value and location together.
	* data/lalr1.cc (b4_symbol_actions): Bounce $$ and @$ to
	yydata.value and yydata.location.
	(yy_symbol_value_print_, yy_symbol_print_, yydestruct_)
	(YY_SYMBOL_PRINT): Now take semantic value and location as a
	single arg.
	Adjust all callers.
	(yydestruct_): New overload for a stack symbol.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Push a complete symbol, not connected parts.
	* data/lalr1.cc (yypush_): Take a data_type&, not disconnected
	state, value and location.
	Adjust callers.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Aggregate yylval and yylloc.
	* data/lalr1.cc (parser::yylval, parser::yylloc): Replace by...
	(parser::yyla): this.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Rely on the state stack to display reduction traces.
	To display rhs symbols before a reduction, we used information
	about the rule reduced, which required the tables yyrhs and
	yyprhs.  Now use rely only on the state stack to get the same
	information.

	* data/lalr1.cc (b4_rhs_data, b4_rhs_state): New.
	Use them.
	(parser::yyrhs_, parser::yyprhs_): Remove.
	(parser::yy_reduce_print_): Use the state stack.

2008-11-09  Akim Demaille  <demaille@gostai.com>

	Fuse yyval and yyloc into yylhs.
	* data/lalr1.cc (b4_lhs_value, b4_lhs_location): Adjust to using
	yylhs.
	(parse): Replace yyval and yyloc with yylhs.value and
	yylhs.location.
	After a user action, compute yylhs.state earlier.
	(yyerrlab1): Do not play tricks with yylhs.location, rather, use a
	fresh error_token.

2008-11-09  Di-an Jan  <dianj@freeshell.org>

	Remove unused variable.
	* src/output.c (type_names_output): Remove unused variable sep.

2008-11-09  Paolo Bonzini  <bonzini@gnu.org>

	Change tests/output.at quoting.
	* tests/output.at (AT_CHECK_OUTPUT): Use conventional m4 quoting when
	expanding arguments.

2008-11-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't add a semicolon to actions for %skeleton or %language.
	It breaks Java test cases as reported by Akim Demaille.
	* src/scan-code.l: Implement.

2008-11-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up %skeleton and %language priority implementation.
	* src/getargs.c (skeleton_prio): Use default_prio rather than 2, and
	remove static qualifier because others will soon need to see it.
	(language_prio): Likewise.
	(getargs): Use command_line_prio rather than 0.
	* src/getargs.h (command_line_prio, grammar_prio, default_prio): New
	enum fields.
	(skeleton_prio): Extern it.
	(language_prio): Extern it.
	* src/parse-gram.y: Use grammar_prio rather than 1.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Moving push traces into yypush_.
	* data/lalr1.cc (yypush_): Now takes a optional trace message.
	Adjust all uses.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	The single-stack C++ parser is now the standard one.
	* data/lalr1.cc: Rename as...
	* data/lalr1-split.cc: this.
	* data/lalr1-fusion.cc: Rename as...
	* data/lalr1.cc: this.
	* etc/bench.pl.in: Adjust.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Avoid empty-if warnings.
	Reported by Quentin Hocquet.

	* data/lalr1-fusion.cc (YY_SYMBOL_PRINT, YY_REDUCE_PRINT)
	(YY_STACK_PRINT): Provide some contents even when !YYDEBUG.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Pass command line location to skeleton_arg and language_argmatch.
	* src/getargs.h, src/getargs.c (skeleton_arg, language_argmatch):
	The location argument is now mandatory.
	Adjust all dependencies.
	(getargs): Use command_line_location.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	-D, --define.
	* src/getargs.c (usage): Document -D.
	Fix help string for --locations.
	(command_line_location): New.
	(short_options, long_options, getargs): Support -D, --define.
	(getargs): Move -d support at the right place.
	* doc/bison.texinfo (Bison Options): Update.
	* tests/input.at (%define, --define): New.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Initialize the muscle table before parsing the command line.
	* src/getargs.c (quotearg.h, muscle_tab.h): Include.
	(getargs): Define file_name.
	* src/main.c (main): Initialize muscle_tab before calling
	getargs.
	* src/muscle_tab.c (muscle_init): No longer define file_name, as
	its value is not available yet.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Locations without columns for command line arguments.
	* src/location.c (location_print): Don't display negative columns.
	* src/location.h: Document this.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Fix --help.
	* src/getargs.c (usage): Fix help string for -W.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Handle more general types of option arguments.
	* build-aux/cross-options.pl: The argument ends at the first
	space, not the first non-symbol character.
	Use @var for each word appearing the argument description.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Destroy the variants that remain on the stack in case of error.
	* data/lalr1-fusion.cc (yydestruct_): Invoke the variant's
	destructor.
	Display the value only if yymsg is nonnull.
	(yyreduce): Invoke yydestruct_ when popping lhs symbols.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Add "%define assert" to variants.
	This is used to help the user catch cases where some value gets
	ovewritten by a new one.  This should not happen, as this will
	probably leak.

	Unfortunately this uncovered a bug in the C++ parser itself: the
	lookahead value was not destroyed between two calls to yylex.  For
	instance if the previous lookahead was a std::string, and then an int,
	then the value of the std::string was correctly taken (i.e., the
	lookahead was now an empty string), but std::string structure itself
	was not reclaimed.

	This is now done in variant::build(other&) (which is used to take the
	value of the lookahead): other is not only stolen from its value, it
	is also destroyed.  This incurs a new performance penalty of a few
	percent, and union becomes faster again.

	* data/lalr1-fusion.cc (variant::build(other&)): Destroy other.
	(b4_variant_if): New.
	(variant::built): New.
	Use it whereever the status of the variant changes.
	* etc/bench.pl.in: Check the penalty of %define assert.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Use "%define variant" in bench.pl.
	* etc/bench.pl.in: No longer use the pseudo directive %variants,
	just use %define variants.

2008-11-07  Akim Demaille  <demaille@gostai.com>

	Regen.
	* src/parse-gram.h, src/parse-gram.c: Regen.

2008-11-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix user actions without a trailing semicolon.
	Reported by Sergei Steshenko at
	<http://lists.gnu.org/archive/html/bug-bison/2008-11/msg00001.html>.
	* THANKS (Sergei Steshenko): Add.
	* src/scan-code.l (SC_RULE_ACTION): Fix it.
	* tests/regression.at (Fix user actions without a trailing semicolon):
	New test case.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Use b4_copyright_years.
	* data/yacc.c (b4_copyright_years): New.
	Fix its value according to the comments in the file.
	Use it and undefine it.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* data/lalr1-fusion.cc, src/parse-gram.y: here.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Formatting changes.
	* data/lalr1-fusion.cc: here.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Use strict on bench.pl.
	* etc/bench.pl.in (&run, &generate_grammar): New.
	Rename the grammar generating functions for consistency.
	Change the interface so that the list of benches to run is passed
	as (optionless) arguments.
	(&compile): Use &run.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Remove spurious initial empty lines.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/lalr1.java,
	* data/yacc.c: End the @output lines with an @.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Improve the display of sizes.
	* etc/bench.p.in: Higher precision.
	Sort by decreasing size.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Don't memcpy C++ structures.
	* data/lalr1-fusion.cc (b4_symbol_variant): Adjust additional
	arguments.
	(variant::build): New overload for
	copy-construction-that-destroys.
	(variant::swap): New.
	(parser::yypush_): Use it in variant mode.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Better defaults for bench.pl.
	* etc/bench.pl.in ($verbose, $cflags, $iterations): Change the
	default values.
	Adjust &verbose uses.
	(-q, --quiet): New.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Make variant.yy more complex.
	std::list cannot be copied via memcpy, they are more demanding than
	std::string.  Use one std::list to strengthen the test.

	* examples/variant.yy: Use lalr1-fusion.cc, not lalr1.cc.
	Adjust.
	Create a list of strings, instead of a single large string.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	bench.pl --bench.
	* etc/bench.pl.in (--bench, $bench): New.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Sort methods.
	* data/lalr1-fusion.cc (destroy): Use as() in its definition.
	Define it after as().

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Useless parens.
	* data/lalr1-fusion.cc (b4_rhs_location): Remove useless parens.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Issue missing synclines after user actions.
	* data/c.m4 (b4_case): Issue synclines on the output file.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Remove trailing empty line.
	* data/lalr1-fusion.cc: Don't add an empty line after the user's
	epilogue.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Fix output of copyright years.
	* data/bison.m4 (b4_copyright): Fix the indentation of the
	copyright year paragraph.
	Use b4_copyright_years when no years are given.
	* data/lalr1.cc, data/lalr1-fusion.cc, data/location.cc
	(b4_copyright_years): New.
	Use it.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Avoid the spurious initial empty line.
	* data/lalr1-fusion.cc, data/location.cc: Put a trailing "@" at
	the end of @output request to suppress the empty line that
	results.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Remove parser::rhs_number_type.
	* data/lalr1-fusion.cc (rhs_number_type): No longer define it.
	(yyrhs_): Use b4_table_define.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Fix iteration type.
	* data/lalr1-fusion.cc: Use an int to iterate up to an int.

2008-11-04  Akim Demaille  <demaille@gostai.com>

	Factor the declaration of the integer tables.
	* data/lalr1-fusion.cc (b4_table_define): New.
	Use it.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Fix indentation of tables in lalr1.cc
	* data/lalr1-fusion.cc: Fix the indentation.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Destroy the lhs symbols after reduction.
	* data/lalr1-fusion.cc (parse): After the user action, when in
	variant mode, destroy the lhs symbols.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Simplify yysyntax_error_ use.
	* data/lalr1-fusion.cc (yysyntax_error_): Always pass it the token
	type, but make it unnamed in the declaration when it is not used.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Let yy::variant::build return an lvalue.
	* data/lalr1-fusion.cc (variant::build): Return a reference to the
	object.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Define yy::variant only when needed.
	* data/lalr1-fusion.cc (yy::variant): Define only if variants are
	used.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Bench the three-stack lalr1.cc.
	* etc/bench.pl.in: Bench the three-stack lalr1.cc vs. the
	one-stack one.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Fail on parse error in calc++.
	* doc/bison.texinfo (calc++.cc): Propagate failures to the exit
	status.
	* examples/calc++/test ($me, $number, $exit, run): New.
	Use them to propagate errors to the exit status.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Don't specify the skeleton twice in the example.
	* examples/calc++/Makefile.am: Don't pass -S to Bison, the grammar
	file does what is needed.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench: Improve output.
	* etc/bench.pl.in (bench_grammar): Tune the printf format.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench: check impact of %debug on variants.
	* etc/bench.pl.in (variant_grammar): Fix the computation of
	$variant.
	Generate a grammar file that can work with or without %debug.
	Do use the @directive.
	(bench_variant_parser): Check impact of %debug.
	(@directives): Rename all the occurrences to...
	(@directive): this, for consistency.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench: report the size too.
	* etc/bench.pl.in ($iterations): Defaults to -3.
	(&bench_grammar): Require hireswallclock.
	Compute and display the size of the result.
	More comments.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench: More use of the verbosity level.
	* etc/bench.pl.in ($verbose, &verbose): New.
	Use them.
	More POD documentation.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench.pl: a command line interface
	* etc/bench.pl.in: More doc.
	Some fixes in the documentation.
	($cflags, $iterations, &help, &getopt): New.
	Use them.
	(&variant_grammar): Let the number of stages be 10 times what is
	specified.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Bench the use of Boost.Variants.
	* etc/bench.pl.in ($cxx, &variant_grammar, &bench_variant_parser):
	New.
	(&compile): Be ready to compile C++ parsers.
	(&bench_push_parser): Move debug information to the outermost
	level.
	* THANKS: Add Michiel De Wilde.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	bench.pl: Pass directives as a list instead of as a string.
	* etc/bench.pl.in (&directives): New.
	(&triangular_grammar, &calc_grammar): Use it to format the Bison
	directives.
	(&triangular_grammar): Do use the directives (were ignored).
	(&bench_grammar, &bench_push_parser): Adjust to pass lists of
	directives.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Improve genericity of bench.pl.
	* etc/bench.pl.in (&bench_grammar): Take the set of benches as
	argument.
	(&bench_push_parser): New.
	Call it.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Add documentation to bench.pl.
	* etc/bench.pl.in: Comment changes.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Fuse the three stacks into a single one.

	In order to make it easy to perform benchmarks to ensure that
	there are no performance loss, lalr1.cc is forked into
	lalr1-fusion.cc.  Eventually, lalr1-fusion.cc will replace
	lalr1.cc.

	Meanwhile, to make sure that lalr1-fusion.cc is correctly
	exercized by the test suite, the user must install a symbolic link
	from lalr1.cc to it.

	Instead of having three stacks (state, value, location), use a
	stack of triples.  This considerably simplifies the code (and it
	will be easier not to require locations as currently does the C++
	parser), and also gives a 10% speedup according to
	etc/bench (probably mainly since memory allocation is done once
	instead of three times).

	Another motivation is to make it easier to destruct properly
	semantic values: now that they are bound to their state (hence
	symbol type) it will be easier to call the appropriate destructor.

	These changes should probably benefit the C parser too.

	* data/lalr1.cc: Copy as...
	* data/lalr1-fusion.cc: this new file.
	(b4_rhs_value, b4_rhs_location): New definitions overriding those
	from c++.m4.
	(state_stack_type, semantic_stack_type, location_stack_type)
	(yystate_stack_, yysemantic_stack_, yylocation_stack_): Remove.
	(data_type, stack_type, yystack_): New.
	(YYLLOC_DEFAULT, yypush_): Adjust.
	(yyerror_range): Now based on data_type, not location_type.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Push the state, value, and location at the same time.
	This is needed to prepare a forthcoming patch that fuses the three
	stacks into one.

	* data/lalr1.cc (parser::yypush_): New.
	(parser::yynewstate): Change the semantics: instead of arriving to
	this label when value and location have been pushed, but yystate
	is to be pushed on the state stack, now the three of them must
	have been pushed before.  yystate still must be the new state.
	This allows to use yypush_ everywhere instead of individual
	handling of the stacks.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Prefer references to pointers.
	* data/lalr1.cc (b4_symbol_actions): New, overrides the default C
	definition to use references instead of pointers.
	(yy_symbol_value_print_, yy_symbol_print_, yydestruct_):
	Take the value and location as references.
	Adjust callers.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	stack::size instead of stack::height.
	* data/lalr1.cc (stack::height): Rename as...
	(stack::size): this.
	Fix the output type.
	Comment changes.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Use variants to support objects as semantic values.
	This patch was inspired by work by Michiel De Wilde.  But he used
	Boost variants which (i) requires Boost on the user side, (ii) is
	slow, and (iii) has useless overhead (the parser knows the type of
	the semantic value there is no reason to duplicate this
	information as Boost.Variants do).

	This implementation reserves a buffer large enough to store the
	largest objects.  yy::variant implements this buffer.  It was
	implemented with Quentin Hocquet.

	* src/output.c (type_names_output): New.
	(output_skeleton): Invoke it.
	* data/c++.m4 (b4_variant_if): New.
	(b4_symbol_value): If needed, provide a definition for variants.
	* data/lalr1.cc (b4_symbol_value, b4_symbol_action_)
	(b4_symbol_variant, _b4_char_sizeof_counter, _b4_char_sizeof_dummy)
	(b4_char_sizeof, yy::variant): New.
	(parser::parse): If variants are requested, define
	parser::union_type, parser::variant, change the definition of
	semantic_type, construct $$ before running the user action instead
	of performing a default $$ = $1.
	* examples/variant.yy: New.
	Based on an example by Michiel De Wilde.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Parameterize the extraction of semantic values.
	To make future changes easier, no longer rely on ".TYPE" being the
	way to get a semantic value.

	* data/c.m4 (b4_symbol_value): New.
	Use it.
	* data/c++.m4, data/yacc.c: Use it.
	* data/glr.c: Use b4_symbol_value.
	(b4_rhs_data): New.
	Use it.

2008-11-03  Akim Demaille  <demaille@gostai.com>

	Prepare easier M4 changes.
	* data/lalr1.cc: Use escaped [] instead of literals to prepare
	future changes.

2008-11-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Initiate further development.
	* NEWS: Create an empty section for new entries.
	* gnulib: Update submodule to HEAD.

2008-11-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS: Version 2.4.

2008-11-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Prepare for next release.
	* NEWS: Briefly mention changes since 2.3b.
	* README: Say GNU m4 1.4.6, which we've been requiring in release
	announcements already, not 1.4.3, which breaks the build.

2008-11-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Say %language is experimental.
	We're thinking of extending it's effect on output file naming.  See the
	thread at
	<http://lists.gnu.org/archive/html/bison-patches/2008-10/msg00003.html>.
	* NEWS: Say it's experimental.
	* doc/bison.texinfo (Decl Summary): Say it's experimental, and so don't
	recommend it over %skeleton for now.
	(Bison Options): Likewise.
	(C++ Bison Interface): Use %skeleton not %language.
	(Calc++ Parser): Use %skeleton not %language.
	* src/getargs.c (usage): Say it's experimental.

2008-11-01  Di-an Jan  <dianj@freeshell.org>
	    Paolo Bonzini  <bonzini@gnu.org>

	Support all Java parser class modifiers.
	* data/java.m4 (b4_percent_define_get3): New.
	(b4_final_if, b4_strictfp_if): New.
	* data/lalr1.java (final, strictfp, extends, implements): Support.
	* doc/bison.texinfo (final, strictfp, extends, implements): Add
	documentation.
	* tests/java.at (AT_CHECK_JAVA_MINIMAL): New.
	(AT_CHECK_JAVA_MINIMAL_W_LEXER): New.
	(AT_CHECK_JAVA_GREP): New.
	(Java parser class modifiers): New test.
	(Java parser class extends and implements): New test.

	Model exception propagation better with throws and lex_throws.
	* data/java.m4 (b4_list2): New.
	(throws): Change default.
	* data/lalr1.java (yyaction): Add throws.
	(parse): Add lex_throws in addition to throws.
	* doc/bison.texinfo (throws, lex_throws): Add documentation.
	* tests/java.at (Java throws specifications): New test.

	Improve documentation for Java parsers.
	* doc/bison.texinfo (Java Parsers): Add subsections.
	Don't quote first argument of %define.
	(Java Bison Interface): Document output files.  Move documentation
	of parser class and merge into Java Parser Interface.  Document
	features that error out.  Document directives with no effect.
	Move note about Javadoc higher.
	(Java Semantic Values): Explicitly mention stype.
	Document that generic types cannot be used.
	(Java Location Values): Use @deftypeivar.  Document constructors.
	Correct return value for toString.
	(Java Parser Interface): List undocumented constants/fields.
	Move documentation of fields added by %parse-param closer to list
	of members.  Document that token names are added as fields.
	Document constructors accurately.  Remove error method.
	(Java Scanner Interface): Move note on %pure-parser to Java Bison
	Interface.  Describe %code lexer and yylex accurately.
	Remove documentation that does not match the code.
	(Java Action Features): New.
	(Java Differences): Add reference.  Add item on semantic values.
	Add note about @{ ... @}.  Clarify %% epilogue placement.
	(Java Declarations Summary): New.

	Fix Java skeleton.
	* data/java.m4 (b4_prefix): Correct quoting for m4_define_default.
	(b4_remove_comma): Quote test argument.
	(b4_identification): Remove "bison" field.
	* tests/java.at (Java parser class and package names): New test.
	(Java %parse-param and %lex-param): New test.
	(Java stype, position_class and location_class): New test.

2008-10-31  Di-an Jan  <dianj@freeshell.org>

	* data/lalr1.jave: Update copyright years.
	(YYParser): Correct name of "generated from" file in Javadoc:
	use b4_file_name instead of @ofile@.
	(Location constructor): Correct Javadoc parameter name.
	(yylloc): Add missing opening m4 quote after b4_location_if.
	This removes a stray [ in the Javadoc of Lexer.getStartPos.
	(Lexer.yyerror): Fix incorrect m4 and Javadoc.
	(YYParser constructor): Correct Javadoc parameter name.

2008-10-30  Joel E. Denny  <jdenny@ces.clemson.edu>

	Always put auxiliary code files in the same dir as other output files.
	* src/files.c (compute_file_name_parts): When the user specifies
	--output but not --file-prefix, extract the directory prefix from the
	file prefix not from the grammar file name.  This affects the location
	of files like location.hh generated by the C++ skeleton.  The includes
	in the other output files require this fix.
	* tests/output.at (AT_CHECK_OUTPUT): Automatically create directories
	for expected output files.
	(Output files): Add a test for the above.

2008-10-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	* gnulib: Update submodule to HEAD.

2008-10-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update copyright year.
	* src/files.c: Here.

2008-10-28  Di-an Jan  <dianj@freeshell.org>  (tiny change)

	Don't overwrite the input file.
	* src/files.c (output_file_name_check): Fatal error if using input file
	for output.
	* tests/output.at: (AT_CHECK_CONFLICTING_OUTPUT): Add return status
	argument.
	(Conflicting output files): Add test.

2008-10-28  Akim Demaille  <demaille@gostai.com>

	Space changes.
	* data/lalr1.cc: Formatting changes.

2008-10-28  Akim Demaille  <demaille@gostai.com>

	Don't define debugging functions when !YYDEBUG.
	* data/lalr1.cc (debug_stream, set_debug_stream)
	(debug_level_type, debug_level, set_debug_level): Don't
	declare them when YYDEBUG is not defined.
	The implementation are already YYDEBUG-aware.

2008-10-28  Akim Demaille  <demaille@gostai.com>

	Prefer "continue" for empty loop bodies.
	* etc/bench.pl.in: Use "continue" instead of {}.

2008-10-28  Akim Demaille  <demaille@gostai.com>

	Space and comments changes.
	* data/c++.m4, data/glr.c, data/lalr1.cc: Copyright year changes.
	* data/c.m4, data/lalr1.cc: Space changes.

2008-10-28  Akim Demaille  <demaille@gostai.com>

	Make gnulib a submodule.
	* gnulib: New.
	* .gitmodules (gnulib): New.

2008-10-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix yyerror_range for user-defined location type in C++.  Reported by
	Georg Sauthoff at
	<http://lists.gnu.org/archive/html/bug-bison/2008-08/msg00008.html>.
	* data/lalr1.cc (parse): Change type of yyerror_range to location_type.
	* THANKS (Georg Sauthoff): Add.

2008-10-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update several administrative files mainly to facilitate releasing.
	* HACKING (Administrivia): Make the git-merge-changelog notes more
	helpful.
	(Test suite): Don't say lalr1.cc is not exercised in the test suite.
	(Release Procedure): Update for git and add numerous details that were
	previously missing.
	* Makefile.am (EXTRA_DIST): Remove Makefile.cfg and Makefile.maint.
	* maint.mk (announcement): Don't list bison as a bootstrap tool so
	that announcements don't claim we bootstrapped with whatever bison
	happened to be in PATH.  Add flex as a bootstrap tool.
	* Makefile.maint: Remove, previously replaced by maint.mk.
	* Makefile.cfg: Remove, and migrate settings to...
	* cfg.mk: ... here for the sake of `make announcement'.
	* bootstrap.conf (gnulib_modules): Add announce-gen.
	* README: Say GNU Bison instead of just Bison.  Suggested by Karl
	Berry.

2008-10-08  Di-an Jan  <dianj@freeshell.org>  (tiny change)

	Small but important bugfixes for the Java skeleton.
	* data/lalr1.java (yyerror): Change Location to b4_location_type.
	(yy_symbol_print): Call toString on yyvaluep.

2008-08-29  Akim Demaille  <demaille@gostai.com>

	Clarify UPDATED use.
	* doc/bison.texinfo: It refers to the last edition of this file,
	not to the release date of Bison.
	Reported by Joel E. Denny.

2008-08-29  Akim Demaille  <demaille@gostai.com>

	* README: Update FAQ pointer.
	Reported by Joel E. Denny.

2008-08-27  Eric Blake  <ebb9@byu.net>

	Resync m4sugar from autoconf.
	* data/m4sugar/m4sugar.m4 (m4_defn, m4_popdef, m4_undefine)
	(m4_init): Adjust to latest m4.git changes.
	(m4_mapall_sep, _m4_list_cmp, m4_version_compare): Reduce side
	effects.
	* data/m4sugar/foreach.m4 (_m4_shiftn): Fix off-by-one bug.
	(_m4_list_cmp): Reduce side effects.

2008-08-27  Akim Demaille  <demaille@gostai.com>

	Check yyerrok in calc.at.
	* tests/calc.at (calc.y): Use yyerrok on "( error )".
	(AT_CHECK_CALC): Add a check that ensures that yyerrok works as
	expected.

2008-08-27  Akim Demaille  <demaille@gostai.com>

	Support yyerrok in lalr1.cc.
	YYBACKUP is still to import back into lalr1.cc.
	* data/lalr1.cc (yyerrork, yyclearin, YYRECOVERING): Define.

2008-08-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	For maintainer-check*, don't recompile for a $(VERSION) update.
	* cfg.mk: New file.
	(_is-dist-target): Override the one in GNUmakefile.
	* Makefile.am (EXTRA_DIST): Add cfg.mk.

2008-08-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update for recent change to gnulib.
	* src/parse-gram.y: Don't include strverscmp.h.  It comes from
	string.h now.

2008-08-15  Eric Blake  <ebb9@byu.net>

	Remaining m4sugar merge from autoconf.
	* data/m4sugar/m4sugar.m4: Copy entire file from autoconf.
	* data/m4sugar/foreach.m4: New file, copied from autoconf.
	* data/Makefile.am (dist_m4sugar_DATA): Distribute it.
	* src/output.c (output_skeleton): Tell m4 how to find it.

	Partial m4sugar merge from autoconf: m4_map.
	* data/m4sugar/m4sugar.m4 (m4_fst): Delete.
	(m4_map, m4_map_sep, _m4_map): Rewrite more efficiently.
	(m4_apply, _m4_apply, m4_mapall, m4_mapall_sep): New macros.
	* data/java.m4 (b4_token_enums): Use more efficient short-circuit
	for empty list.
	* data/c.m4 (b4_token_defines, b4_token_enums, b4_c_ansi_formals):
	Likewise.
	(b4_parse_param_for): Avoid m4_fst, now that autoconf no longer
	declares it.

2008-08-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Keep .version and PACKAGE_VERSION in sync.
	* Makefile.am ($(top_srcdir)/.version): Declare configure as a
	dependency, and add comments justifying this in more detail.  Discussed
	starting at
	<http://lists.gnu.org/archive/html/bison-patches/2008-07/msg00022.html>.

2008-08-06  Eric Blake  <ebb9@byu.net>

	Partial m4sugar merge from autoconf: m4_shiftn.
	* data/m4sugar/m4sugar.m4 (m4_shiftn): Faster implementation.
	(m4_shift2, m4_shift3): New macros.
	(m4_case, m4_bmatch, m4_bpatsubsts, m4_join): Adjust clients.
	* data/c.m4 (b4_c_function_def, b4_c_ansi_function_def)
	(b4_c_ansi_function_decl, b4_c_function_call): Likewise.
	* data/java.m4 (b4_remove_comma): Likewise.

	Partial m4sugar merge from autoconf: m4_wrap vs. m4 1.6.
	* data/m4sugar/m4sugar.m4 (m4_unquote, m4_wrap_lifo): New macros.
	(m4_wrap): Guarantee FIFO order, in spite of m4 1.6.
	(m4_init): Consolidate wrapped text into single m4_wrap.
	* data/bison.m4 (b4_check_user_names_wrap): Stick with LIFO order
	in wrapped text.

2008-08-05  Eric Blake  <ebb9@byu.net>

	Partial m4sugar merge from autoconf: builtins, version.m4.
	* data/m4sugar/m4sugar.m4 (changeword): Nuke.
	(m4_prepend): Remove, as it is unused and inherently quadratic,
	whereas m4_append is linear in newer m4.
	(m4_mkstemp): New builtin.
	(m4_symbols): Make rename conditional.
	(m4_version_prereq): Ensure fatal error if used in bison, which
	intentionally lacks version.m4.

	Fix comments in m4sugar.
	* data/m4sugar/m4sugar.m4: Comment changes, borrowed from autoconf.

2008-08-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update for recent .gitignore fix in Gnulib.
	* bootstrap: Back out 2008-07-18 hack now that gnulib-tool creates
	anchored .gitignore entries.

2008-08-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Set gnu or gnits strictness.
	* configure.ac (AM_INIT_AUTOMAKE): Set gnu strictness during
	development and gnits strictness for releases.  Based on Eric Blake's
	suggestion at
	<http://lists.gnu.org/archive/html/bug-bison/2008-07/msg00019.html>.

2008-07-31  Paolo Bonzini  <bonzini@gnu.org>

	* NEWS: Clarify documentation of %language.

2008-07-31  Paolo Bonzini  <bonzini@gnu.org>

	Support usage of git-merge-changelog.
	* .gitattributes: New.
	* HACKING: Document usage of git-merge-changelog.
	* bootstrap: Install git-merge-changelog entries in .git/config
	if appropriate.

2008-07-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	Remove remaining dependence on CVS Id keyword.
	* ChangeLog: For the sake of people still using CVS, don't use dollars
	when mentioning Id.
	* data/xslt/bison.xsl: Remove Id from header comments, where it was
	unusual anyway.
	* data/xslt/xml2dot.xsl: Likewise.
	* data/xslt/xml2text.xsl: Likewise.
	* data/xslt/xml2xhtml.xsl: Likewise.
	* doc/Doxyfile.in (PROJECT_NUMBER): Don't use ID.
	* doc/Makefile.am (neutralize): Remove, no longer needed.
	(.x.1): Don't use neutralize.
	(edit): Don't substitute for ID.
	(Doxyfile): Don't define Id, and thus don't depend on ChangeLog.

2008-07-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix dependence on computed configure variables.
	* doc/Makefile.am (common_dep): Depend on $(top_srcdir)/configure not
	$(top_srcdir)/configure.ac so that changes to computed variables, such
	as PACKAGE_VERSION, are seen.
	* tests/Makefile.am ($(srcdir)/package.m4): Likewise.

2008-07-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update copyright dates for recent changes.
	* Makefile.am: Here.
	* src/Makefile.am: Here.
	* src/reduce.c: Here.
	* tests/reduce.at: Here.

2008-07-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Use git-version-gen for version names between releases.
	* .cvsignore (.tarball-version, GNUmakefile, *~): Add.
	* .gitignore (/.tarball-version, /GNUmakefile, /*~): Add.
	* .prev-version: New.
	* .version.in: Remove.
	* ChangeLog: Remove the Id previously used for capturing the CVS
	revision.
	* GNUmakefile: Remove, now copied from Gnulib.
	* Makefile.am: Add code suggested by comments in
	build-aux/git-version-gen.
	(EXTRA_DIST): Remove GNUmakefile, handled by Gnulib.  Add maint.mk,
	.prev-version, and .version.
	* NEWS (2.3b+): Rename to...
	(?.?): ... this because we're dropping the "+" version naming scheme,
	but, in general, we still can't be sure of our next release name.
	* bootstrap: Add a quick hack to remove from .gitignore the
	GNUmakefile entry that gnulib adds.  We already have a /GNUmakefile
	entry.  This should really be fixed in gnulib instead.
	* bootstrap.conf (gnulib_modules): Add gnumakefile.
	* configure.ac (AC_INIT): Set version name by invoking
	build-aux/git-version-gen.
	(AC_CONFIG_FILES): Remove .version, now generated by
	build-aux/git-version-gen.
	* maint.mk: New, copied from coreutils.
	* doc/.cvsignore (bison.1): Add.
	* doc/.gitignore (/bison.1): Add.
	* doc/bison.1: Remove, generated.
	* src/.cvsignore (revision.c): Remove.
	* src/.gitignore (/revision.c): Remove.
	* src/Makefile.am (bison_SOURCES): Remove revision.c and revision.h.
	(BUILT_SOURCES): Remove revision.c.
	(revision.c): Remove.
	* src/getargs.c (version): Don't print revision after the VERSION.
	* src/revision.h: Remove.

2008-07-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix untranslatable composition of sentences.  Reported by Goran
	Uddeborg at
	<http://lists.gnu.org/archive/html/bug-bison/2008-06/msg00000.html>.
	* THANKS (Goran Uddeborg): Add.
	* src/reduce.c (reduce_print): Report the number of nonterminals and
	rules useless in the grammar in separate sentences.
	* tests/reduce.at (Useless Rules): Update output.
	(Reduced Automaton): Likewise.
	(Underivable Rules): Likewise.
	(Empty Language): Likewise.

2008-07-15  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix some .gitignore and .cvsignore problems.
	* bootstrap (insert_sorted_if_absent): Replace all uses with...
	(insert_vc_ignore): ... this new function, which prepends `/' to all
	.gitignore entries before passing them to insert_sorted_if_absent.
	* bootstrap.conf (vc_ignore): Set to '.cvsignore .gitignore' so that
	.cvsignore files are maintained even though Bison developers run
	bootstrap while using Git.
	* .cvsignore (*.patch *.log log patches applied): Remove, apparently
	unneeded by Bison.
	(gnulib): Add.
	* .gitignore (/*.patch *.log log patches applied): Remove, broken and
	unneeded.  Reported by Eric Blake.
	* lib/.gitignore (/*~): Add.
	* po/.cvsignore, runtime-po/.cvsignore: Sync with .gitignore.
	* examples/calc++/.gitignore (/calc++.exe): Add.  Reported by Eric
	Blake.
	* src/.gitignore (/bison.exe): Add.  Reported by Eric Blake.

2008-07-15  Joel E. Denny  <jdenny@ces.clemson.edu>

	Improve forward-compatibility with GNU M4.  Reported by Eric Blake at
	<http://lists.gnu.org/archive/html/bug-bison/2008-07/msg00000.html>.
	* bootstrap.conf (gnulib_modules): Add unsetenv.
	* lib/.gitignore, lib/.cvsignore (/unsetenv.c): Add.
	* m4/.gitignore, m4/.cvsignore (/environ.m4): Add.
	(/setenv.m4): Add.
	* src/output.c (output_skeleton): For the m4 invocation, pass -dV as
	the first argument because it may become position-dependent, and unset
	POSIXLY_CORRECT so Bison's skeletons have access to GNU M4 extensions.
	Add comments explaining these issues in more detail.

2008-07-14  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add .gitignore everywhere based on .cvsignore.
	* .gitignore: New.
	* build-aux/.gitignore: New.
	* data/.gitignore: New.
	* doc/.gitignore: New.
	* etc/.gitignore: New.
	* examples/.gitignore: New.
	* examples/calc++/.gitignore: New.
	* lib/.gitignore: New.
	* m4/.gitignore: New.
	* po/.gitignore: New.
	* runtime-po/.gitignore: New.
	* src/.gitignore: New.
	* tests/.gitignore: New.

2008-05-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3b+): New section, empty for now.
	* configure.ac (AC_INIT): 2.3b -> 2.3b+.

2008-05-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3b): Update release date since there has been a delay in
	getting the announcements and tarballs out.

2008-05-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS: Version 2.3b.
	* configure.ac (AC_INIT): Likewise.
	(PACKAGE_COPYRIGHT_YEAR): Update to 2008.

2008-05-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	* HACKING: Don't say don't mention HACKING in the ChangeLog.  We've
	been doing it for years.
	(Test suite): Mention maintainer-push-check and maintainer-xml-check.
	(Release Procedure): Add FIXME about make alpha being unmaintained.

2008-05-13  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/yacc.c: Reformat m4 a little for readability.
	* src/lalr.c (build_relations): Correct comment.

2008-05-12  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	DJGPP specific issue.
	* djgpp/config.sed: Fixes required to run configure scripts generated
	by autoconf 2.62.

2008-05-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	* HACKING (Release Procedure): translation@iro.umontreal.ca is now
	coordinator@translationproject.org.

2008-05-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* THANKS: Add Eric Blake.

2008-04-23  Eric Blake  <ebb9@byu.net>

	Revert prior patch, by working around autoconf regression.
	* tests/output.at (m4_expand): Add workaround for autoconf 2.62.
	("Output file name: ("): Uncomment test.
	("Output file name: )"): Likewise.
	Based on an idea from Noah Misch.

2008-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Work-around an Autoconf 2.62 AT_SETUP bug that was not present in
	2.61.  Reported by Juan Manuel Guerrero at
	<http://lists.gnu.org/archive/html/bug-bison/2008-04/msg00011.html>.
	* tests/output.at ("Output file name: ("): Comment out test case for
	now.
	("Output file name: )"): Likewise.

2008-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* GNUmakefile: Update git-version-gen invocation so make dist
	succeeds.

2008-04-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update to the current gnulib CVS repository, and fix trigraph handling
	in Bison.
	* bootstrap: Update gnulib CVS repository URL.
	(symlink_to_dir): Encapsulate the code that guarantees the destination
	directory exists into...
	(check_dst_dir): ... this new function, and...
	(cp_mark_as_generated): ... reuse it here so that bootstrap doesn't
	fail when copying files into lib/uniwidth/.
	* src/output.c (prepare_symbols): When writing yytname muscles, where
	symbol names will be encoded in C-string literals, tell quotearg to
	escape trigraphs.  This used to be the default in gnulib.
	* tests/regression.at (Token definitions): Because of the change in
	gnulib's quotearg behavior, string_as_id in parse-gram.y no longer
	escapes trigraphs in symbol names.  Thus, yytname no longer has
	trigraphs unnecessarily doubly escaped.  Update test case output.
	Extend test case to be sure Bison's own error messages will no longer
	have trigraphs in symbol names unnecessarily escaped once.

2008-04-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix make dist infinite loop reported by Juan Manuel Guerrero at
	<http://lists.gnu.org/archive/html/bug-bison/2008-01/msg00009.html>.
	* .cvsignore: Add .version.
	* .version.in: New.
	* bootstrap.conf (gnulib_modules): Add git-version-gen.
	* configure.ac (AC_CONFIG_FILES): Add .version.
	* build-aux/.cvsignore: Add git-version-gen.

2008-03-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3a+): Mention that -g now takes an argument.
	* doc/bison.texinfo (Bison Options): Reword -W entry a little for
	consistency.  Update the -g and -x entries now that they take
	arguments.  Use brackets to indicate optional arguments.
	* src/getargs.c (usage): Explain the relationship between arguments of
	long and short options more completely.  Document --defines and -d
	separately since the former takes an argument but, for POSIX Yacc, the
	latter does not.
	(short_options): Let -W take an optional argument like --warnings.
	(getargs): Sort cases.

2008-02-28  Akim Demaille  <demaille@gostai.com>

	* doc/bison.texinfo: Fix a few typos.

2008-02-28  Akim Demaille  <akim@epita.fr>

	* doc/bison.texinfo (Bison Options): Document -W.
	Based on Joel E. Denny's NEWS entry, and Automake's documentation.

2008-02-28  Akim Demaille  <akim@epita.fr>

	* src/getargs.c (short_options): Split and sort for readability.
	-g and -x take optional arguments, just like their long options.
	* build-aux/cross-options.pl: Use /x to make the regexp easier to
	understand.
	Fix the handling of $opt which resulted in all the argument to be
	considered as optional.

2008-02-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3a+): Don't say %language is experimental.  Mention Java and
	say its interface is experimental.
	* doc/bison.texinfo (Decl Summary): In the %language entry, mention
	Java.
	(Bison Options): In the -L and --language entry, mention Java.
	(Java Bison Interface): Say the interface is experimental.
	* src/getargs.c (usage): Mention -L and --language.

	* NEWS (2.3a+): Say the push parsing interface is experimental.
	* doc/bison.texinfo (Push Decl): Likewise.
	(Decl Summary): Likewise in the "%define api.push_pull" entry.
	(Push Parser Function): Likewise.
	(Pull Parser Function): Likewise.
	(Parser Create Function): Likewise.
	(Parser Delete Function): Likewise.
	(Table of Symbols): Likewise in the yypstate_delete, yypstate_new,
	yypull_parse, and yypush_parse entries.

	* NEWS (2.3a+): Mention XML support, and say the schema is
	experimental.
	* doc/bison.texinfo (Bison Options): Mention -x and --xml.
	* src/getargs.c (usage): Say the XML schema is experimental.

	* NEWS (2.3a+): Say option instead of flag.

2008-02-21  Wojciech Polak  <polak@gnu.org>

	* data/xslt/xml2xhtml.xsl (xsl:template match="/"): Change footer
	text.

2008-02-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix impure push parser compile error reported by Bob Rossi at
	<http://lists.gnu.org/archive/html/help-bison/2008-02/msg00023.html>.
	* data/yacc.c: Clean up whitespace in the output a little.
	(yypstate_allocated): Define for impure push parsers regardless of
	whether the pull interface is also requested.
	* tests/push.at (Push Parsing: Multiple impure instances): Extend to
	check impure push parsers without the pull interface.

	* data/yacc.c (yypstate_new): Don't try to invoke yyerror since
	yyerror takes arguments specified by %parse-param while yypstate_new
	does not.
	* doc/bison.texinfo (Parser Create Function): Document that
	yypstate_new returns 0 for multiple impure parser instances.
	* tests/push.at (Push Parsing: Multiple impure instances): Update
	expected stderr output.

2008-02-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* runtime-po/POTFILES.in (push.c): Remove.

2008-02-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/Makefile.am (dist_pkgdata_DATA): Remove push.c.
	* data/push.c: Rename to...
	* data/yacc.c: ... this, overwriting it.
	* etc/bench.pl.in (bench_grammar): `%pure-parser'-> `%define api.pure'.
	`%push-pull-parser' -> `%define api.push_pull "both"'.
	Remove old yacc.c tests, and update push.c tests to yacc.c.

2008-02-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/bison.m4 (b4_percent_code_get): Output %code block comments like
	`"%code top" blocks' instead of `%code "top" blocks'.
	* data/push.c: Import yacc.c changes from 2008-01-09 and 2007-08-03.
	Clean up whitespace in the output a little.

2008-02-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix documentation problems reported by Tim Josling at
	<http://lists.gnu.org/archive/html/bug-bison/2008-01/msg00013.html>.
	* NEWS (2.3a+): Mention removal of --no-parser, -n, and %no-parser.
	* doc/bison.texinfo (Token Decl): Token numbers are *nonnegative*
	integers.  Explain the effect of literal string aliases on error
	messages.  Copy token 0 documentation from the C++ skeleton
	documentation.

2008-02-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	Accept a token number in a %left, %right, or %nonassoc for POSIX
	conformance.  Reported by Tim Josling at
	<http://lists.gnu.org/archive/html/bug-bison/2008-01/msg00010.html>.
	* NEWS (2.3a+): Mention.
	* doc/bison.texinfo (Precedence Decl): Describe how literal strings
	and code numbers are treated by precedence declarations.
	* src/parse-gram.y (precedence_declaration): Use symbols.prec instead
	of symbols.1.
	(symbols.prec): New, just like symbols.1 but uses symbol.prec instead
	of symbol.
	(symbol.prec): New, just like symbol but allows INT.
	* src/symtab.c (symbol_user_token_number_set): Remove an aver that no
	longer holds.
	* tests/regression.at (Token number in precedence declaration): New
	test case.

2008-02-06  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	DJGPP specific issues.
	* djgpp/config.bat: Add filenames that are not 8.3 clean and that must
	be changed.  Copyright timestamp adjusted.
	* djgpp/config.sed: Add filenames that are not 8.3 clean and that must
	be changed.  Copyright timestamp adjusted.
	* djgpp/config.site: Copyright timestamp adjusted.
	* djgpp/config_h.sed: Copyright timestamp adjusted.
	* djgpp/djunpack.bat: Copyright timestamp adjusted.
	* djgpp/fnchange.lst: Add filenames that are not 8.3 clean to the
	filename translation list.
	* djgpp/subpipe.c (init_subpipe): Check the environment variables
	TMPDIR, TMP and TEMP, in that order, to determinate where the temp
	files shall be created.  Before trying to use the temp dir where the
	environment variable points to check that the dir really exists. If
	not default to the cwd as temp dir.  Copyright timestamp adjusted.
	* djgpp/subpipe.h: Copyright timestamp adjusted.
	* djgpp/testsuite.sed: Copyright timestamp adjusted.

2008-01-30  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo: Update Back-Cover text to reflect new GNU wording.

2008-01-09  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (yyparse): Correct the comment when locations aren't used.
	Problem reported by Claudio Saavedra in
	<http://lists.gnu.org/archive/html/bug-bison/2008-01/msg00003.html>.

2008-01-05  Wojciech Polak  <polak@gnu.org>

	* data/xslt/xml2xhtml.xsl (xsl:template match="/"): Precede an XHTML
	document's title with the input grammar file name.

2007-12-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	Automate regression testing of the XML/XSLT implementation.  Discussed
	starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-11/msg00021.html>.
	* configure.ac (XSLTPROC): New substitution.
	* Makefile.am (maintainer-xml-check): New phony target invoking...
	* tests/Makefile.am (maintainer-xml-check): ... this new phony target
	invoking make maintainer-check with BISON_TEST_XML=1.
	* tests/atlocal.in (XSLTPROC): New.
	* tests/local.at (AT_BISON_CHECK): New macro to (1) instruct Valgrind
	not to report reachable memory when Bison is expected to have a
	non-zero exit status and (2) to compare XML/XSLT output with --graph
	and --report=all output for every working grammar when
	BISON_TEST_XML=1.
	(AT_BISON_CHECK_NO_XML): Likewise, but skip XML checks.
	(AT_BISON_CHECK_XML): New.
	(AT_QUELL_VALGRIND): New.
	* tests/testsuite.at (ORIGINAL_AT_CHECK): Remove this and...
	(AT_CHECK): ... don't redefine this since this was the old way to
	quell Valgrind.
	* tests/actions.at: Rewrite all AT_CHECK invocations for bison as
	AT_BISON_CHECK invocations.
	* tests/c++.at: Likewise.
	* tests/calc.at: Likewise.
	* tests/conflicts.at: Likewise.
	* tests/cxx-type.at: Likewise.
	* tests/existing.at: Likewise.
	* tests/glr-regression.at: Likewise.
	* tests/headers.at: Likewise.
	* tests/input.at: Likewise.
	* tests/java.at: Likewise.
	* tests/output.at: Likewise.
	* tests/push.at: Likewise.
	* tests/reduce.at: Likewise.
	* tests/regression.at: Likewise.
	* tests/sets.at: Likewise.
	* tests/skeletons.at: Likewise.
	* tests/synclines.at: Likewise.
	* tests/torture.at: Likewise.
	(Big triangle): Use AT_BISON_CHECK_NO_XML instead since this grammar
	tends to hang xsltproc.
	(Big horizontal): Likewise.

2007-12-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	In XML output, remove redundant class attribute on symbol element.
	* data/xslt/bison.xsl (xsl:key name="bison:symbolByName"): New.
	* data/xslt/xml2xhtml.xsl (xsl:template match="symbol"): Use it to
	look up a symbol to determine whether it's a nonterminal or terminal.
	* src/gram.c (rule_rhs_print_xml): Remove class attribute.
	* src/state.c (state_rule_lookahead_tokens_print_xml): Likewise.

	Add prec/assoc information to XML output.
	* src/gram.c (grammar_rules_print_xml): For each rule that has a
	%prec, add a percent_prec attribute.
	* src/print-xml.c (print_grammar): For each terminal that has a
	precedence or associativity, add a prec or assoc attribute.
	(xml_indent): New.
	(xml_puts): Use xml_indent.
	(xml_printf): Use xml_indent.
	* src/print-xml.h (xml_indent): Prototype.

	* tests/existing.at (GNU pic Grammar): Fix a rule miscopied from
	<http://lists.gnu.org/archive/html/bug-bison/2003-04/msg00026.html>.

2007-12-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/xslt/bison.xsl (bison:ruleNumber): Rename to...
	(bison:ruleByNumber): ... this for clarity.
	* data/xslt/xml2dot.xsl (xsl:template match="item"): Update.
	* data/xslt/xml2text.xsl (xsl:template match="item"): Update.
	(xsl:template match="reduction"): Update.
	(xsl:template match="item"): Update.
	(xsl:template match="reduction"): Update.

	In the XML output, don't print the list of rules where symbols appear.
	Compute it in XSLT instead.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2007-09/msg00024.html>.
	* data/xslt/bison.xsl (bison:ruleByLhs): New.
	(bison:ruleByRhs): New.
	* data/xslt/xml2text.xsl (xsl:template match="terminal"): Use
	bison:ruleByRhs.
	(xsl:template match="terminal/rule"): Remove.
	(xsl:template match="nonterminal"): Use bison:ruleByLhs and
	bison:ruleByRhs.
	(xsl:template match="nonterminal/left/rule|nonterminal/right/rule"):
	Remove.
	* data/xslt/xml2xhtml.xsl (xsl:template match="terminal"): Use
	bison:ruleByRhs and mode="number-link" for rule template.
	(xsl:template match="terminal/rule"): Remove.
	(xsl:template match="nonterminal"): Use bison:ruleByLhs and
	bison:ruleByRhs and mode="number-link" for rule template.
	(xsl:template match="nonterminal/left/rule|nonterminal/right/rule"):
	Rewrite as...
	(xsl:template match="rule" mode="number-link"): ... this.
	* src/print-xml.c (print_grammar): Don't print the list of rules.

2007-12-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't let --report affect XML output; always print all information.
	Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2007-09/msg00020.html>.
	* src/conflicts.c (log_resolution): Implement.
	* src/print-xml.c (print_core): Implement.
	(print_state): Implement.
	(print_xml): Implement.

	* NEWS (2.3a+): Fix quotes.
	* src/parse-gram.y (prologue_declaration): For consistency with -v,
	don't let %verbose clear the list specified by --report.

2007-11-26  Akim Demaille  <akim@epita.fr>

	* data/Makefile.am (dist_pkgdata_DATA): Ship and install bison.xsl.

2007-11-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	In the XML output, list useless and unused symbols and rules with the
	useful ones and add a "usefulness" attribute.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-09/msg00017.html>.
	* src/gram.c (grammar_rules_partial_print_xml): Remove.
	(grammar_rules_print_xml): Print all rules instead of just those
	useful in the grammar, and add a "usefulness" attribute.
	* src/gram.h (grammar_rules_partial_print_xml): Remove prototype.
	* src/print-xml.c (print_rules_useless_in_parser): Remove.
	(print_grammar): Print all nonterminals instead of just useful ones,
	and add a "usefulness" attribute to nonterminals and terminals.
	(print_xml): Don't print a separate "reductions" or
	"rules-useless-in-parser" element.
	* src/reduce.c (reduce_output): Use reduce_token_unused_in_grammar.
	(reduce_xml): Remove.
	(reduce_token_unused_in_grammar): New.
	(reduce_nonterminal_useless_in_grammar): New.
	* src/reduce.h (reduce_xml): Remove prototype.
	(reduce_token_unused_in_grammar): Add prototype.
	(reduce_nonterminal_useless_in_grammar): Add prototype.
	* data/xslt/xml2text.xsl: Update for XML changes.
	* data/xslt/xml2xhtml.xsl: Update for XML changes.
	* tests/reduce.at (Useless Terminals): Update output.
	(Useless Rules): Update output.
	(Reduced Automaton): Update output.

	Say "Terminals unused in grammar" instead of "Unused terminals".
	* NEWS (2.3a+): Update.
	* doc/bison.texinfo (Understanding): Update example output.
	* src/reduce.c (reduce_output): Implement.
	* data/xslt/xml2text.xsl: Implement.
	* data/xslt/xml2xhtml.xsl: Implement.

2007-11-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Accept --report-file=FILE to override the default `.output' filename.
	* NEWS (2.3a+): Mention.
	* doc/bison.texinfo (Bison Options): Add an entry.
	* src/files.c (compute_output_file_names): Don't override
	spec_verbose_file if already set.
	* src/getargs.c (usage): Document --report-file.
	(REPORT_FILE_OPTION): New anonymous enum member.
	(long_options): Add entry for it.
	(getargs): Add case for it setting spec_verbose_file.

	* build-aux/cross-options.pl: Don't record a short option just because
	there's an arg.
	* doc/.cvsignore: Add yacc.1.

2007-11-14  Akim Demaille  <akim@epita.fr>

	* doc/yacc.1.in: New.
	* configure.ac, doc/Makefile.am: Adjust.
	* configure.ac (PACKAGE_COPYRIGHT_YEAR): New substitution, and new
	config.h symbol.
	Use AC_SUBST for assignments too.
	* src/getargs.c (version): Use PACKAGE_COPYRIGHT_YEAR.

2007-11-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/gram.c: Remove comments that duplicate comments in gram.h.

	When reporting useless rules and nonterminals, say "useless in grammar"
	instead of "useless", and say "useless in parser" instead of "never
	reduced".  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-10/msg00033.html>.
	* NEWS (2.3a+): Mention this change.
	* data/xslt/xml2text.xsl: Update output text and expected input XML
	element names to match changes below.
	* data/xslt/xml2xhtml.xsl: Likewise.
	(xsl:template match="bison-xml-report"): Add missing entry in Table of
	Contents: "Rules useless in parser due to conflicts".
	* doc/bison.texinfo (Decl Summary): Reword a little.
	(Understanding): Update example output for changes below.
	* src/gram.c: (rule_useful_p): Rename to...
	(rule_useful_in_grammar_p): ... this.
	(rule_useless_p): Rename to...
	(rule_useless_in_grammar_p): ... this.
	(rule_never_reduced_p): Rename to...
	(rule_useless_in_parser_p): ... this.
	(grammar_rules_print): Update for renames.
	(grammar_rules_print_xml): Update for renames.
	(grammar_rules_never_reduced_report): Rename to...
	(grammar_rules_useless_report): ... this since it is used for either
	kind of useless rule.
	* src/gram.h: Reword comments and update function names in prototypes.
	* src/main.c (main): Say "rule useless in parser due to conflicts".
	* src/print-xml.c (print_rules_never_reduced): Rename to...
	(print_rules_useless_in_parser): ... this, and rename output XML
	element "rules-never-reduced" to "rules-useless-in-parser".
	(print_xml): Update for rename.
	* src/print.c (print_results): Say "Rules useless in parser due to
	conflicts".
	* src/reduce.c (reduce_grammar_tables): Say "rule useless in grammar".
	(nonterminals_reduce): Say "nonterminal useless in grammar".
	(reduce_output): Say "Nonterminals useless in grammar".
	Say "Rules useless in grammar".
	(reduce_xml): Rename output XML element "useless" to
	"useless-in-grammar".
	(reduce_print): Don't report the count of grammatically useless rules
	as "rules never reduced" just because %yacc is specified.
	In the correct report of this count, say nonterminal(s) and rule(s)
	"useless in grammar".
	* tests/conflicts.at (S/R in initial): Update expected output.
	(Defaulted Conflicted Reduction): Likewise.
	(Unreachable States After Conflict Resolution): Likewise.
	* tests/existing.at (GNU pic Grammar): Likewise.
	* tests/reduce.at (Useless Nonterminals): Likewise.
	(Useless Rules): Likewise.
	(Reduced Automaton): Likewise.
	(Underivable Rules): Likewise.
	(Empty Language): Likewise.

2007-11-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/bison.m4 (b4_cat): Put a newline after the end delimiter of the
	here document and before the EOF so that BSD's implementation of Bourne
	shell doesn't parse the delimiter as part of the here document.
	* doc/.cvsignore: Add cross-options.texi.
	* src/getargs.c (usage): Add a blank line after the warning categories.

2007-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* data/lalr1.java (Lexer): Remove usage of b4_pure_if.

2007-11-05  Akim Demaille  <akim@epita.fr>

	Remove Id: from bison.1.
	* doc/Makefile.am (remove_time_stamp): Include the sed invocation.
	(perl -0777 -pi -e 's/\.PP\nId): New.
	(.x.1): Use it to ignore the version control revision.

2007-11-05  Akim Demaille  <demaille@gostai.com>

	* build-aux/Makefile.am: Ship cross-options.pl.
	* doc/Makefile.am: Always refer to cross-options.texi with
	$(srcdir).
	(MAINTAINERCLEANFILES): Add it.

2007-11-04  Akim Demaille  <demaille@gostai.com>

	Generate the long/short option cross-table.
	* build-aux/cross-options.pl: New.
	* doc/Makefile.am (cross-options.texi): New.
	* doc/bison.texinfo: Use it.

2007-11-04  Akim Demaille  <demaille@gostai.com>

	Generate bison.1 using help2man.
	* doc/common.x, doc/bison.x: New.
	* doc/Makefile.am (bison.1, .x.1): New.
	The code is taken from autoconf-2.61/man/Makefile.am.
	* configure.ac: Look for help2man.

2007-11-04  Akim Demaille  <demaille@gostai.com>

	Complete --help.
	* src/getargs.c (usage): Document -W, make it clear that -d,
	-g and -x have optional arguments.

2007-11-04  Akim Demaille  <demaille@gostai.com>

	Find sha1sum when named gsha1sum.
	* bootstrap (find_tool): New.
	($SHA1SUM): New.

2007-10-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	Deprecate %pure-parser and add `%define api.pure'.  Discussed starting
	at
	<http://lists.gnu.org/archive/html/bison-patches/2007-09/msg00006.html>.
	* NEWS (2.3a+): Mention.
	* data/bison.m4 (b4_pure_if): Don't define it here.
	* data/c.m4 (b4_identification): Depend on individual skeletons to
	define b4_pure_flag, b4_push_flag, or b4_pull_flag if they use the
	values of the %define variables api.pure or api.push_pull.  Define
	YYPURE, YYPUSH, and YYPULL accordingly.
	* data/glr.c: Define b4_pure_if based on `%define api.pure' unless
	glr.cc has already defined b4_pure_flag.
	* data/push.c: Define b4_pure_if based on `%define api.pure'.
	Remove YYPUSH and YYPULL since they're back in b4_identification again.
	* data/yacc.c: Define b4_pure_if based on `%define api.pure'.
	* doc/bison.texinfo (Pure Decl): Update.
	(Push Decl): Update.
	(Decl Summary): Add api.pure to %define entry.
	In %pure-parser entry, say it's deprecated and reference %define.
	(Pure Calling): Update.
	(Error Reporting): Update.
	(C++ Scanner Interface): Update.
	(How Can I Reset the Parser): Update.
	(Table of Symbols): In %pure-parser entry, say it's deprecated and
	reference %define.
	* src/getargs.c (pure_parser): Remove global variable.
	* src/getargs.h (pure_parser): Remove extern.
	* src/output.c (prepare): Don't define pure_flag muscle.
	* src/parse-gram.y (prologue_declaration): Implement %pure-parser as a
	wrapper around `%define api.pure'.
	* tests/calc.at (Simple LALR Calculator): Update.
	(Simple GLR Calculator): Update.
	* tests/cxx-type.at (GLR: Resolve ambiguity, pure, no locations):
	Update.
	(GLR: Resolve ambiguity, pure, locations): Update.
	(GLR: Merge conflicting parses, pure, no locations): Update.
	(GLR: Merge conflicting parses, pure, locations): Update.
	* tests/glr-regression.at (Uninitialized location when reporting
	ambiguity): Update
	* tests/input.at (Unused %define api.pure): New test case.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Update definition for
	AT_PURE_IF and AT_PURE_AND_LOC_IF.
	* tests/push.at (Push Parsing: Memory Leak for Early Deletion): Update.

2007-10-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	%define push_pull -> %define api.push_pull.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-09/msg00005.html>.
	* data/push.c: Expect the new name.
	* data/yacc.c: Likewise.
	* doc/bison.texinfo (Push Decl): Update.
	(Decl Summary): Update %define entry.
	(Push Parser Function): Update.
	(Pull Parser Function): Update.
	(Parser Create Function): Update.
	(Parser Delete Function): Update.
	* tests/calc.at (Simple LALR Calculator): Update.
	* tests/input.at (%define enum variables): Update.
	* tests/push.at (Push Parsing: Memory Leak for Early Deletion): Update.
	(Push Parsing: Multiple impure instances): Update.
	(Push Parsing: Unsupported Skeletons): Update.
	* tests/torture.at (Exploding the Stack Size with Alloca): Update.
	(Exploding the Stack Size with Malloc): Update.

	* NEWS (2.3a+): Add an entry for the push parser, and clean up the
	other entries some.

2007-10-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	For the XML output's terminal element, rename @number to @token-number,
	and add @symbol-number.  In the nonterminal element, rename @number to
	@symbol-number.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-10/msg00040.html>.
	* data/xslt/xml2text.xsl (xsl:template match="terminal"): Update for
	renames.
	(xsl:template match="nonterminal"): Likewise.
	* data/xslt/xml2xhtml.xsl (xsl:template match="terminal"): Likewise.
	(xsl:template match="nonterminal"): Likewise.
	* src/print-xml.c (print_grammar): Implement.

2007-10-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/xslt/xml2dot.xsl (xsl:template match="automaton/state"): After
	2007-10-11 change, the child elements here are items not rules.
	(xsl:template match="item"): New.
	(xsl:template match="rule"): Update for new reduced itemset.
	(xsl:template match="point"): Remove.
	(xsl:template match="empty"): For consistency with --graph, don't
	output "/* empty */".
	* data/xslt/xml2text.xsl (xsl:template match="terminal"): When invoking
	line-wrap, don't pass a negative value as first-line-length since this
	won't work with the following changes.
	(xsl:template name="line-wrap"): Simplify slightly.
	(xsl:template name="ws-search"): Eliminate recursion.
	* src/print_graph.c (print_core): Don't print a reduction's lookahead
	set next to an item whose dot is not at the end of the RHS even if it
	happens to be associated with the same rule.

2007-10-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add %define lr.keep_unreachable_states.
	* NEWS (2.3a+): Mention it in the entry for unreachable state removal.
	* doc/bison.texinfo (Decl Summary): Mention it in the %define entry.
	* src/main.c (main): Implement it.
	* tests/conflicts.at (Unreachable States After Conflict Resolution):
	Extend to test it, and fix a typo.

2007-10-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3a+): Add entry for recent .output file lookahead set fix.
	* doc/bison.texinfo (Understanding): Remove a bogus lookahead set in
	the example .output text.
	* tests/regression.at (Extra lookahead sets in report): Improve wording
	of comments.

2007-10-17  Wojciech Polak  <polak@gnu.org>

	* src/print-xml.c (print_grammar): Renamed
	<terminal> and <nonterminal> attributes:
	"type" to "number" and "symbol" to "name".
	* data/xslt/xml2text.xsl (xsl:template match="terminal"):
	Use new attribute names.
	(xsl:template match="nonterminal"): Likewise.
	* data/xslt/xml2xhtml.xsl: Likewise.

2007-10-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Bison Options): Add entry for --print-datadir.
	(Option Cross Key): Likewise.

	* src/print-xml.c (print_core): Don't print a reduction's lookahead set
	next to an item whose dot is not at the end of the RHS even if it
	happens to be associated with the same rule.
	* src/print.c (print_core): Likewise.
	* tests/conflicts.at (Unresolved SR Conflicts): Update output.
	(Resolved SR Conflicts): Update output.
	* tests/regression.at (Extra lookahead sets in report): New test case.

2007-10-11  Wojciech Polak  <polak@gnu.org>

	* src/print-xml.c (print_core): Remove item set
	redundancy.
	* data/xslt/bison.xsl (bison:ruleNumber): New key.
	Improve processing time. Suggested by Joel E. Denny.
	* data/xslt/xml2dot.xsl (xsl:template name="escape"):
	Write xsl:param "required" attribute as comment.
	* data/xslt/xml2text.xsl (xsl:template match="item"): New.
	(xsl:template match="rule"): Support new reduced itemset.
	(xsl:template match="point"): Remove.
	* data/xslt/xml2xhtml.xsl: Likewise.

2007-10-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/getargs.c (version): Update copyright year.

2007-10-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	Make xml2dot.xsl and --graph produce the same output.
	* data/xslt/xml2dot.xsl (xsl:template match="rule"): Use a `&#10;'
	instead of a `\n'.  That is, don't add escapes yet or they'll be doubly
	escaped later.
	(xsl:template name="output-node"): Use the new escape template instead
	of the string-replace template directly.
	(xsl:template name="output-edge"): Likewise.
	(xsl:template name="escape"): New, escapes backslashes and newlines in
	addition to quotation marks.
	* src/graphviz.c (start_graph, output_node, output_edge): Add
	whitespace to output for legibility.

	Make xml2text.xsl and --report produce the same output, and remove the
	XML "conflicts" element since a conflict summary is easily extracted
	from the automaton.
	* data/xslt/bison.xsl: New.
	(xsl:template match="state" mode="bison:count-conflicts): New.
	* data/xslt/xml2text.xsl: Import bison.xsl.
	(xsl:template match="bison-xml-report"): Instead of styling the
	"conflicts" element, style the "automaton" element with mode
	"conflicts".  Unlike the former, the latter lists S/R and R/R
	conflicts for a state on the same line.
	(xsl:template match="conflicts"): Remove.
	(xsl:template match="conflict"): Remove.
	(xsl:template match="terminal"): Line-wrap the list of rules in which
	the terminal is used.
	(xsl:template match="nonterminal"): Likewise for nonterminals.
	(xsl:template match="automaton" mode="conflicts"): New.
	(xsl:template match="state" mode="conflicts"): New.
	(xsl:template name="line-wrap"): New.
	(xsl:template name="ws-search"): New.
	* data/xslt/xml2xhtml.xsl: Import bison.xsl.
	(xsl:template match="bison-xml-report"): Instead of styling the
	"conflicts" element, style the "automaton" element with mode
	"conflicts."
	(xsl:template match="conflicts"): Remove.
	(xsl:template match="conflict"): Remove.
	(xsl:template match="automaton" mode="conflicts"): New.
	(xsl:template match="state" mode="conflicts): New.
	* src/conflicts.c (conflicts_output_xml): Remove.
	* src/conflicts.h (conflicts_output_xml): Remove prototype.
	* src/print-xml.c (print_xml): Don't invoke conflicts_output_xml.
	* src/print.c (print_grammar): Consistently wrap at the 66th column so
	the corresponding XSLT is easier.  Also, never wrap between a word and
	the comma that follows it.

2007-10-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	Improve C++ namespace support.  Discussed starting at
	<http://lists.gnu.org/archive/html/help-bison/2007-09/msg00016.html>.
	* data/c++.m4: (b4_namespace_ref, b4_namespace_open,
	b4_namespace_close): New macros that interpret the %define variable
	"namespace" so its value can contain "::" to indicate nested
	namespaces.
	* data/glr.cc (b4_namespace): Don't define, and replace all uses with
	the above macros.
	* data/lalr1.cc (b4_namespace): Likewise.
	* data/location.cc (b4_namespace): Likewise.
	* doc/bison.texinfo (Decl Summary): Move `%define push_pull' entry
	inside a new table in the general %define entry.  Document `%define
	namespace' there as well.  Point the %name-prefix entry to it since it
	explains it more completely in the case of C++.
	(C++ Bison Interface): Mention `%define namespace' instead of
	%name-prefix.
	(Table of Symbols): Remove the `%define push_pull' entry.  The %define
	entry suffices.
	* tests/c++.at (Relative namespace references): New test case.
	(Absolute namespace references): New test case.
	(Syntactically invalid namespace references): New test case.
	* tests/input.at (C++ namespace reference errors): New test case.

2007-10-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add syncline support and location accessor to internal %define
	interfaces.
	* data/bison.m4 (b4_percent_define_get_loc): New.
	(b4_percent_define_get_syncline): New.
	(b4_percent_define_flag_if): Use b4_percent_define_get_loc.
	(b4_percent_define_default): Record defining location as line 1 rather
	than 0 for the sake of synchronizing #line's, and define
	b4_percent_define_syncline(VARIABLE).
	(b4_percent_define_check_values): Use b4_percent_define_get_loc.
	* src/muscle_tab.c (muscle_syncline_grow): New.
	(muscle_code_grow): Use muscle_syncline_grow.
	(muscle_percent_define_insert): Use muscle_percent_define_get_loc, and
	define b4_percent_define_syncline(VARIABLE).
	(muscle_percent_define_get_loc): New.
	(muscle_percent_define_get_syncline): New.
	(muscle_percent_define_flag_if): Use muscle_percent_define_get_loc, and
	remove some unused variables.
	(muscle_percent_define_default): Record defining location as line 1
	rather than 0 for the sake of synchronizing #line's, and define
	b4_percent_define_syncline(VARIABLE).
	(muscle_percent_define_check_values): Use
	muscle_percent_define_get_loc.
	* src/muscle_tab.h (muscle_percent_define_get_loc): Prototype.
	(muscle_percent_define_get_syncline): Prototype.
	* tests/skeletons.at (%define Boolean variables: invalid skeleton
	defaults): Update output for location change.
	(Complaining during macro argument expansion): Extend to test
	b4_percent_define_get_loc and b4_percent_define_get_syncline errors.

2007-10-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix some error-reporting macro bugs.
	* data/bison.m4 (b4_cat): New.
	(b4_error, b4_error_at): Use b4_cat to send error directives directly
	to stdout so they don't become arguments to other macros.  Update
	comments and add examples.
	(b4_warn, b4_warn_at, b4_complain, b4_complain_at): Update comments and
	add examples.
	(b4_fatal, b4_fatal_at): Likewise, and invoke m4_exit(1) immediately
	after printing the error directive so that M4 doesn't report subsequent
	problems that are induced by this problem.
	* src/scan-skel.l: Recognize @` digraph outside of directive arguments
	instead of just in them.  Recognize @\n in both places.  Both expand to
	the empty string.  Needed by b4_cat.
	* tests/skeletons.at (Complaining during macro argument expansion):
	New test case.
	(Fatal errors make M4 exit immediately): New test case.

2007-10-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Implement --print-datadir.
	* src/getargs.c (usage): Mention.
	(PRINT_DATADIR_OPTION): New anonymous enum member.
	(long_options): Add entry for it.
	(getargs): Add case for it calling compute_pkgdatadir.
	* src/output.c (output_skeleton): Encapsulate data directory
	computation from here...
	(prepare): ... and from here...
	(compute_pkgdatadir): ... into this new function.
	* src/output.h (compute_pkgdatadir): Prototype.

2007-09-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/print-xml.c (escape_bufs): New static global variable
	replacing...
	(xml_escape_n): ... the static local variable buf here.
	(print_xml): Free memory for escape_bufs.
	* src/reduce.c (reduce_xml): XML-escape terminal symbol tags.

2007-09-25  Joel E. Denny  <jdenny@ces.clemson.edu>

	Replace `%push-parser' and `%push-pull-parser' with
	`%define push_pull "push"' and `%define push_pull "both"'.
	`%define push_pull "pull"' is the default.
	* doc/bison.texinfo (Push Decl, Push Parser Function,
	Pull Parser Function, Parser Create Function, Parser Delete Function):
	Update declarations.
	(Decl Summary, Table of Symbols): Replace %push-parser and
	%push-pull-parser entries with a %define push_pull entry.
	* data/bison.m4 (b4_percent_define_check_values): New macro.
	(b4_pull_if, b4_push_if, b4_use_push_for_pull_if): Move these
	definitions...
	* data/c.m4 (b4_identification): ... and the YYPUSH and YYPULL cpp
	definitions...
	* data/push.c: ... to here and compute them from the value of the
	%define variable push_pull.
	* data/c-skel.m4: Instead of choosing the push.c skeleton for push
	parsing requests here...
	* data/yacc.c: ... hack this to switch to push.c any time
	b4_use_push_pull_flag or the %define variable push_pull is set.  This
	will go away when we mv push.c yacc.c.
	* data/c++-skel.m4, data/glr.c, data/java-skel.m4: Don't report that
	push parsing is not supported since unused %define variables are
	reported anyway.
	* src/getargs.c, src/getargs.h (pull_parser, push_parser): Remove.
	* src/muscle_tab.h (muscle_percent_define_check_values): Update
	comments for consistency with b4_percent_define_check_values.
	* src/output.c (prepare): Don't insert b4_pull_flag and b4_push_flag
	muscles.
	* src/parse-gram.y (PERCENT_PUSH_PARSER, PERCENT_PUSH_PULL_PARSER):
	Remove.
	(prologue_declaration): Remove %push-parser and %push-pull-parser
	rules.
	* src/scan-gram.l (%push-parser, %push-pull-parser): Remove rules.
	* tests/calc.at: Update declarations.
	* tests/input.at (%define enum variables): New test case.
	* tests/push.at (Push Parsing: Memory Leak for Early Deletion): Update
	declaration.
	(Push Parsing: Multiple impure instances): Update declaration.
	(Push Parsing: Unsupported Skeletons): New test case.
	* tests/torture.at (Exploding the Stack Size with Alloca): Update
	declaration.
	(Exploding the Stack Size with Malloc): Update declaration.

2007-09-24  Wojciech Polak  <polak@gnu.org>

	Add XSLT transformations.

	* data/xslt/xml2dot.xsl: Transform XML into DOT.
	* data/xslt/xml2text.xsl: Transform XML into plain text.
	* data/xslt/xml2xhtml.xsl: Transform XML into XHTML.
	* data/Makefile.am (xsltdir): New variable.
	(dist_xslt_DATA): Add xslt/*.xsl files.

2007-09-23  Paul Eggert  <eggert@cs.ucla.edu>

	* src/conflicts.c (log_resolution): Fix indenting bugs I introduced.
	Problem reported by Wojciech Polak.
	* src/print-xml.c (xml_puts): Work even if LEVEL exceeds INT_MAX/2.
	(xml_printf): Undo change I made on 21 September; that is,
	indent 2 spaces, not 1.

2007-09-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	Pacify ./configure --enable-gcc-warnings.
	* src/print-xml.c, src/print-xml.h (xml_puts): Make third argument
	`char const *' instead of `char *'.
	* src/state.c (state_rule_lookahead_tokens_print_xml): Remove unused
	local variable `sep'.

2007-09-21  Paul Eggert  <eggert@cs.ucla.edu>

	* src/gram.c (rule_rhs_print_xml): Now static, since it isn't used
	elsewhere.
	* src/print-xml.c: Prefer "const" after types; that's more consistent.
	(xml_printf): Indent just 1 space for level.
	(e_char, xlate_char): Remove.
	(xml_escape_string): Rewrite to avoid undefined behavior (used
	storage that was freed from the stack).
	(xml_escape_n): Don't bother checking for subscript error.

2007-09-21  Wojciech Polak  <polak@gnu.org>

	Add Bison XML Automaton Report.

	Add support for an -x option to generate an XML report.
	It is not documented yet.
	* src/print-xml.c: New file.
	* src/print-xml.h: Likewise.
	* lib/timevar.def (TV_XML): New var.
	* src/Makefile.am (bison_SOURCES): Add print-xml.c, print-xml.h.
	* src/conflicts.c: Include print-xml.h.
	(solved_conflicts_xml_obstack): New var.
	(log_resolution, conflicts_solve, conflicts_free):
	Add support for XML report.
	(conflicts_output_val): New function.
	* src/conflicts.h (conflicts_output_val): New decl.
	* src/files.c (spec_xml_file): New var.
	(compute_output_file_names, output_file_names_free): Add XML support.
	* src/files.h (spec_xml_file): New decl.
	* src/getargs.c (xml_flag): New var.
	(usage, short_options, long_options, getargs): Add XML support.
	* src/getargs.h (xml_flag): New decl.
	* src/gram.c: Include print-xml.h.
	(rule_lhs_print_xml, rule_rhs_print_xml):
	(grammar_rules_partial_print_xml, grammar_rules_print_xml):
	New functions.
	* src/gram.h: Declare external ones.
	* src/main.c: Include print-xml.h.
	(main): Add XML support.
	* src/reduce.c: Include print-xml.h.
	(reduce_xml): New function.
	* src/reduce.h: Declare it.
	* src/state.c: Include print-xml.h.
	(state_new): Add XML support.
	(state_rule_lookahead_tokens_print_xml): New function.
	* src/state.h: Declare it.
	(struct state): New member solved_conflicts_xml.
	* src/symtab.c (symbol_class_get_string): New function.
	* src/symtab.h: Declare it.

2007-09-21  Paul Eggert  <eggert@cs.ucla.edu>

	* GNUmakefile: Switch to coreutils's version.
	* bootstrap: Likewise.
	* Makefile.cfg: Adjust to new GNUmakefile.
	* README-hacking: Likewise.

	Import from gnulib:

	2006-08-18  Paul Eggert  <eggert@cs.ucla.edu>
		    Bruno Haible  <bruno@clisp.org>

	* m4/bison-i18n.m4 (BISON_I18N): Also handle the case where yacc exists
	and is a script that invokes bison. Tighten the code. Add comments.

2007-08-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	Spell "boolean" as "Boolean".  Reported by Akim Demaille.
	* data/bison.m4 (b4_percent_define_flag_if): Fix complaint.
	* doc/bison.texinfo (Decl Summary): Fix.
	* src/muscle_tab.c (muscle_percent_define_flag_if): Fix complaint.
	* tests/input.at (Boolean %define variables): Update output.
	* tests/skeletons.at (%define boolean variables: invalid skeleton
	defaults): Rename to...
	(%define Boolean variables: invalid skeleton defaults): ... this and
	update output.

2007-08-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	In impure push mode, don't allow more than one yypstate to be allocated
	since multiple impure parsers would corrupt yynerrs.
	* data/push.c (yypstate_allocated): New static global variable
	initialized to 0.
	(yypull_parse): If yypstate_new returns 0, don't report it as memory
	exhaustion if yypstate_allocated is 1, but still return 2.
	(yypstate_new): Invoke yyerror and return 0 if yypstate_allocated is
	already 1.  Otherwise, set it to 1.
	(yypstate_delete): Set it to 0.
	* tests/push.at (Push Parsing: Multiple impure instances): New test
	case.

2007-08-17  Bob Rossi  <bob@brasko.net>

	* doc/bison.texinfo (Push Decl): Document the push parser.
	(Table of Symbols): Ditto.
	(Pure Decl): Ditto.
	(Decl Summary): Ditto.
	(Multiple Parsers, Push Parser Function, Pull Parser Function,
	Parser Create Function, Parser Delete Function):
	Add new push parser symbols.
	(Table of Symbols): Document push-parser, push-pull-parser,
	yypush_parse, yypull_parse, yypstate_new and yypstate_delete.

2007-08-15  Paul Eggert  <eggert@cs.ucla.edu>

	Update to GPLv3.
	* doc/gpl-3.0.texi: New file.
	* doc/gpl.texi: Remove.
	* COPYING, GNUmakefile, HACKING, Makefile.am, Makefile.cfg:
	* Makefile.maint, NEWS, PACKAGING, README, README-alpha:
	* README-hacking, TODO, bootstrap, bootstrap.conf:
	* configure.ac, data/Makefile.am, data/README, data/bison.m4:
	* data/c++-skel.m4, data/c++.m4, data/c-skel.m4, data/c.m4:
	* data/glr.c, data/glr.cc, data/java-skel.m4, data/java.m4:
	* data/lalr1.cc, data/lalr1.java, data/location.cc:
	* data/push.c, data/yacc.c, data/m4sugar/m4sugar.m4:
	* djgpp/Makefile.maint, djgpp/README.in, djgpp/config.bat:
	* djgpp/config.sed, djgpp/config.site, djgpp/config_h.sed:
	* djgpp/djunpack.bat, djgpp/subpipe.c, djgpp/subpipe.h:
	* djgpp/testsuite.sed, doc/Makefile.am, doc/bison.texinfo:
	* doc/fdl.texi, doc/refcard.tex, etc/Makefile.am, etc/README:
	* etc/bench.pl.in, examples/Makefile.am, examples/extexi:
	* examples/calc++/Makefile.am, lib/Makefile.am, lib/abitset.c:
	* lib/abitset.h, lib/bbitset.h, lib/bitset.c, lib/bitset.h:
	* lib/bitset_stats.c, lib/bitset_stats.h, lib/bitsetv-print.c:
	* lib/bitsetv-print.h, lib/bitsetv.c, lib/bitsetv.h:
	* lib/ebitset.c, lib/ebitset.h, lib/get-errno.c:
	* lib/get-errno.h, lib/lbitset.c, lib/lbitset.h:
	* lib/libiberty.h, lib/main.c, lib/subpipe.c, lib/subpipe.h:
	* lib/timevar.c, lib/timevar.def, lib/timevar.h:
	* lib/vbitset.c, lib/vbitset.h, lib/yyerror.c:
	* m4/c-working.m4, m4/cxx.m4, m4/m4.m4, m4/subpipe.m4:
	* m4/timevar.m4, src/LR0.c, src/LR0.h, src/Makefile.am:
	* src/assoc.c, src/assoc.h, src/closure.c, src/closure.h:
	* src/complain.c, src/complain.h, src/conflicts.c:
	* src/conflicts.h, src/derives.c, src/derives.h, src/files.c:
	* src/files.h, src/flex-scanner.h, src/getargs.c:
	* src/getargs.h, src/gram.c, src/gram.h, src/graphviz.c:
	* src/lalr.c, src/lalr.h, src/location.c, src/location.h:
	* src/main.c, src/muscle_tab.c, src/muscle_tab.h:
	* src/nullable.c, src/nullable.h, src/output.c, src/output.h:
	* src/parse-gram.c, src/parse-gram.h, src/parse-gram.y:
	* src/print.c, src/print.h, src/print_graph.c:
	* src/print_graph.h, src/reader.c, src/reader.h, src/reduce.c:
	* src/reduce.h, src/relation.c, src/relation.h:
	* src/revision.h, src/scan-code.h, src/scan-code.l:
	* src/scan-gram.h, src/scan-gram.l, src/scan-skel.h:
	* src/scan-skel.l, src/state.c, src/state.h, src/symlist.c:
	* src/symlist.h, src/symtab.c, src/symtab.h, src/system.h:
	* src/tables.c, src/tables.h, src/uniqstr.c, src/uniqstr.h:
	* tests/Makefile.am, tests/actions.at, tests/c++.at:
	* tests/calc.at, tests/conflicts.at, tests/cxx-type.at:
	* tests/existing.at, tests/glr-regression.at:
	* tests/headers.at, tests/input.at, tests/java.at:
	* tests/local.at, tests/output.at, tests/push.at:
	* tests/reduce.at, tests/regression.at, tests/sets.at:
	* tests/skeletons.at, tests/synclines.at, tests/testsuite.at:
	* tests/torture.at:
	Update to GPLv3.

2007-08-11  Joel E. Denny  <jdenny@ces.clemson.edu>

	Get rid of broken %no-parser, -n, and --no-parser implementation and
	documentation.
	* TODO: Don't mention them.
	* doc/bison.1: Likewise.
	* doc/bison.texinfo (Decl Summary): Likewise.
	(Bison Options): Likewise.
	(Option Cross Key): Likewise.
	* src/getargs.c (no_parser_flag): Remove global variable.
	(usage): Don't print description of -n and --no-parser.
	(long_options): Remove --no-parser entry here.
	(getargs): Remove -n case in the switch here.
	* src/getargs.h (no_parser_flag): Remove extern.
	* tests/regression.at (Web2c Actions): Remove comment that mentions
	--no-parser.

2007-08-11  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/push.at (Push Parsing: Memory Leak for Early Deletion): Do not
	name user variables starting with `yy'.  Just pass NULL instead of a
	dummy local &yylval to yypush_parse.
	* tests/torture.at (AT_DATA_STACK_TORTURE): Do not name user variables
	starting with `yy'.

2007-08-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/yacc.c (yyexhaustedlab): Define it when YYERROR_VERBOSE is
	true since it's then always used regardless of whether yyoverflow is
	defined.  Reported by Christian Burger at
	<http://lists.gnu.org/archive/html/bug-bison/2007-07/msg00031.html>.
	* THANKS: Add Christian Burger.

	* ChangeLog: For changes in doc/bison.texinfo, consistently reference
	node names: say "Decl Summary" not "Bison Declaration Summary".

2007-07-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/muscle_tab.c (muscle_percent_define_flag_if): In order to
	determine whether this function has already complained about an invalid
	value for a %define boolean variable, don't check whether Bison has
	ever examined the value.  As written, the check was a tautology.
	Instead, record and check for this complaint using a separate muscle.

2007-07-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix push parsing memory leak reported by Brandon Lucia at
	<http://lists.gnu.org/archive/html/bug-bison/2007-07/msg00032.html>.
	* THANKS: Add Brandon Lucia.
	* data/push.c (yypstate_delete): Free the stack if it was reallocated
	but the parse never completed and thus freed it.
	* tests/Makefile.am (TESTSUITE_AT): Add push.at.
	* tests/testsuite.at: Include push.at.
	* test/push.at: New.
	(Push Parsing: Memory Leak for Early Deletion): New test case.

2007-07-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Improve handling of multiple S/R conflicts in the same state and of S/R
	conflicts involving multiple reductions.
	* src/conflicts.c (resolve_sr_conflict): Don't assign the error action
	set for a state here or Bison will abort if it is reassigned on a
	later conflicted reduction in the same state.
	Similarly, don't finalize and assign the solved conflicts report here
	or it will be lost if it is reassigned on a later conflicted reduction
	in the same state.
	(set_conflicts): Instead, assign them both here after all S/R conflicts
	in the state have been fully examined.
	* src/print.c (shift_set): Rename to...
	(no_reduce_set): ... this.
	(print_reductions): Update for rename, and add %nonassoc error action
	tokens to no_reduce_set so that, when printing the first remaining
	reduction on an error action token, the reduction is enclosed in
	brackets.
	(print_results): Update for rename.
	* tests/conflicts.at (Solved conflicts report for multiple reductions
	in a state): New test case.
	(%nonassoc error actions for multiple reductions in a state): New test
	case.

	* src/main.c (main): Don't depend on C99 features.

2007-07-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	* build-aux/.cvsignore: Add compile.
	* lib/.cvsignore: Add charset.alias, ref-add.sed, ref-del.sed, and
	uniwidth.

2007-07-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	* bootstrap (slurp): Create target directories that don't exist.
	Specifically, we need lib/uniwidth/ because of recent Gnulib changes.

2007-07-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* LR0.c (new_itemsets): Fix wording in comments: say item index rather
	than item number.
	* closure.c (closure): Likewise.
	* state.h (reductions): Comment sorting of rules.
	(state): Comment sorting of items.

2007-07-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix C++ test cases after recent Gnulib changes.  Discussed starting at
	<http://lists.gnu.org/archive/html/bug-bison/2007-07/msg00000.html>.
	* examples/calc++/Makefile.am (DEFAULT_INCLUDES): Override Automake's
	definition in order to avoid Gnulib headers since we don't use config.h
	here.
	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): Use AT_DATA_GRAMMAR
	rather than AT_DATA so that config.h is included.

2007-07-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yy_yypstack, yypstates, yypdumpstack): Use YYFPRINTF
	instead of fprintf.  Guard these functions with #if YYDEBUG instead of
	#ifdef YYDEBUG for consistency with all other uses of YYDEBUG in Bison
	and so that YYFPRINTF is guaranteed to be defined here.

2007-05-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/muscle_tab.c (muscle_percent_define_invalid_value): Replace
	with...
	(muscle_percent_define_check_values): ... this more helpful function.
	Again, it's not used yet, but it will be.
	* src/muscle_tab.h: Likewise.

	Improve some comments in parser table construction.
	* src/LR0.c (new_itemsets): Explain sorting of itemset and kernel_base.
	(generate_states): Don't mention ruleset, which is internal to closure.
	* src/closure.c (closure): Explain sorting of core and itemset, which
	is required for this function to behave correctly.
	* src/closure.h (closure): Mention sorting.

2007-05-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/lalr.c (state_lookahead_tokens_count): For code readability,
	move the check for disabled transitions to an aver since conflict
	resolution hasn't happened yet.

	* src/lalr.c (state_lookahead_tokens_count): Remove the check that
	labels a state as inconsistent just because it has error transitions.
	The original form of this check appeared in revision 1.1 of lalr.c,
	which was committed on 1991-12-21.  Now (at least), changing the
	consistency label on such a state appears to have no useful effect in
	any of the places it is examined, which I enumerate below.  The key
	point to understanding each item in this enumeration is that a state
	with an error transition is labelled consistent in the first place only
	if it has no rules, so the check cannot matter for states that have
	rules.  (1) Labelling a state as inconsistent will cause set_conflicts
	to try to identify its conflicts, and a state must have *rules* to have
	conflicts.  (2) Labelling a state as inconsistent will affect how
	action_row sets the default *rule* for the state.  (3) Labelling a
	state as inconsistent will cause build_relations to add lookback edges
	to *rules* in that state.
	* src/state.h (struct state): Word the comment for member consistent
	more carefully.

2007-05-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't depend on C99 features.
	* src/conflicts.c (conflicts_update_state_numbers): Fix for-loop.
	* src/lalr.c (lalr_update_state_numbers): Fix for-loop.
	* src/reader.c (check_and_convert_grammar): Fix for-loop.
	* src/state.c (state_mark_reachable_states): Fix for-loop.
	(state_remove_unreachable_states): Fix for-loop.

	Don't widen struct state with member reachable just to temporarily
	record reachability.  Instead, use a local bitset.
	* src/state.h (struct state): Remove member.
	* src/state.c (state_new): Don't initialize it.
	(state_mark_reachable_states): Rename to...
	(state_record_reachable_states): ... this, and use bitset.
	(state_remove_unreachable_states): Use bitset.

2007-05-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/Makefile.am (yacc): Quote target action commands properly so
	that the yacc script isn't corrupt.  Reported by Hans Aberg at
	<http://lists.gnu.org/archive/html/bug-bison/2007-05/msg00003.html>.

	* data/glr.c (yylval): As in yacc.c, don't extern in the header for
	the case of pure parsers.  Reported by Frans Englich at
	<http://lists.gnu.org/archive/html/help-bison/2007-05/msg00018.html>.
	* THANKS: Add Frans Englich.

	* NEWS (2.3a+): In the %code entry, reference section `Bison
	Declaration Summary' from the manual now since the %code summary has
	moved there.
	* doc/bison.texinfo (Prologue Alternatives): Mention that directives
	in the rules section must be terminated by semicolons.

2007-05-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Extend the front-end API for %define variables to more completely
	mirror the back-end.  This will be useful in the future.
	* data/bison.m4 (b4_percent_define_get, b4_percent_define_ifdef):
	Update comments to mention the new front-end counterparts of these
	macros.
	* src/muscle_tab.c (MUSCLE_COMMON_DECODE): New macro with common code
	for muscle_string_decode and muscle_location_decode.
	(muscle_string_decode): New static function.
	(muscle_location_decode): Use MUSCLE_COMMON_DECODE.
	(muscle_percent_define_get, muscle_percent_define_ifdef): New
	functions.
	(muscle_percent_define_flag_if): Use muscle_percent_define_ifdef and
	muscle_percent_define_get to mimic the b4_percent_define_flag_if
	implementation more closely.
	(muscle_percent_define_invalid_value): New function.
	* src/muscle_tab.h (muscle_percent_define_get,
	muscle_percent_define_ifdef, muscle_percent_define_invalid_value):
	Prototype.

2007-05-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS (2.3a+): Mention yesterday's state-removal change.
	(2.3a): Remove the %language entry, which was added after 2.3a.
	* src/LR0.c, src/closure.c, src/closure.h, src/conflicts.c,
	src/conflicts.h, src/lalr.c, src/lalr.h, src/print.c,
	src/print_graph.c, src/state.c, src/state.h, tests/conflicts.at,
	tests/existing.at: Update copyright date.

2007-05-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	If conflict resolution makes states unreachable, remove those states,
	report rules that are then unused, and don't report conflicts in those
	states.
	* src/conflicts.c, src/conflicts.h (conflicts_update_state_numbers):
	New global function.
	* src/lalr.c, src/lalr.h (lalr_update_state_numbers): New global
	function.
	* src/main.c (main): After conflict resolution, remove the unreachable
	states and update all data structures that reference states by number.
	* src/state.c (state_new): Initialize each state's reachable member to
	false.
	(state_mark_reachable_states): New static function.
	(state_remove_unreachable_states): New global function.
	* src/state.h (struct state): Add member bool reachable.
	(state_remove_unreachable_states): Prototype.
	* tests/conflicts.at (Unreachable States After Conflict Resolution):
	New test case.
	* tests/existing.at (GNU pic Grammar): Update test case output now that
	an unused rule is discovered.

2007-05-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	Minor code cleanup in parser table construction.
	* src/LR0.c (new_itemsets): Use item_number_is_symbol_number.
	(new_itemsets, save_reductions): Update for rename to nitemset.
	* src/closure.c (nritemset): Rename to...
	(nitemset): ... this since the "r" appears to meaningless and isn't
	used in the comments.
	(closure): Update for rename.
	* src/closure.h (nritemset): Update extern to...
	(nitemset): ... this.
	* src/lalr.c (LA): Fix a typo in comments.
	* src/print.c (print_core): Update for rename to nitemset.
	* src/print_graph.c (print_graph): Likewise.
	* src/state.h: Fix some typos in header comments.

2007-04-04  Paul Eggert  <eggert@cs.ucla.edu>

	* THANKS: Use ASCII for Sebastien Fricker's name.  Bison source
	still sticks to ASCII.  Sorry!

	* README-hacking: New file, taken mostly from coreutils, with changes
	for Bison.  Contains much of the contents of:
	* README-cvs: Remove.
	* bootstrap: Sync from gnulib.
	* build-aux/.cvsignore: Remove *.t, mkinstalldirs.
	* lib/.cvsignore: Add wchar.h, wctype.h.  Remove exit.h.

2007-03-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Destructor Decl): Fix typo reported by Sebastian
	Setzer.
	(Java Differences): Fix some typos.
	* THANKS: Add Sebastian Setzer.

2007-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* data/java.m4 (b4_single_class_if): Remove.
	(b4_abstract_if): Look at "%define abstract".
	(b4_lexer_if): New.
	(b4_union_name): Rename...
	(b4_yystype): ... to this.  Map to "%define stype".
	(b4_rhs_value, b4_parse_param_decl, b4_lex_param_decl,
	b4_maybe_throws): Fix quoting.
	(b4_lex_param_call): Move below to keep b4_*_param_decl close.
	* data/lalr1.java (Lexer interface): Always define.
	(Lexer interface within parser class): Remove.
	(YYLexer class): New, used when "%code lexer" is present.
	(constructor): When "%code lexer" is used, pass %lex-param
	to the lexer constructor.
	(yylex, yyparse): Remove %lex-param from method invocations
	(YYStack, yyaction, yyparse): Rename b4_union_name to b4_yystype.

	* doc/bison.texinfo (Java Bison Interface): Mention "%define
	abstract".  Rename "%define union_name" to "%define stype".
	Rename method names according to previous patch.
	(Java Scanner Interface): Describe "%code lexer" instead of
	"%pure-parser" and "%define single_class".
	(Java Differences): Mention "%code lexer".

	* tests/java.at (_AT_DATA_JAVA_CALC_Y): Remove final argument.
	Include scanner here, using macros from tests/local.at.
	(AT_DATA_CALC_Y): Remove final argument.
	(_AT_CHECK_JAVA_CALC): Likewise.
	(AT_CHECK_JAVA_CALC): Likewise.  Test all four combinations
	of %locations and %error-verbose.
	(main): Test with and without %lex-param.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Push AT_LEXPARAM_IF.
	(AT_BISON_OPTION_POPDEFS): Pop it.

2007-03-07  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	DJGPP spefic issue.  Inhibit the use of disallowed characters for
	file name generation on Win98, WinXP, etc.  These are |<>":?*\
	and concern testsuite case 46.
	* Makefile.am: djgpp/testsuite.sed added to EXTRA_DIST
	* djgpp/testsuite.sed: Inhibit the use of disallowed characters.
	* djgpp/config.bat: Inhibit the use of disallowed characters.

2007-03-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Miscellaneous %define and %code cleanup.
	* data/bison.m4 (b4_percent_define_flag_if): Correct comments on how
	values are interpreted.
	* doc/bison.texinfo (Decl Summary): Clean up and extend %define
	documentation a little more.
	* src/muscle_tab.c (MUSCLE_USER_NAME_CONVERT,
	muscle_percent_define_insert, muscle_percent_code_grow): New
	functions/macros.
	* src/muscle_tab.h (muscle_percent_define_insert,
	muscle_percent_code_grow): Prototype.
	* src/parse-gram.y (prologue_declaration): Use
	muscle_percent_define_insert and muscle_percent_code_grow when parsing
	%define and %code directives.

	Make it easy to share %define boolean variables between the front-end
	and back-end.  Though not used yet, this will be useful in the future.
	* data/bison.m4 (b4_check_user_names): Rewrite comments to talk about
	Bison uses of names rather than just skeleton uses of names.
	(b4_percent_define_get, b4_percent_define_ifdef): Rename
	b4_percent_define_skeleton_variables(VARIABLE) to
	b4_percent_define_bison_variables(VARIABLE).
	(b4_percent_code_get, b4_percent_code_ifdef): Rename
	b4_percent_code_skeleton_qualifiers(QUALIFIER) to
	b4_percent_code_bison_qualifiers(QUALIFIER).
	(b4_check_user_names_wrap): Update for renames.
	* src/muscle_tab.c, src/muscle_tab.h (muscle_percent_define_flag_if,
	muscle_percent_define_default): New functions mimicking
	b4_percent_define_flag_if and b4_percent_define_default.

	For %define variables, report locations for invalid values and
	redefinitions.
	* data/bison.m4 (b4_percent_define_flag_if): Read
	b4_percent_define_loc(VARIABLE) to report the location of an invalid
	value for VARIABLE.
	(b4_percent_define_default): Save a special location in
	b4_percent_define_loc(VARIABLE) in case the default value for VARIABLE
	must later be reported as invalid.
	* src/muscle_tab.c (muscle_location_grow, muscle_location_decode): New
	functions.
	(muscle_percent_define_insert): Record the location of VARIABLE in
	muscle percent_define_loc(VARIABLE), and use it to report the previous
	location for a redefinition.
	(muscle_percent_define_flag_if): Update like b4_percent_define_flag_if.
	(muscle_percent_define_default): Update like b4_percent_define_default.
	(muscle_grow_user_name_list): Rename to...
	(muscle_user_name_list_grow): ... this for consistency and use
	muscle_location_grow.
	* src/muscle_tab.h (muscle_location_grow): Prototype.
	* tests/input.at (%define errors): Update expected output.
	* tests/skeletons.at (%define boolean variables: invalid skeleton
	defaults): New test case.

2007-02-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/print.c (lookahead_set, state_default_rule): Remove.
	(print_reductions): Replace state_default_rule invocation with
	equivalent use of yydefact, which was computed in token_actions in
	tables.c.
	(print_results): Don't allocate lookahead_set.

2007-02-27  Paolo Bonzini  <bonzini@gnu.org>

	* data/lalr1.java: Prefix all private members with yy.

2007-02-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	Use YYFPRINTF instead of fprintf where appropriate.  Reported by
	Sebastien Fricker at
	<http://lists.gnu.org/archive/html/bug-bison/2007-02/msg00035.html>.
	* THANKS: Add Sebastien Fricker.
	* data/glr.c, data/push.c, data/yacc.c (yy_reduce_print): Implement.
	* doc/bison.texinfo (Tracing): Make it clearer that YYFPRINTF must
	accept a variable number of arguments.

2007-02-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* bootstrap: Remove occurrences of .#bootmp from lib/Makefile.

2007-02-13  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	* djgpp/config.bat: Adjustments concerning the use of autoconf 2.61.
	* djgpp/config.sed: Adjustments concerning the use of autoconf 2.61.
	* djgpp/config.site: Adjustments concerning the use of autoconf 2.61.

2007-02-11  Paul Eggert  <eggert@cs.ucla.edu>

	Undo my 2007-02-07 change, switching back to the c-strcase module
	introduced in the 2007-02-03 change.  Bruno Haible reported that
	the 2007-02-07 change would be dangerous in Turkish if we add a
	language whose name contains "i", since "i" is not lowercase "I"
	in Turkish.
	* bootstrap.conf (gnulib_modules): Add c-strcase.  Remove strcase.
	* lib/.cvsignore: Add c-ctype.c, c-ctype.h, c-strcase.h,
	c-strcasecomp.c, c-strncasecmp.c.  Remove strcasecmp.c, strncasecmp.c.
	* m4/.cvsignore: Remove strcase.m4.
	* src/getargs.c: Revert 2007-02-07 change, as follows.
	Include c-strcase.h.
	(language_argmatch): Use c_strcasecmp rather than strcasecmp.

2007-02-11  Bruno Haible  <bruno@clisp.org>

	Enable the Java related testsuite tests when the only Java compiler
	found is a gcj < 4.3.  Discussed at
	<http://lists.gnu.org/archive/html/bug-bison/2007-02/msg00016.html>.
	* configure.ac (gt_JAVACOMP): Don't specify a target_version.

2007-02-11  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/Makefile.am: Update copyright date.
	* data/push.c (yypull_parse): Report memory exhaustion and return 2 if
	yypstate_new returns NULL.
	(yypstate_new): Return NULL if malloc does.
	* src/reader.c (packgram): Move translation of rule actions from the
	beginning of packgram to...
	(check_and_convert_grammar): ... here right before packgram is invoked
	so it's easier to write more complete comments, and remove redundant
	code.

2007-02-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	As in semantic actions, make @$ in %initial-action, %destructor, and
	%printer imply %locations.
	* src/scan-code.l (SC_SYMBOL_ACTION): Set locations_flag = true when
	scanning @$.
	* tests/actions.at (AT_CHECK_ACTION_LOCATIONS): New macro supporting...
	(@$ in %initial-action implies %locations,
	@$ in %destructor implies %locations,
	@$ in %printer implies %locations): ... these new test cases.

2007-02-07  Paul Eggert  <eggert@cs.ucla.edu>

	Undo most of the 2007-02-03 change, switching to the strcase module
	now that gnulib strcase has been fixed.
	* bootstrap.conf (gnulib_modules): Remove c-strcase.  Add strcase.
	* lib/.cvsignore: Remove c-ctype.c, c-ctype.h, c-strcase.h,
	c-strcasecomp.c, c-strncasecmp.c.  Add strcasecmp.c, strncasecmp.c
	* m4/.cvsignore: Add strcase.m4.
	* src/getargs.c: Revert 2007-02-03 change, as follows.
	Don't include c-strcase.h.
	(language_argmatch): Use strcasecmp rather than c_strcasecmp.
	strcasecmp has "unspecified behavior" outside the POSIX locale,
	but it works fine in practice if at least one argument is ASCII,
	as is the case in Bison.

2007-02-07  Paolo Bonzini  <bonzini@gnu.org>

	* tests/java.at: Skip tests if only one of javac/java is present.
	Reported by Joel E. Denny.
	* tests/atlocal.in: Adjust copyright years.

2007-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* data/lalr1.java (Stack): Work around old verifiers that disallow
	access to the private fields of an inner class, from the outer class.
	We can make Stack's fields public because user code doesn't have access
	to the instance of Stack used by parse().  Reported by Paul Eggert.

2007-02-03  Paul Eggert  <eggert@cs.ucla.edu>

	* .cvsignore: Add javacomp.sh, javaexec.sh.  Is this really
	the right spot for these files?
	* bootstrap.conf (gnulib_modules): Add c-strcase.
	* lib/.cvsignore: Add c-ctype.c c-ctype.h, c-strcasecomp.c,
	c-strncasecmp.c.
	* src/getargs.c: Include c-strcase.h.
	(language_argmatch): Use c_strcasecmp rather than strcasecmp,
	to avoid unspecified behavior.

2007-02-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Decl Summary): Correct typo.

2007-01-30  Paolo Bonzini  <bonzini@gnu.org>

	* data/bison.m4 (b4_percent_define_flag_if): Don't treat 0 as false.
	Complain if the value does not match empty, "true" or "false".
	* data/c++.m4: Adjust default definitions of %define variables.
	* data/java.m4: Adjust default definitions of %define variables.
	* doc/bison.texinfo (Decl Summary): Adjust the %define entry according
	to above behavior.
	* tests/input.at (Boolean %define variables): Test new behavior.

2007-01-29  Paolo Bonzini  <bonzini@gnu.org>

	* NEWS: Mention java.
	* TODO: Remove things that are done.
	* bootstrap.conf: Add javacomp-script and javaexec-script.
	* configure.ac: Invoke gt_JAVACOMP and gt_JAVAEXEC.

	* data/Makefile.am: Add new files.
	* data/java-skel.m4: New.
	* data/java.m4: New.
	* data/lalr1.java: New.

	* doc/bison.texinfo: Put "A Complete C++ Example" under
	C++ Parsers.  Add Java Parsers.  Put C++ Parsers and Java Parsers
	under Other Languages.

	* src/getargs.c (valid_languages): Add Java.
	* src/getargs.h (struct bison_language): Update size of string fields.

	* tests/Makefile.am: Add java.at.
	* tests/atlocal.in: Add CONF_JAVA and CONF_JAVAC.
	* tests/java.at: New.
	* tests/testsuite.at: Include it.

2007-01-28  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up.
	* src/scan-skel.l (at_directive_perform): Add at_directive_argc and
	at_directive_argv arguments so these no longer have to be global
	variables.  Also, update the implementation for the following changes.
	(fail_for_at_directive_too_many_args,
	fail_for_at_directive_too_few_args): Add at_directive_name argument.
	(at_directive_name): Remove as at_directive_argv[0] will be used for
	this now.
	(AT_DIRECTIVE_ARGC_MAX): Increment to make space in at_directive_argv
	for the directive name.
	(at_directive_argc, at_directive_argv): Make these local within
	skel_lex instead of global.
	(INITIAL): Update directive start action for above changes.
	(SC_AT_DIRECTIVE_ARG): Rename to...
	(SC_AT_DIRECTIVE_ARGS): ... this, and update for above changes.
	(SC_AT_DIRECTIVE_SKIP_WS): Update.
	(scan_skel): Move yylex_destroy to...
	(skel_scanner_free): ... here.
	* tests/skeletons.at (installed skeleton file name): Rename to...
	(installed skeleton file names): ... this.

2007-01-27  Joel E. Denny  <jdenny@ces.clemson.edu>

	* ChangeLog: For changes in doc/bison.texinfo, consistently reference
	node names: say "Table of Symbols" not "Bison Symbols", and say "Decl
	Summary" not "Directives".
	* doc/bison.texinfo (Decl Summary, Calc++ Parser): Cross-reference the
	%code entry in "Decl Summary" rather than the one in "Table of Symbols"
	since the former is now the more complete one.
	(Prologue Alternatives): Likewise and do the same for %defines.
	(Table of Symbols): Add summary of %code, add summary of %define, and
	move full %code documentation to...
	(Decl Summary): ... here for consistency with other entries in these
	sections.
	Move %define entry in order to keep this list alphabetized.
	Reword %define entry a little to put less emphasis on the skeleton
	concept, which most users shouldn't have to think about.

2007-01-26  Paul Eggert  <eggert@cs.ucla.edu>

	Adjust to recent gnulib changes.
	* lib/.cvsignore: Remove stpcpy.h, strndup.h, strnlen.h.
	Add string.h, string_.h, unistd_.h, wchar_.h.
	* m4/.cvsignore: Add gnulib-common.m4, string_h.m4, wchar.m4.
	* src/system.h: Don't include <stpcpy.h>; this is now done by
	<string.h>.

2007-01-23  Paolo Bonzini  <bonzini@gnu.org>

	Simplify implementation of unqualified %code, implement macros for
	uniform treatment of boolean %define flags.  Document %define.
	* data/bison.m4 (b4_percent_define_ifdef, b4_percent_define_flag_if,
	b4_percent_code_ifdef): New.
	(b4_percent_code_get): Map unqualified %code to b4_percent_code().
	* data/c++.m4: Define default value for global_tokens_and_yystype.
	* data/glr.cc: Likewise.
	* data/location.cc: Use b4_percent_define_flag_if.

	* doc/bison.texinfo (Decl Summary): Document %define.

	* src/parse-gram.y (Unqualified %code): Change muscle name to
	b4_percent_code().
	(content.opt): Default to empty.

2007-01-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Implement support for relative and absolute skeleton file names.
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-12/msg00071.html>.
	* doc/bison.texinfo (Decl Summary): Document in %skeleton entry.
	(Bison Options): Document in --skeleton entry.
	* src/output.c (output_skeleton): Use strncpy rather than strcpy since
	full_skeleton can't necessarily hold all of pkgdatadir.
	If the specified skeleton file name contains a `/', don't prepend
	pkgdatadir.
	* src/parse-gram.y (prologue_declaration): If the specified skeleton
	file name contains a `/', prepend the grammar file directory.
	* tests/Makefile.am (TESTSUITE_AT): Add skeletons.at.
	* skeletons.at: New file.
	(relative skeleton file names): New test case.
	(installed skeleton file names): New test case.
	* tests/testsuite.at: Include skeletons.at.

	* bootstrap: Update copyright to 2007.

2007-01-17  Paolo Bonzini  <bonzini@gnu.org>

	* bootstrap: Remove occurrences of .#bootmp from the files.

2007-01-17  Akim Demaille  <akim@epita.fr>

	* doc/bison.texinfo (Calc++ Parser): Don't try to alias
	nonterminals.
	Use per-type %printer.

2007-01-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	* NEWS, data/c++-skel.m4, data/c++.m4, data/c-skel.m4, data/c.m4,
	data/glr.c, data/glr.cc, data/lalr1.cc, data/location.cc,
	djgpp/config.site, src/files.c, src/files.h, src/main.c,
	src/muscle_tab.c, src/muscle_tab.h, src/parse-gram.y, src/reader.h,
	src/scan-skel.h, src/scan-skel.l, tests/actions.at, tests/calc.at,
	tests/glr-regression.at, tests/input.at, tests/local.at,
	tests/output.at, tests/torture.at: Update copyright to 2007.

2007-01-16  Akim Demaille  <akim@epita.fr>

	* doc/bison.texinfo (Calc++ Parsing Driver): Let "parse" return an
	error code.
	(Calc++ Scanner): Exit with failure if we can't open the input
	file.
	Accept "-" standing for stdin.
	(Calc++ Top Level): Print the result only if the parsing was
	successful.

2007-01-16  Akim Demaille  <akim@epita.fr>

	* data/lalr1.cc (yy_reduce_print_): Add a missing end-of-line.

2007-01-15  Paolo Bonzini  <bonzini@gnu.org>
	and Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up %define and %code implementation in M4 some.  Most
	importantly, rename all related macros to be in the b4_percent_define
	and b4_percent_code namespaces.  Also, complete support for `.' in
	%define variable names and %code qualifiers.
	* data/bison.m4 (b4_check_user_names): Check for special
	"SKELETON-NAMESPACE(name)" macros instead of using two nested
	m4_foreach loops.
	(b4_get_percent_define, b4_get_percent_code): Rename to...
	(b4_percent_define_get, b4_percent_code_get): ... these.
	Extend documentation with examples.
	For SKELETON-NAMESPACE (as documented for b4_check_user_names), use
	b4_percent_define_skeleton_variables and
	b4_percent_code_skeleton_qualifiers.
	Expect any value for the %define variable `foo' to be stored in the
	macro named `b4_percent_define(foo)'; expect any %code blocks for the
	qualifier `foo' to be stored in a macro named `b4_percent_code(foo)';
	expect any unqualified %code blocks to be stored in a macro named
	`b4_percent_code_unqualified'.
	Use m4_indir so that %define variable names and %code qualifiers can
	contain `.', which is allowed by the grammar parser.
	(b4_percent_define_default): New macro to set a default value for a
	%define variable.
	(m4_wrap): Update wrapped code, and fix some underquoting.
	(b4_check_user_names_wrap): Update and define outside the m4_wrap.
	Expect grammar uses of %define variables and %code qualifiers to be
	defined in b4_percent_define_user_variables and
	b4_percent_code_user_qualifiers.
	* data/c++.m4: Use b4_percent_define_default rather than
	m4_define_default.  Fix some underquoting.  Skeleton usage of %define
	variable define_location_comparison now implies skeleton usage of
	%define variable filename_type.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/location.cc,
	data/push.c, data/yacc.c: Update macro names.
	* src/parse-gram.y (prologue_declaration, grammar_declaration): Update
	muscle names.

2007-01-14  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	DJGPP specific issues.

	* djgpp/config.site: Set ac_cv_path_mkdir to a sane DJGPP specific
	default.  Set gl_cv_absolute_wctype_h to a sane DJGPP specific default.

2007-01-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/glr-regression.at: Use AT_PARSER_CHECK rather than AT_CHECK to
	run parsers in all tests so that Valgrind is invoked during
	maintainer-check-valgrind.
	(Duplicate representation of merged trees): Free all semantic values.
	(Duplicated user destructor for lookahead): Likewise.

2007-01-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/local.at (AT_PARSER_CHECK): Add a PRE argument to specify a
	command-line prefix.
	* tests/torture.at (Exploding the Stack Size with Alloca): Stderr is
	ignored, so use that PRE to set --log-fd=1 in VALGRIND_OPTS so we don't
	miss Valgrind messages.
	(Exploding the Stack Size with Malloc): Likewise.

2007-01-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	Ignore YYSTACK_USE_ALLOCA for push parsers since the stacks can't be
	locals.  Reported by Juan Manuel Guerrero at
	<http://lists.gnu.org/archive/html/bug-bison/2007-01/msg00000.html>.
	* data/push.c: Enclose the #ifdef YYSTACK_USE_ALLOCA in b4_push_if.
	Fix some indentation also.
	* tests/torture.at (Exploding the Stack Size with Alloca): Add comment
	explaining this issue.

2007-01-09  Paolo Bonzini  <bonzini@gnu.org>
	and Joel E. Denny  <jdenny@ces.clemson.edu>

	Simplify union and prologue handling, and escape union and lex/parse
	params with digraphs.
	* data/bison.m4 (b4_pre_prologue, b4_post_prologue): Set their default
	values to the empty string since these are no longer guaranteed
	initialized by the front-end.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/push.c, data/yacc.c: Add
	braces around b4_user_stype since this is no longer done by the
	front-end.
	* src/files.c, src/files.h (pre_prologue_obstack,
	post_prologue_obstack): Remove.
	* src/muscle_tab.c (muscle_pair_list_grow): Don't duplicate header
	comments here.  Use MUSCLE_OBSTACK_SGROW so that values are escaped
	with digraphs.  This fixes lex params and parse params.
	* src/muscle_tab.h (muscle_pair_list_grow): Update comments.
	* src/output.c (prepare): Remove muscle insertion of the prologues.
	(output): Remove freeing of pre_prologue_obstack and
	post_prologue_obstack.
	* src/parse-gram.y (prologue_declaration): Use muscle_code_grow rather
	than prologue_augment for prologue parsing so you don't need prologue
	obstacks.
	(grammar_declaration): For %union RHS, use `braceless' instead of
	"{...}" so that braces are already stripped and code is escaped with
	digraphs.
	* src/reader.c (prologue_augment): Remove.
	(reader): Remove initialization of pre_prologue_obstack and
	post_prologue_obstack.
	* src/reader.h (prologue_augment): Remove.

	* data/c.m4: Remove stray parenthesis.

2007-01-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	Remove quotes from variables names in %define directives and from
	qualifiers in %code directives, and restrict the characters that are
	allowed in them to M4-friendly ones.  For %define, continue to support
	the quoted form as a deprecated feature.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2007-01/msg00023.html>.
	* NEWS (2.3a+): Add entry for the change to %define.  Update entry for
	%code.
	* doc/bison.texinfo (Prologue Alternatives): Update.
	(Decl Summary): In %defines entry, update mention of `%code requires'
	and `%code provides'.
	(C++ Location Values): Update %define uses.
	(Calc++ Parser Interface): Likewise.
	(Calc++ Parser): Likewise, and update `%code requires' uses.
	(Table of Symbols): Update %code documentation.
	* src/parse-gram.y (prologue_declaration): For %define variables, use
	`variable' instead of `STRING'.
	(grammar_declaration): For %code qualifiers, use `ID' instead of
	`STRING'.
	(variable): New nonterminal that takes an `ID' or a `STRING'.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Update %code
	and %define uses.
	* tests/calc.at (_AT_DATA_CALC_Y): Update %define use.
	* tests/input.at (Reject unused %code qualifiers): Update %code uses.
	(%define errors): Update %define uses.

2007-01-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/parse-gram.y (prologue_declaration): Use MUSCLE_INSERT_STRING
	instead of muscle_insert for %define values so that M4-special
	characters are replaced with digraphs.
	* tests/input.at (%define errors): Extend to check weird values.

2007-01-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	Instead of having skeletons declare all valid %define variables and
	%code qualifiers, provide macros that retrieve the associated values
	and build these lists automatically.  Thus Bison will now warn when a
	variable or qualifier is not used by the skeleton in the current
	invocation regardless of whether it might sometimes be used by that
	skeleton in other invocations.  Also, move all %define value macros to
	the b4_percent_define_ namespace, and remove the %define "NAME" {CODE}
	form, which is replaced by %code.
	* data/bison.m4 (b4_check_for_unrecognized_names): Rename to...
	(b4_check_user_names): ... this, and change the series of valid name
	arguments to a single list argument for names used in the skeleton
	similar to the existing list argument for names used in the grammar.
	Warn instead of complaining.
	(b4_get_percent_define, b4_get_percent_code): New to retrieve %define
	values and %code code, to format %code code properly, and to build
	lists of all %define variables and %code qualifiers used in the
	skeleton: b4_skeleton_percent_define_variables and
	b4_skeleton_percent_code_qualifiers.
	(b4_check_percent_define_variables, b4_check_percent_code_qualifiers):
	Remove, and...
	(m4_wrap): ... m4_wrap b4_check_user_names invocations instead so that
	the skeleton names lists can finish building first.  In place of
	b4_used_percent_define_variables and b4_used_percent_code_qualifiers,
	expect the lists b4_user_percent_define_variables and
	b4_user_percent_code_qualifiers.
	* data/c++.m4: Where setting default values for b4_parser_class_name,
	b4_location_type, b4_filename_type, b4_namespace, and
	b4_define_location_comparison, update their names to the
	b4_percent_define_ namespace.
	* data/glr.c: Don't use b4_check_percent_define_variables and
	b4_check_percent_code_qualifiers.  Use b4_get_percent_code.
	* data/glr.cc, data/lalr1.cc: Likewise, and use b4_get_percent_define.
	(b4_parser_class_name, b4_namespace): Define these using
	b4_get_percent_define for parser_class_name and namespace.
	* data/location.cc: Use b4_get_percent_define.
	* data/push.c: Don't use b4_check_percent_define_variables and
	b4_check_percent_code_qualifiers.  Use b4_get_percent_code.
	* data/yacc.c: Likewise, and don't call m4_exit in
	b4_use_push_for_pull_if or m4_wrap code will never execute.
	* src/muscle_tab.c, src/muscle_tab.h (muscle_grow_used_name_list):
	Rename to...
	(muscle_grow_user_name_list): ... this for consistency with the
	terminology used in bison.m4.
	* src/parse-gram.y (prologue_declaration): Prepend "percent_define_" to
	%define variable names, and rename muscle used_percent_define_variables
	to user_percent_define_variables.
	(grammar_declaration): Rename muscle used_percent_code_qualifiers to
	user_percent_code_qualifiers.
	(content): Remove.
	(content.opt): Replace content RHS with STRING RHS so %define "NAME"
	{CODE} form is no longer accepted.
	* tests/input.at (Reject bad %code qualifiers): Rename to...
	(Reject unused %code qualifiers): ... this, and update test output.
	(%define error): Update test output.

2007-01-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Check for unrecognized %define variables similar to checking for
	unrecognized %code qualifiers.  Check for redefined %define variables.
	* data/bison.m4 (b4_check_for_unrecognized_names): New macro that
	generalizes...
	(b4_check_percent_code_qualifiers): ... this, which now wraps it.
	(b4_check_percent_define_variables): New, also wraps it.
	* data/glr.c: Unless glr.cc is wrapping glr.c, declare no valid %define
	variables using b4_check_percent_define_variables.
	* data/glr.cc, data/lalr1.cc: Declare the valid %define variables as
	all those exercised in the test suite and all those listed in the
	`Default values' section of c++.m4.  Are there others?
	* data/push.c, data/yacc.c: Declare no valid %define variables.
	* src/muscle_tab.c, src/muscle_tab.h (muscle_find_const): New function,
	similar to muscle_find, but it works even when the muscle stores a
	const value.
	(muscle_grow_used_name_list): New function for constructing the used
	name list muscles that b4_check_for_unrecognized_names requires.
	* src/parse-gram.y (prologue_declaration): Warn if a variable is
	%define'd more than once.  Define the b4_used_percent_define_variables
	muscle with muscle_grow_used_name_list.
	(grammar_declaration): Abbreviate %code code with
	muscle_grow_used_name_list.
	* tests/input.at (%define errors): New.

2007-01-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	Provide warn_at, complain_at, and fatal_at function callbacks to the
	skeletons, and use this for %code qualifier complaints.
	* data/bison.m4 (b4_error_at): New, invoked by...
	(b4_warn_at, b4_complain_at, b4_fatal_at): ... these new macros to wrap
	the skeleton scanner's new @warn_at(...@), @complain_at(...@), and
	@fatal_at(...@) directives.
	(b4_check_percent_code_qualifiers): Rewrite to expect locations for
	qualifiers in b4_used_percent_code_qualifiers and to use
	b4_complain_at.
	* src/location.c, src/location.h (boundary_set_from_string): New global
	function.
	* src/muscle_tab.c, src/muscle_tab.h (muscle_boundary_grow): New global
	function.
	* src/parse-gram.y (grammar_declaration): Add locations for qualifiers
	to b4_used_percent_code_qualifiers.
	* src/scan-skel.l (fail_for_at_directive_too_few_args): New static
	function.
	(AT_DIRECTIVE_ARGC_MAX): Increase for boundary arguments.
	(lineno): Rename to...
	(out_lineno): ... this so I don't misunderstand it again.
	(SC_AT_DIRECTIVE_SKIP_WS): Don't increment out_lineno for newlines
	here; these newlines are in the input but not the output file.
	(SC_AT_DIRECTIVE_ARG): Likewise.  Extract directive execution to...
	(at_directive_perform): ... this new static function, and add handling
	of new @warn_at(...@), @complain_at(...@), and @fatal_at(...@)
	directives.
	* tests/input.at (Reject bad %code qualifiers): Update test output with
	locations and extend.

	* tests/output.at (Output file name: [, Output file name: ]): Remove
	bogus comment about these tests failing.

2007-01-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up b4_check_percent_code_qualifiers a little.
	* data/bison.m4 (b4_check_percent_code_qualifiers): Expect qualifiers
	in b4_used_percent_code_qualifiers to be double-M4-quoted.  Rewrite
	documentation and add examples.
	* src/parse-gram.y (grammar_declaration): Double-M4-quote those
	qualifiers here.

2007-01-05  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't use m4_divert since it makes m4_divert_push and m4_divert_pop
	unreliable -- especially when they're hidden inside another macro.
	* data/bison.m4, data/c++-skel.m4, data/c++.m4, data/c-skel.m4,
	data/c.m4: Remove m4_divert(-1).
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/location.cc,
	data/push.c, data/yacc.c: Likewise, and replace m4_divert(0) with
	m4_divert_push(0) and m4_divert_pop(0).
	* src/output.c (output_skeleton): Don't add an m4_divert_push(0) and
	an m4_wrap([m4_divert_pop(0)]) to the M4.  Diversion -1, which is
	pushed and popped by m4sugar, should be first on the stack.

	Provide warn, complain, and fatal function callbacks to the skeletons.
	This provides more flexibility than m4_fatal, improves the error
	message format, and captures messages for translation.  Discussed
	starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-12/msg00063.html>.
	* data/bison.m4 (b4_error): New, invoked by...
	(b4_warn, b4_complain, b4_fatal): ... these new macros to wrap the
	skeleton scanner's new @warn(...@), @complain(...@), and @fatal(...@)
	directives.  Because these M4 macros might be called when the current
	diversion is -1 or 0, m4_divert_push and m4_divert_pop is used; thus
	the previous removal of uses of m4_divert, which caused trouble.
	(b4_check_percent_code_qualifiers): Use b4_complain instead of
	m4_fatal to report unrecognized %code qualifiers.
	* data/c++-skel.m4: Use b4_complain instead of m4_fatal to report C++
	push parser requests.
	* data/glr.c: Use b4_complain instead of m4_fatal to report
	non-deterministic push parser requests.
	Update @output usage to @output(...@) form.
	* data/glr.cc, data/lalr1.cc: Use b4_fatal instead of m4_fatal to
	report missing %defines.  Update @output usage to @output(...@) form.
	* data/location.cc, data/push.c, data/yacc.c: Update @output usage to
	@output(...@) form.
	* src/main.c (main): Invoke skel_scanner_free.
	* src/scan-skel.h (skel_scanner_free): Prototype new function.
	* src/scan-skel.l (FLEX_NO_OBSTACK): Don't define; we now need the
	obstack_for_string from flex-scanner.h.
	(YY_DECL): Use to declare skel_lex static.
	(decode_at_digraphs): Remove; now handled in the new
	SC_AT_DIRECTIVE_ARG start condition.
	(fail_for_at_directive_too_many_args, fail_for_invalid_at): New static
	functions.
	(at_directive_name, AT_DIRECTIVE_ARGC_MAX, at_directive_argc,
	at_directive_argv): New static globals.
	(INITIAL): Use fail_for_invalid_at.
	Don't parse `@output file_name\n' or `@basename(...@)'.  Instead,
	recognize the start of a generalized `@directive(...@)' form and
	start...
	(SC_AT_DIRECTIVE_ARG): ... this new start condition to parse the
	directive args (using the new obstack_for_string), to decode the
	contained @ diagraphs, and to perform the directive.  It recognizes
	@basename(...@), @warn(...@), @complain(...@), @fatal(...@), and
	@output(...@).
	(SC_AT_DIRECTIVE_SKIP_WS): New start condition started by
	SC_AT_DIRECTIVE_ARG to skip whitespace after the argument delimiter,
	`@,'.
	(scan_skel): Initialize obstack_for_string on the first call.
	(skel_scanner_free): New function to free obstack_for_string.
	* tests/input.at (Reject bad %code qualifiers): Update test output.

2007-01-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Consolidate the 4 prologue alternative directives (%code, %requires,
	%provides, and %code-top) into a single %code directive with an
	optional qualifier field.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2007-01/msg00012.html>.
	* NEWS (2.3a+): Rewrite the existing entry for the prologue
	alternatives.
	* doc/bison.texinfo (Prologue Alternatives): Update.
	(Decl Summary): Update to %code "requires" and %code "provides".
	(Calc++ Parser): Update to %code "requires".
	(Table of Symbols): Remove entries for %requires, %provides, and
	%code-top.  Rewrite %code entry, and add a %code "QUALIFIER" entry.
	* data/bison.m4 (b4_user_provides, b4_user_requires): Remove as these
	are replaced by b4_percent_code_provides and b4_percent_code_requires,
	which are skeleton-specific.
	(b4_check_percent_code_qualifiers): New.  A skeleton can use this to
	declare what %code qualifiers it supports and to complain if any other
	qualifiers were used in the grammar.
	* data/glr.cc: Update to use b4_user_code([b4_percent_code_requires])
	and b4_user_code([b4_percent_code_provides]) in place of
	b4_user_requires and b4_user_provides.
	* data/glr.c, data/lalr1.cc, data/push.c, data/yacc.c: Likewise.
	Add b4_user_code([b4_percent_code_top]) and
	b4_user_code([b4_percent_code]).
	Invoke b4_check_percent_code_qualifiers.
	* src/parse-gram.y (PERCENT_CODE_TOP, PERCENT_PROVIDES,
	PERCENT_REQUIRES): Remove.
	(grammar_declaration): Remove RHS's for %code-top, %provides, and
	%requires.  Rewrite the %code RHS as the unqualified form defining the
	muscle b4_percent_code.  Add another RHS for the qualified %code form,
	which defines muscles of the form b4_percent_code_QUALIFIER and the
	b4_used_percent_code_qualifiers muscle.
	* src/scan-gram.l (PERCENT_CODE_TOP, PERCENT_PROVIDES,
	PERCENT_REQUIRES): Remove.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Update to use
	%code "requires" and %code "provides".
	* tests/input.at (Reject bad %code qualifiers): New.

2007-01-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Use the new code_props interface for destructors and printers.
	* src/symtab.h (symbol, semantic_type): Remove destructor_location and
	printer_location members, and change the type of the destructor and
	printer members to code_props.
	(symbol_destructor_set, symbol_destructor_get, symbol_printer_set,
	symbol_printer_get, semantic_type_destructor_set,
	semantic_type_printer_set, default_tagged_destructor_set,
	default_tagless_destructor_set, default_tagged_printer_set,
	default_tagless_printer_set): Use code_props in arguments and return
	types in place of char const * and location.
	(symbol_destructor_location_get, symbol_printer_location_get): Remove
	since the locations are now contained in the return of
	symbol_destructor_get and symbol_printer_get.
	* src/output.c (symbol_destructors_output, symbol_printers_output):
	Replace with...
	(symbol_code_props_output): ... this to eliminate duplicate code.
	(output_skeleton): Update to use symbol_code_props_output.
	* src/reader.c (symbol_should_be_used): Update use of
	symbol_destructor_get.
	* src/symlist.c (symbol_list_destructor_set, symbol_list_printer_set):
	Update uses of the various _destructor_set and _printer_set functions.
	* src/symtab.c: (default_tagged_destructor_location,
	default_tagless_destructor_location, default_tagged_printer_location,
	default_tagless_printer_location): Remove since we...
	(default_tagged_destructor, default_tagless_destructor,
	default_tagged_printer, default_tagless_printer): ... change the type
	of these to code_props.
	(symbol_new, semantic_type_new, symbol_destructor_set,
	semantic_type_destructor_set, symbol_destructor_get,
	symbol_printer_set, semantic_type_printer_set, symbol_printer_get,
	symbol_check_alias_consistency, default_tagged_destructor_set,
	default_tagless_destructor_set, default_tagged_printer_set,
	default_tagless_printer_set): Update.
	(symbol_destructor_location_get, symbol_printer_location_get): Remove.
	(SYMBOL_CODE_PRINT): New similar to SYMBOL_ATTR_PRINT but for
	code_props members.
	(symbol_print): Use SYMBOL_CODE_PRINT.

2007-01-03  Joel E. Denny  <jdenny@ces.clemson.edu>

	Use the new code_props interface for rule actions.
	* src/symlist.h (symbol_list): Replace action, action_location, and
	used members with a code_props action_props member.
	* src/reader.c (symbol_should_be_used, grammar_rule_check,
	grammar_midrule_action, grammar_current_rule_merge_set,
	grammar_current_rule_symbol_append, packgram): Update.
	* src/scan-code.h (translate_rule_action): Remove, no longer used.
	* src/scan-code.l (handle_action_dollar): Update.
	(translate_rule_action): Remove, no longer used.
	* src/symlist.c (symbol_list_sym_new, symbol_list_syms_print): Update.

2007-01-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Use the new code_props interface in parse-gram.y.
	* src/parse-gram.y (prologue_declaration, braceless, epilogue.opt):
	Update all uses of translate_* functions to use the new code_props
	interface and to use gram_scanner_last_string_free and
	code_scanner_last_string_free where possible.
	(grammar_declaration): symbol_list_destructor_set and
	symbol_list_printer_set now perform the translation, so don't do it
	here.  Use gram_scanner_last_string_free where possible.
	* src/scan-code.h, src/scan-code.l (translate_symbol_action,
	translate_code): Remove, no longer used.
	* src/symlist.h, src/symlist.c (symbol_list_destructor_set,
	symbol_list_printer_set): Perform code translation here rather than
	depending on the caller to do so.

	* src/symlist.h (struct symbol_list): Correct some documentation typos.
	* src/scan-gram.h (gram_last_string): Remove declaration.
	* src/scan-gram.l (last_string): Declare it static.

2007-01-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Encapsulate code properties and related functionality for the various
	destructors, printers, and actions into a code_props structure and
	interface.  This patch merely implements code_props in scan-code.h and
	scan-code.l.  Future patches will rewrite other modules to use it.
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-11/msg00020.html>.
	* src/location.h (EMPTY_LOCATION_INIT): Define so that it's easier to
	consistently initialize const structs that have an empty location
	field.
	* src/location.c (empty_location): Initialize with EMPTY_LOCATION_INIT
	to ensure consistency.
	* src/scan-code.h (code_props): New structure.
	(code_props_none_init, CODE_PROPS_NONE_INIT, code_props_none): New
	function, macro, and const global variable for initializing a
	code_props with no code.
	(code_props_plain_init, code_props_symbol_action_init,
	code_props_rule_action_init, code_props_translate_code): The rest of
	the new code_props functional interface.  Among other things, the init
	functions set the code_props kind field so that
	code_props_translate_code will know whether to behave like
	translate_symbol_action, translate_rule_action, or translate_code.
	These old translate functions must remain until all other modules are
	updated to use the new code_props interface.
	(code_scanner_last_string_free): New function similar to
	gram_scanner_last_string_free.
	(code_scanner_free): Add documentation.
	* src/scan-code.l: Implement the new interface.
	(code_lex): Make it static, add a code_props* argument, and remove the
	rule argument.
	(last_string): New static global similar to the one in scan-gram.l.
	(SC_RULE_ACTION): Update to use the code_props* argument to code_lex
	instead of rule.
	(SC_SYMBOL_ACTION): For $$, set the is_value_used member of the
	code_props since Bison may one day use this information for destructors
	and printers.
	(<*><<EOF>>): Use STRING_FINISH so that last_string is set.
	(handle_action_dollar): Use symbol_list_n_get and set used flag
	directly since symbol_list_n_used_set is removed.
	(translate_action): Add a code_props* argument and remove the rule,
	action, and location arguments.  Pass the code_props* on to code_lex.
	(translate_rule_action, translate_symbol_action, translate_code):
	Rewrite as wrappers around the new code_props interface.
	* src/symlist.h, src/symlist.c (symbol_list_n_used_set): Remove since
	it would eventually need to break the encapsulation of code_props.

2007-01-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	* etc/.cvsignore: New.

2007-01-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add maintainer-push-check to run maintainer-check using push parsing in
	place of pull parsing where available.
	* Makefile.am (maintainer-push-check): New.
	* data/bison.m4 (b4_use_push_for_pull_if): New.
	* data/push.c: Redefine b4_push_if and b4_use_push_for_pull_if
	appropriately based on their existing values.
	(yypush_parse): Don't print push-parser-specific diagnostics if push
	parsing is being used in place of pull parsing.
	* data/yacc.c: If push parsing should replace pull parsing, redirect to
	push.c.
	* src/output.c (prepare): Check BISON_USE_PUSH_FOR_PULL environment
	variable, and insert b4_use_push_for_pull_flag into muscles.
	* tests/Makefile.am (maintainer-push-check): New.

2006-12-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/push.c (yypush_parse): Set yynew = 1 at the end of a parse
	(whether successful or failed) so that yypush_parse can be invoked
	again to start a new parse using the same yypstate.
	* tests/torture.at (AT_DATA_STACK_TORTURE): For push mode, extend to
	check multiple yypull_parse invocations on the same yypstate.  For pull
	mode, extend to check multiple yyparse invocations.
	(Exploding the Stack Size with Alloca): Extend to try with
	%push-pull-parser.
	(Exploding the Stack Size with Malloc): Likewise.

	* tests/calc.at (Simple LALR Calculator): Don't specify
	%skeleton "push.c" since %push-pull-parser implies that now.
	* tests/headers.at (export YYLTYPE): Don't check for the push
	declarations.  Otherwise, this test case can't be used to see if push
	mode can truly emulate pull mode.
	* tests/input.at (Torturing the Scanner): Likewise.
	* tests/local.at (AT_YACC_OR_PUSH_IF, AT_PUSH_IF): Remove.
	(AT_YYERROR_SEES_LOC_IF): Rather than AT_YACC_OR_PUSH_IF, use
	AT_YACC_IF, which now includes the case of push mode since %skeleton
	need not be used for push mode.  This will be more intuitive once
	push.c is renamed to yacc.c.

2006-12-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	For push mode, convert yyparse from a macro to a function, invoke yylex
	instead of passing a yylexp argument to yypull_parse, and don't
	generate yypull_parse or yyparse unless %push-pull-parser is declared.
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-12/msg00163.html>.
	* data/bison.m4 (b4_pull_if): New.
	* data/c.m4 (b4_identification): Define YYPULL similar to YYPUSH.
	* data/push.c: Improve M4 quoting a little.
	(b4_generate_macro_args, b4_parenthesize): Remove.
	(yyparse): If there's a b4_prefix, #define this to b4_prefix[parse]
	any time a pull parser is requested.
	Don't #define this as a wrapper around yypull_parse.  Instead, when
	both push and pull are requested, make it a function that does that
	same thing.
	(yypull_parse): If there's a b4_prefix, #define this to
	b4_prefix[pull_parse] when both push and pull are requested.
	Don't define this as a function unless both push and pull are
	requested.
	Remove the yylexp argument and hard-code yylex invocation instead.
	* etc/bench.pl.in (bench_grammar): Use %push-pull-parser instead of
	%push-parser.
	* src/getargs.c (pull_parser): New global initialized to true.
	* getargs.h (pull_parser): extern it.
	* src/output.c (prepare): Insert pull_flag muscle.
	* src/parse-gram.y (PERCENT_PUSH_PULL_PARSER): New token.
	(prologue_declaration): Set both push_parser and pull_parser = true for
	%push-pull-parser.  Set push_parser = true and pull_parser = false for
	%push-parser.
	* src/scan-gram.l: Don't accept %push_parser as an alternative to
	%push-parser since there's no backward-compatibility concern here.
	Scan %push-pull-parser.
	* tests/calc.at (Simple LALR(1) Calculator): Use %push-pull-parser
	instead of %push-parser.
	* tests/headers.at (export YYLTYPE): Make yylex static, and don't
	prototype it in the module that calls yyparse.
	* tests/input.at (Torturing the Scanner): Likewise.
	* tests/local.at (AT_PUSH_IF): Check for %push-pull-parser as well.

2006-12-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	Update etc/bench.pl.  Optimize push mode a little (the yyn change
	deserves most of the credit).
	* Makefile.am (SUBDIRS): Add etc subdirectory.
	* configure.ac (AC_CONFIG_FILES): Add etc/bench.pl and etc/Makefile.
	* data/push.c (b4_declare_parser_state_variables): Move yyn, yyresult,
	yytoken, yyval, and yyloc declarations to...
	(yyparse or yypush_parse): ... here to improve performance.  For
	yypush_parse invocations after the first, be sure to assign yyn its old
	value again.
	(yypstate_new): Don't bother initializing the yyresult field since the
	initial value isn't used.
	(yyn, yyresult, yytoken, yyval, yyloc): For each NAME in this list,
	remove the #define that, in push mode, set it to yyps->NAME.
	* etc/Makefile.am: New.
	* etc/bench.pl: Remove and build it instead from...
	* etc/bench.pl.in: ... this new file.  Use @abs_top_builddir@ to invoke
	"tests/bison" from the build directory by default rather than just
	invoking "bison" from $PATH.
	(calc_grammar): Update push parser code: don't declare yylval globally,
	don't define yyparse_wrapper, and don't #define yyparse.
	(bench_grammar): Update to check all working combinations of yacc.c,
	push.c, impure, pure, pull, and push.

2006-12-25  Joel E. Denny  <jdenny@ces.clemson.edu>

	For push mode, add pull wrappers around yypush_parse.
	* data/push.c: (b4_generate_macro_args, b4_parenthesize): New macros.
	(yypull_parse): New function wrapping yypush_parse.
	(yyparse): New #define wrapping yypull_parse.
	* tests/calc.at (_AT_DATA_CALC_Y): Call yyparse even when %push-parser
	is declared.
	* tests/headers.at (export YYLTYPE): Make yylex global.  For push mode,
	prototype yylex in the module that calls yyparse, and don't prototype
	yyparse there.  Otherwise, the yyparse expansion won't compile.
	* tests/input.at (Torturing the Scanner): Likewise.

2006-12-25  Joel E. Denny  <jdenny@ces.clemson.edu>

	Enable push parsers to operate in impure mode.  Thus, %push-parser no
	longer implies %pure-parser.  The point of this change is to move
	towards being able to test the push parser code by running the entire
	test suite as if %push-parser had been declared.
	* data/push.c (yypush_parse): For impure mode, remove the
	yypushed_char, yypushed_val, and yypushed_loc arguments.
	Instead, declare these as local variables initialized to the global
	yychar, yylval, and yylloc.
	For the first yypush_parse invocation only, restore the initial values
	of these global variables when it's time to read a token since they
	have been overwritten.
	* src/parse-gram.y (prologue_declaration): Don't set pure_parser for
	%push-parser.
	* tests/calc.at (Simple LALR(1) Calculator): Always declare
	%pure-parser along with %push-parser since this test case was designed
	for pure push parsers.
	* tests/local.at (AT_PURE_OR_PUSH_IF): Remove unused.
	(AT_YACC_OR_PUSH_IF): New.
	(AT_YYERROR_SEES_LOC_IF): Fix enough that the test suite passes, but
	add a note that it's still wrong for some cases (as it has been for a
	while).
	(AT_PURE_LEX_IF): Use AT_PURE_IF instead of AT_PURE_OR_PUSH_IF since
	%push-parser no longer implies %pure-parser.

2006-12-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Remove some unnecessary differences between the pull parser code and
	the push parser code.  This patch enables yynerrs in push mode.
	* data/push.c: Reformat M4 a little.
	(b4_yyerror_range): Remove and convert all uses to just yyerror_range.
	(b4_declare_scanner_communication_variables): Don't omit yynerrs just
	because push mode is on.  Instead, if pure mode is on, move yynerrs
	to...
	(b4_declare_parser_state_variables): ... here.
	(yynerrs, yyerror_range): For push mode, #define each NAME in this list
	to yyps->NAME so it can be used in yypush_parse.
	(yypush_parse): Don't omit uses of yynerrs in push mode.

2006-12-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix bug such that the first pushed token's value and location are
	sometimes overwritten (sometimes by %initial-action) before being used.
	* data/push.c (yypush_parse): Rename arguments yynchar, yynlval, and
	yynlloc to yypushed_char, yypushed_val, and yypushed_loc for clarity.
	For the first yypush_parse invocation, initialize yychar to YYEMPTY to
	more closely mimic the pull parser logic.
	Don't copy the pushed token to yychar, yylval, and yylloc until it's
	time to read a token, which is after any initialization of yylval and
	yylloc.
	(gottoken): Rename label to...
	(yyread_pushed_token): ... for clarity and to avoid infringing on the
	user namespace.

2006-12-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Rearrange initialization of the parser state variables so that the
	skeleton doesn't have to have a copy for pull mode and another for push
	mode.  This patch also fixes at least a bug such that yylloc was not
	initialized (with b4_location_initial_line and
	b4_location_initial_column) upon calling yypush_parse.  However, that
	initialization now overwrites the first token's location;
	%initial-action assigning @$ already did the same thing, and both bugs
	will be fixed in a later patch.
	* data/push.c (b4_yyssa): Remove and convert all uses to just yyssa.
	(b4_declare_parser_state_variables): Remove initialization of yytoken,
	yyss, yyvs, yyls, and yystacksize.
	(yypstate_new): Remove initialization of some yypstate fields: yystate,
	yyerrstatus, yytoken, yyss, yyvs, yyls, yystacksize, yyssp, yyvsp, and
	yylsp.
	(yyssa, yyvsa, yylsa): For push mode, #define each NAME in this list to
	yyps->NAME so it can be used in yypush_parse.
	(yyparse or yypush_parse): For yypush_parse, don't print the
	"Starting parse" diagnostic for invocations after the first.
	Add initialization of yytoken, yyss, yyvs, yyls, and yystacksize; for
	yypush_parse, only do it for the first invocation.
	Allow yystate, yyerrstatus, yyssp, yyvsp, yylsp, and yylloc
	initialization to occur in yypush_parse but only on the first
	invocation.

2006-12-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/push.c: Add CPP guards around push parser declarations in both
	the header and the code file.
	In the code file, move the push parser declarations to the same place
	they appear in the header file.
	Clean up the M4 some, especially the inconsistent underquoting in
	some b4_c_function_def and b4_c_function_decl uses.

2006-12-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	Encapsulate the push parser state variables into an M4 macro so the
	push skeleton doesn't have to list them again for pull mode's yyparse.
	For push mode, remove yypush_parse's local equivalents of these
	variables to eliminate unnecessary copying between the two sets at
	run-time.  This patch also fixes at least a bug related to multiple
	%initial-action invocations in push mode.
	* data/push.c (b4_declare_parser_variables): Rename to...
	(b4_declare_scanner_communication_variables): ... this for clarity and
	update both uses.
	(b4_declare_yyparse_variables): Remove and move its contents to the one
	spot where it was invoked.
	(b4_declare_parser_state_variables): New macro containing the parser
	state variables required by push mode.
	(struct yypstate): Replace all fields but yynew with
	b4_declare_parser_state_variables.
	(yystate, yyn, yyresult, yyerrstatus, yytoken, yyss, yyssp, yyvs,
	yyvsp, yyls, yylsp, yystacksize, yyval, yyloc): For push mode, #define
	each NAME in this list to yyps->NAME so it can be used in yypush_parse.
	(yyparse or yypush_parse): For yyparse in pull mode, replace local
	parser state variable declarations with
	b4_declare_parser_state_variables.
	Don't initialize parser state variables when calling yypush_parse since
	yypstate_new already does that.
	Invoke the user's initial action only upon the first yypush_parse
	invocation.
	Remove all code that copies between the local parser state variables
	and the yypstate.

2006-12-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/push.c (union yyalloc): Rename yyss, yyvs, and yyls fields to
	prevent a name collision in a future patch where these names will
	sometimes be #define'd.
	(YYSTACK_RELOCATE): Add an argument to select a union yyalloc field
	since it no longer has the same name as the existing argument.
	(yyparse or yypush_parse): Update all uses of YYSTACK_RELOCATE.

2006-12-19  Paolo Bonzini  <bonzini@gnu.org>
	and Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Decl Summary): In the %language entry, mention
	that the argument is case-insensitive, and there's no `=' here.
	For the %skeleton entry, mention that %language is better.
	(Bison Options): Likewise for --language and --skeleton.  Move the
	--skeleton entry so that the `Tuning the parser' section is sorted
	alphabetically on long options.
	(C++ Bison Interface): Don't use the word skeleton.  Don't explain the
	%language directive in detail here; cross-reference the %language
	documentation instead.
	(Calc++ Parser): Use `%require "@value{VERSION}"' rather than
	`%require "2.3b"' so that the example is always up-to-date.
	(Table of Symbols): Add entries for %language and %skeleton.
	* examples/extexi (normalize): Instead of replacing every %require
	argument with the current Bison version, just substitute for
	`@value{VERSION}'.  This guarantees that we're testing what actually
	appears in the documentation.
	* examples/calc++/Makefile.am ($(calc_extracted)): Use `$(VERSION)'
	rather than `@VERSION@'.

2006-12-18  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Reword the %language news a bit, and put it earlier.

	* src/getargs.c (skeleton_arg): Last arg is now location const *.
	Rewrite to simplify the logic.
	(language_argmatch): Likewise.
	(program_name): We now own this var.
	* src/getargs.h (struct bison_language): Use char[] rather than
	const char *.

	* doc/bison.texinfo (Decl Summary, Bison Options): Don't claim
	Java is supported.
	* src/complain.c (program_name): Remove decl; no longer needed.
	* src/main.c (program_name): Remove; now belongs to getargs.

2006-12-18  Paolo Bonzini  <bonzini@gnu.org>

	* NEWS: Document %language.

	* data/Makefile.am (dist_pkgdata_DATA): Add c-skel.m4, c++-skel.m4.

	* data/c-skel.m4, data/c++-skel.m4: New files.
	* data/glr.c: Complain on push parsers.

	* doc/bison.texinfo (C++ Parser Interface): Prefer %language
	over %skeleton.
	(Decl Summary): Document %language and %skeleton.
	(Command line): Document -L.

	* examples/extexi: Rewrite %require directive.
	* examples/calc++/Makefile.am: Pass VERSION to extexi.

	* src/files.c (compute_exts_from_gc): Look in language structure
	for .y extension.
	(compute_file_name_parts): Check whether .tab should be added.
	* src/getargs.c (valid_languages, skeleton_prio, language_prio):
	(language, skeleton_arg, language_argmatch): New.
	(long_options): Add --language.
	(getargs): Use skeleton_arg, add -L/--language.
	* src/getargs.h: Include location.h.
	(struct bison_language, language, skeleton_arg, language_argmatch): New.
	* src/output.c (prepare): Pick default skeleton from struct language.
	Don't dispatch C skeletons here.
	* src/parse-gram.y (PERCENT_LANGUAGE): New.
	(prologue_declaration): Add "%language" rule, use skeleton_arg.
	* src/scan-gram.l ("%language"): New rule.

	* tests/calc.at: Test %skeleton and %language.
	* tests/local.at (AT_SKEL_CC_IF): Look for %language.
	(AT_GLR_IF): Look for %skeleton "glr.cc".
	(AT_LALR1_CC_IF, AT_GLR_CC_IF): Rewrite.
	(AT_YACC_IF): Reject %language.

2006-12-18  Paul Eggert  <eggert@cs.ucla.edu>

	* src/symtab.h (struct semantic_type): Remove the tag 'semantic_type',
	since it wasn't used; only the typedef name 'semantic_type' is needed.
	Also, omit trailing white space.

	* bootstrap: Sync from coreutils.
	(gnulib_extra_files): Add build-aux/announce.gen.
	(slurp): Adjust .gitignore files like .cvsignore files.
	* build-aux/announce-gen: Remove from CVS, since bootstrap
	now creates this.

2006-12-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	Make %push-parser imply %pure-parser.  This fixes several bugs; see
	<http://lists.gnu.org/archive/html/bison-patches/2006-12/msg00148.html>.
	* src/parse-gram.y (prologue_declaration): For %push-parser, also set
	pure_parser = true.
	* data/push.c: Don't bother testing b4_push_if when deciding whether
	to expand b4_declare_parser_variables globally.
	(yypush_parse): Likewise in here.

	* data/push.c (yypush_parse): Add b4_parse_param to arguments.
	(yy_reduce_print): Reformat M4 for readability.

2006-12-15  Bob Rossi  <bob@brasko.net>
	and Joel Denny  <jdenny@ces.clemson.edu>

	* data/push.c (yypstate): Add typedef, and update all uses of
	struct yypstate to just yypstate.
	* tests/calc.at (_AT_DATA_CALC_Y): Update here as well.

2006-12-14  Bob Rossi  <bob@brasko.net>

	* data/push.c (yypush_parse): Declare prototype regardless of
	%locations option.

2006-12-14  Bob Rossi  <bob@brasko.net>

	* data/push.c (yyparse): Remove the prototype and the #define when in
	push-parser mode.

2006-12-13  Bob Rossi  <bob@brasko.net>

	* data/push.c (yypstate_init): Rename to...
	(yypstate_new): ... this and use b4_c_function_def.
	(yypstate_delete): New.
	(yypush_parse): Change parameters yynval and yynlloc to be const.
	* tests/calc.at (_AT_DATA_CALC_Y): Use new yypstate_new and
	yypstate_delete functions.

2006-12-13  Joel E. Denny  <jdenny@ces.clemson.edu>

	* configure.ac (AC_PREREQ): Require Autoconf 2.61 because of our
	strange test case titles.  Reported by Bob Rossi.

2006-12-13  Paul Eggert  <eggert@cs.ucla.edu>

	* TODO: Add pointer to Sylvain Schmitz's work on static detection
	of potential ambiguities in GLR grammars.

2006-12-12  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/testsuite.at (AT_CHECK): When checking if $1 starts with
	`bison ', use m4_index instead of m4_substr since chopping up a string
	containing M4-special characters causes problems here.

	Fix a couple of bugs related to special characters in user-specified
	file names, and make it easier for skeletons to compute output file
	names with the same file name prefix as Bison-computed output file
	names.
	* data/glr.cc, data/push.c, data/yacc.c: In @output, use
	b4_parser_file_name and b4_spec_defines_file instead of
	@output_parser_name@ and @output_header_name@, which are now redundant.
	* data/glr.c, data/lalr1.cc: Likewise.  Also, in header #include's, use
	b4_parser_file_name, b4_spec_defines_file, and the new
	@basename(FILENAME@) instead of @output_parser_name@ and
	@output_header_name@, which inappropriately escaped the file names as
	C string literals.
	* src/files.c (all_but_ext): Remove static qualifier.
	(compute_output_file_names): Move `free (all_but_ext)' to...
	(output_file_names_free): ... here since all_but_ext is needed later.
	* src/files.h (all_but_ext): Extern.
	* src/muscle_tab.h (MUSCLE_INSERT_STRING_RAW): New macro that does
	exactly what MUSCLE_INSERT_STRING used to do.
	(MUSCLE_INSERT_STRING): Use MUSCLE_OBSTACK_SGROW so that M4-special
	characters are escaped properly.
	* src/output.c (prepare): Define muscle file_name_all_but_ext as
	all_but_ext.
	For pkgdatadir muscle, maintain previous functionality by using
	MUSCLE_INSERT_STRING_RAW instead of MUSCLE_INSERT_STRING.  The problem
	is that b4_pkgdatadir is used inside m4_include in the skeletons, so
	digraphs would never be expanded.  Hopefully no one has M4-special
	characters in his Bison installation path.
	* src/scan-skel.l: Don't parse @output_header_name@ and
	@output_parser_name@ anymore since they're now redundant.
	In @output, use decode_at_digraphs.
	Parse a new @basename command that invokes last_component.
	(decode_at_digraphs): New.
	(BASE_QPUTS): Remove unused.
	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): New macro.
	(Output file name): New tests.

2006-12-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	Warn about output files that are generated by the skeletons and that
	conflict with other output files.
	* data/glr.c: Don't generate the header file here when glr.cc does.
	* src/files.c (file_names, file_names_count): New static globals.
	(compute_output_file_names): Invoke output_file_name_check for files
	not generated by the skeletons and remove existing checks.
	(output_file_name_check): New function that warns about conflicting
	output file names.
	(output_file_names_free): Free file_names.
	* src/files.h (output_file_name_check): Declare.
	* src/scan-skel.l: Invoke output_file_name_check for files generated by
	the skeletons.
	* tests/output.at (AT_CHECK_CONFLICTING_OUTPUT): New.
	(Conflicting output files): New tests.

2006-12-09  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>

	* doc/bison.texinfo: Fix a couple of typos.

2006-12-08  Bob Rossi  <bob@brasko.net>

	* data/push.c: (yypvarsinit, yypvars, struct yypvars, yypushparse):
	Rename to...
	(yypstate_init, yypstate, struct yypstate, yypush_parse): ... these and
	update all uses.
	(b4_yyssa, b4_yyerror_range, yypstate_init): Rename pv to yyps.
	(yypush_parse): Rename yypvars argument to yyps and remove redundant
	local pv.
	(yypstate_init, yypush_parse): Declare in Bison-generated header file.
	* tests/calc.at (_AT_DATA_CALC_Y): Use newly named functions.

2006-12-07  Bob Rossi  <bob@brasko.net>
	and Joel Denny  <jdenny@ces.clemson.edu>

	* data/push.c (yypvarsinit): Change return type from void* to struct
	yypvars*. No longer cast to void* on return.
	(struct yypvars): Remove yylen since it need not be remembered between
	yypushparse invocations.
	(yypushparse): Don't copy between yylen and pv->yylen.

2006-12-05  Bob Rossi  <bob@brasko.net>

	* data/push.c (yychar_set, yylval_set, yylloc_set): Delete.
	(yypushparse): Add yynchar, yynlval, yynlloc parameters.
	(b4_declare_parser_variables): Do not declare yynerrs for push mode.
	(struct yypvars): Remove b4_declare_parser_variables.
	(yypvarsinit): Remove init code for removed variables.
	(global scope): Do not declare b4_declare_parser_variables if
	push or pure mode.
	(yypushparse): Add b4_declare_parser_variables.
	Init new local variables, and remove init code for removed
	yypvars variables.
	(yyparse): Delete.
	* tests/calc.at (_AT_DATA_CALC_Y): Call yypushparse for push mode
	and yyparse for other modes.
	(AT_CHECK_CALC_LALR): Added '%skeleton "push.c"' for push tests.
	* tests/local.at (AT_PUSH_IF, AT_PURE_OR_PUSH_IF): Added.
	(AT_YYERROR_SEES_LOC_IF): push-parser makes this false.
	(AT_PURE_LEX_IF): True if pure or push parser.

2006-12-05  Joel E. Denny  <jdenny@ces.clemson.edu>

	Document Yacc prologue alternatives and default %destructor's and
	%printer's as experimental.  Don't mention Java yet.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-12/msg00002.html>.
	* NEWS (2.3a+): Say they're experimental.  Remove any mention of Java.
	(2.3a): Annotate this entry to say the old forms of these features were
	also experimental.
	* doc/bison.texinfo (Prologue Alternatives, Freeing Discarded Symbols,
	Table of Symbols): Say they're experimental.  Comment out any mention
	of Java (we'll want this back eventually).

2006-12-01  Joel E. Denny  <jdenny@ces.clemson.edu>

	Support a file name argument to %defines.  Deprecate `=' in
	%file-prefix, %name-prefix, and %output.  Discussed at
	<http://lists.gnu.org/archive/html/help-bison/2006-09/msg00001.html>.
	* NEWS (2.3a+): Mention.
	* doc/bison.texinfo (Decl Summary, Table of Symbols): Add entry for new
	form of %defines, and remove `=' from entries for %file-prefix,
	%name-prefix, and %output.
	* src/parse-gram.y (prologue_declaration): Implement.
	* tests/calc.at (Simple LALR Calculator, Simple GLR Calculator, Simple
	LALR1 C++ Calculator, Simple GLR C++ Calculator): Remove the `=' from
	all but one occurrence of %name-prefix.
	* tests/headers.at (export YYLTYPE): Remove the `=' from %name-prefix.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Likewise.
	* tests/output.at (AT_CHECK_OUTPUT): Remove the `=' from all but one
	occurrence of each of %file-prefix and %output.  Add check for %defines
	with argument.
	* tests/reduce.at (Useless Terminals, Useless Nonterminals,
	Useless Rules, Reduced Automaton, Underivable Rules, Empty Language):
	Remove the `=' from %output.

2006-11-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't escape $ in test case titles since Autoconf 2.61 now does that
	correctly.
	* tests/actions.at (Default %printer and %destructor are not for error
	or $undefined): Here.
	(Default %printer and %destructor are not for $accept): Here.
	* tests/input.at (Invalid $n and @n): Here.

2006-11-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Rename <!> to <>.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-11/msg00039.html>.
	* NEWS (2.3a+): Update.
	* doc/bison.texinfo (Freeing Discarded Symbols, Table of Symbols):
	Update.
	* src/parse-gram.y (TYPE_TAG_NONE, generic_symlist_item): Implement.
	* src/scan-gram.l (INITIAL): Implement.
	* src/symlist.c (symbol_list_default_tagless_new): Update comment.
	* src/symlist.h (symbol_list, symbol_list_default_tagless_new): Update
	comment.
	* tests/actions.at (Default tagless %printer and %destructor,
	Default tagged and per-type %printer and %destructor,
	Default %printer and %destructor are not for error or $undefined,
	Default %printer and %destructor are not for $accept,
	Default %printer and %destructor for mid-rule values): Update.
	* tests/input.at (Default %printer and %destructor redeclared,
	Unused values with default %destructor): Update.

2006-11-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't let %prec take a nonterminal.
	* src/reader.c (grammar_current_rule_prec_set): Make the %prec symbol a
	token.
	* tests/input.at (%prec takes a token): New test checking that %prec
	won't take a nonterminal.

2006-11-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/testsuite.at (AT_CHECK): Don't miss an exit value of 0 because
	it was double-quoted.
	* src/Makefile.am (YACC): Use --warnings=all,error so that Bison's own
	grammar is maintained with Bison's highest standards.
	* src/getargs.c: Fix some typos in Doxygen comments.

2006-11-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix memory leaks in scanners generated by at least Flex 2.5.9 and
	later.  Reported by Paul Eggert in
	<http://lists.gnu.org/archive/html/bison-patches/2006-11/msg00014.html>.
	* src/flex-scanner.h (yylex_destroy): Define for Flex before 2.5.9.
	* src/scan-code.l (translate_action): Don't bother invoking
	yy_delete_buffer (YY_CURRENT_BUFFER) before creating the first buffer.
	(code_scanner_free): Instead of invoking
	yy_delete_buffer (YY_CURRENT_BUFFER) directly, invoke yylex_destroy,
	which frees more.
	* src/scan-gram.l (gram_scanner_free): Likewise.
	* src/scan-skel.l (scan_skel): Likewise.

2006-11-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/files.c (tr): Change return type to void.
	* src/muscle_tab.c (muscle_insert): Free storage in case muscle_grow
	has been called previously for the same key.
	(muscle_find): Return storage instead of value so that
	--enable-gcc-warnings doesn't produce warnings that the return discards
	const.  aver that the value and storage are the same since storage
	could potentially be NULL when value is not.
	* tests/testsuite.at (AT_CHECK): Treat an unspecified exit value the
	same as 0.

2006-11-08  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap.conf (excluded_files): Exclude m4/codeset.m4 (undoing
	the earlier change today), m4/intl.m4, m4/intldir.m4.  This gives
	us a slightly cleaner distribution, and also works.
	* m4/.cvsignore: Add inline.m4, wint_t.m4 to accommodate recent
	gnulib changes.

2006-11-08  Joel E. Denny  <jdenny@ces.clemson.edu>
	and Paul Eggert  <eggert@cs.ucla.edu>

	Don't let Bison leak memory except when it complains.
	* src/files.h (parser_file_name, spec_verbose_file, spec_graph_file):
	(spec_defines_file, dir_prefix): Now char *, not const char *,
	since they are freed.
	* src/files.c: Likewise.
	(all_but_ext, all_but_tab_ext, src_extension, header_extension):
	Likewise.
	(tr): Now operates in-place.  All uses changed.
	(compute_exts_from_gf, compute_exts_from_src): Don't leak temporary
	values.
	(compute_file_name_parts, compute_output_file_names): Don't store
	read-only data in variables that will be freed.
	(compute_output_file_names): Free all_but_ext, all_but_tab_ext,
	src_extension, and header_extension.
	(output_file_names_free): New public function to free
	spec_verbose_file, spec_graph_file, spec_defines_file,
	parser_file_name, and dir_prefix.
	* src/getargs.c (getargs): Don't store read-only data in variables that
	will be freed.
	* src/main.c (main): Invoke output_file_names_free, code_scanner_free
	(which previously existed but was unused), and quotearg_free.
	* src/muscle_tab.h (muscle_insert): value arg is now a `char const *'.
	* src/muscle_tab.c: Likewise.
	(muscle_entry): Make the value char const *,
	and add a new storage member that is char * and can be freed.
	(muscle_entry_free): New private function.
	(muscle_init): Use it instead of free.
	(muscle_insert, muscle_grow): Update and use new storage member.
	(muscle_code_grow): Free the string passed to muscle_grow
	since it's not needed anymore.
	* src/parse-gram.y (%union): Make `chars' member a `char const *', and
	add a new `char *code' member.
	("{...}"): Declare semantic type as code.
	* src/scan-code.h (translate_rule_action):
	(translate_symbol_action, translate_code, translate_action): Return
	`char const *' rather than `char *' since external code should not free
	these strings.
	* src/scan-code.l: Likewise.
	* src/scan-gram.l (<SC_BRACED_CODE>): Use val->code for BRACED_CODE,
	which is "{...}" in the parser.
	* tests/Makefile.am (maintainer-check-valgrind): Set
	VALGRIND_OPTS='--leak-check=full --show-reachable=yes' before invoking
	Valgrind.
	* tests/calc.at (_AT_DATA_CALC_Y): fclose the FILE* so Valgrind doesn't
	complain.
	* tests/testsuite.at (AT_CHECK): Redefine so that running Bison and
	expecting a non-zero exit status sets --leak-check=summary and
	--show-reachable=no for Valgrind.  Bison unabashedly leaks memory in
	this case, and we don't want to hear about it.

2006-11-08  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (runtime-po/Makevars): Derive from po/Makevars
	instead of from the template, to simplify configuration a bit.
	* bootstrap.conf (excluded_files): Don't exclude m4/codeset.m4
	and m4/wint_t.m4, as they are needed with the latest gnulib.

2006-10-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	Disable unset/unused mid-rule value warnings by default, and recognize
	--warnings=midrule-values to enable them.  Discussed starting at
	<http://lists.gnu.org/archive/html/help-bison/2006-10/msg00030.html>.
	* NEWS (2.3a+): Mention.
	* src/getargs.c, src/getargs.h (warnings_args, warnings_types, enum
	warnings): Add entry for midrule-values subargument.
	* src/reader.c (symbol_should_be_used): Don't return true just because
	the value is a set/used mid-rule value unless
	--warnings=midrule-values was specified.
	* tests/input.at (Unused values, Unused values before symbol
	declarations): Run tests with and without --warnings=midrule-values.

	* src/reader.c (check_and_convert_grammar): Use symbol_list_free rather
	than LIST_FREE directly.

2006-10-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	Finish implementing --warnings=error, which should not be implied by
	--warnings=all (or by its synonyms -W and --warnings without
	subarguments).
	* src/complain.c (set_warning_issued): New function to report that
	warnings are being treated as errors and to record an error if so.
	Invoke...
	(warn_at, warn): ... here.
	* src/getargs.c (warnings_args, warnings_types): Reorder so that
	"error - warnings are errors" does not appear above "all - all of the
	above".
	(getargs): For -W and --warnings without subarguments, don't let
	FLAGS_ARGMATCH set warnings_error in warnings_flag.
	* src/getargs.h (enum warnings): Unset warnings_error in warnings_all.

2006-10-31  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/getargs.c (flags_argmatch): Don't cause segmentation fault for
	empty subargument list.  For example: `bison  --warnings=  parser.y'.

2006-10-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/push.c, data/yacc.c: Make sure there's a newline at the end of
	the parser header file so that gcc doesn't warn.

2006-10-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Split the default %destructor/%printer into two kinds: <*> and <!>.
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-09/msg00060.html>.
	* NEWS (2.3a+): Mention.
	* doc/bison.texinfo (Freeing Discarded Symbols): Document this and the
	previous change today related to mid-rules.
	(Table of Symbols): Remove %symbol-default and add <*> and <!>.
	* src/parse-gram.y (PERCENT_SYMBOL_DEFAULT): Remove.
	(TYPE_TAG_ANY): Add as <*>.
	(TYPE_TAG_NONE): Add as <!>.
	(generic_symlist_item): Remove RHS for %symbol-default and add RHS's
	for <*> and <!>.
	* src/scan-gram.l (PERCENT_SYMBOL_DEFAULT): Remove.
	(TYPE_TAG_ANY, TYPE_TAG_NONE): Add.
	* src/symlist.c (symbol_list_default_new): Split into tagged and
	tagless versions.
	(symbol_list_destructor_set, symbol_list_printer_set): Split
	SYMLIST_DEFAULT case into SYMLIST_DEFAULT_TAGGED and
	SYMLIST_DEFAULT_TAGLESS.
	* src/symlist.h: Update symbol_list_default*_new prototypes.
	(symbol_list.content_type): Split enum value SYMLIST_DEFAULT into
	SYMLIST_DEFAULT_TAGGED and SYMLIST_DEFAULT_TAGLESS.
	* src/symtab.c (default_destructor, default_destructor_location,
	default_printer, default_printer_location): Split each into tagged and
	tagless versions.
	(symbol_destructor_get, symbol_destructor_location_get,
	symbol_printer_get, symbol_printer_location_get): Implement tagged
	default and tagless default cases.
	(default_destructor_set, default_printer_set): Split each into tagged
	and tagless versions.
	* src/symtab.h: Update prototypes.
	* tests/actions.at (Default %printer and %destructor): Rename to...
	(Default tagless %printer and %destructor): ... this, and extend.
	(Per-type %printer and %destructor): Rename to...
	(Default tagged and per-type %printer and %destructor): ... this, and
	extend.
	(Default %printer and %destructor for user-defined end token): Extend.
	(Default %printer and %destructor are not for error or $undefined):
	Update.
	(Default %printer and %destructor are not for $accept): Update.
	(Default %printer and %destructor for mid-rule values): Extend.
	* tests/input.at (Default %printer and %destructor redeclared): Extend.
	(Unused values with default %destructor): Extend.

2006-10-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't apply the default %destructor/%printer to an unreferenced midrule
	value.  Mentioned at
	<http://lists.gnu.org/archive/html/bison-patches/2006-09/msg00104.html>.
	* src/symtab.c (dummy_symbol_get): Name all dummy symbols initially
	like $@n instead of just @n so that the default %destructor/%printer
	logic doesn't see them as user-defined symbols.
	(symbol_is_dummy): Check for both forms of the name.
	* src/reader.c (packgram): Remove the `$' from each midrule symbol
	name for which the midrule value is referenced in any action.
	* tests/actions.at (Default %printer and %destructor for mid-rule
	values): New test.
	* tests/regression.at (Rule Line Numbers, Web2c Report): Update output
	for change to dummy symbol names.

2006-10-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Warn about unset midrule $$ if the corresponding $n is used.
	* src/reader.c (symbol_should_be_used): Check midrule parent rule for
	$n usage.
	(packgram): Before invoking grammar_rule_check on any rule, make sure
	all actions have already been scanned in order to set `used' flags.
	Otherwise, checking that a midrule's $$ is set will not always work
	properly because the midrule check must forward-reference the midrule's
	parent rule.
	* tests/input.at (AT_CHECK_UNUSED_VALUES): Extend to check the new
	warning.

2006-10-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	More improvements to the documentation of the prologue alternatives:
	* NEWS (2.3a+): Mention the new `Prologue Alternatives' section in the
	Bison manual.
	* doc/bison.texinfo (Prologue Alternatives): Correct some errors.  Add
	some text to clarify the relative importance of the new directives and
	to show how these directives may be viewed as code labels.

2006-10-16  Joel E. Denny  <jdenny@ces.clemson.edu>

	Similar to the recently removed %before-header, add %code-top as the
	alternative to the pre-prologue.  Mentioned at
	<http://lists.gnu.org/archive/html/bison-patches/2006-10/msg00063.html>.
	Also, let the prologue alternatives appear in the grammar section.
	* src/parse-gram.y (PERCENT_CODE_TOP): New token.
	(prologue_declaration): Move the existing prologue alternatives to...
	(grammar_declaration): ... here and add %code-top.
	* src/scan-gram.l (PERCENT_CODE_TOP): New token.

	Clean up and extend documentation for the prologue alternatives.
	* NEWS (2.3a+): Describe prologue alternatives.
	* doc/bison.texinfo (Prologue): Move discussion of prologue
	alternatives to...
	(Prologue Alternatives): ... this new section, and extend it to discuss
	all 4 directives in detail.
	(Table of Symbols): Clean up discussion of prologue alternatives and
	add %code-top.

2006-10-16  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	DJGPP specific issues.

	* djgpp/config.bat: config.hin has been moved to lib. Adjust
	config.bat accordingly.
	* djgpp/config.sed: Adjust config.sed for the use of autoconf 2.60.
	* djgpp/config.site: Likewise.

2006-10-16  Paolo Bonzini  <bonzini@gnu.org>

	Replace %*-header with %provides, %requires, %code.  See discussion at
	http://lists.gnu.org/archive/html/bison-patches/2006-10/msg00002.html

	* data/bison.m4 (b4_user_requires, b4_user_provides): New.
	(b4_user_start_header): Remove.
	* data/glr.c: Use new macros instead of b4_*start_header
	and b4_*end_header.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/push.c: Likewise.
	* data/yacc.c: Likewise.

	* doc/bison.texinfo: Remove %before-header, rename
	%{start,end,after}-header to %requires, %provides, %code.

	* src/parse-gram.y: Likewise (also rename token names accordingly).
	* src/scan-gram.l: Likewise.
	* tests/actions.at: Likewise.

2006-10-14  Paul Eggert  <eggert@cs.ucla.edu>

	* lib/Makefile.am (AM_CFLAGS): Remove $(WERROR_CFLAGS).
	Problem reported by Joel E. Denny.

2006-10-14  Jim Meyering  <jim@meyering.net>

	(Sync from coreutils.)
	Work also when the working directory (with e.g. coreutils sources)
	is version controlled with git, rather than CVS.
	* bootstrap (CVS_only_file): Test for the existence of README-cvs,
	rather than CVS.
	In messages and comments, say e.g., "checked-out sources",
	rather than "CVS sources".
	(version_controlled_file): New function.  Work for git as well as
	for CVS.  Don't use grep's -q option.
	(slurp): Call it here, in place of CVS-specific code.

2006-10-14  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix testsuite for ./configure --enable-gcc-warnings:
	* configure.ac (gcc-warnings): Move -Wall before -Wno-sign-compare.
	Otherwise, gcc 4.1.0 (at least) warns about sign comparisons in
	__AT_CHECK_PRINTER_AND_DESTRUCTOR in tests/actions.at.
	* test/input.at (Torturing the Scanner): #include <stdlib.h> for abort.
	* test/regression.at (Diagnostic that expects two alternatives):
	Likewise.

2006-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap.conf (gnulib_modules): Add config-h.
	* djgpp/subpipe.c: Include <config.h> unconditionally; don't
	worry about HAVE_CONFIG_H.
	* lib/abitset.c: Likewise.
	* lib/bitset.c: Likewise.
	* lib/bitset_stats.c: Likewise.
	* lib/bitsetv-print.c: Likewise.
	* lib/bitsetv.c: Likewise.
	* lib/ebitset.c: Likewise.
	* lib/get-errno.c: Likewise.
	* lib/lbitset.c: Likewise.
	* lib/subpipe.c: Likewise.
	* lib/timevar.c: Likewise.
	* lib/vbitset.c: Likewise.
	* lib/bitset.c: Include "bitset.h" first, to test interface.
	* lib/bitset_stats.c: Include "bitset_stats.h" first.
	* lib/bitsetv-print.c: Include "bitsetv-print.h" first.
	* lib/bitsetv.c: Include "bitsetv.h" first.
	* lib/get-errno.c: Include "get-errno.h" first.
	* m4/.cvsignore: Add config-h.m4.
	* tests/actions.at (Default %printer and %destructor for ...):
	Adjust expected line numbers in output to reflect removal of #if
	HAVE_CONFIG_H lines.
	* tests/glr-regression.at (Missed %merge type warnings when ...):
	Likewise.
	* tests/regression.at (Braced code in declaration in rules section):
	Likewise.
	* tests/atlocal.in (CPPFLAGS): Don't define HAVE_CONFIG_H.
	* tests/local.at (AT_DATA_GRAMMAR_PROLOGUE):
	Include <config.h> unconditionally.

	* bootstrap: Sync from coreutils, as follows:

	2006-10-11  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (symlink_to_gnulib): Fix bug: the dot_dots shell
	variable was sometimes used without being initialized.  This
	messed up the installation of the INSTALL file in some cases.

	2006-10-09  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (usage, main program, symlink_to_gnulib): Add option
	--copy.  Inspired by a suggestion from Bruno Haible.

	2006-10-03  Jim Meyering  <jim@meyering.net>

	* bootstrap: Undo last change to this file, since now gnulib-tool
	sticks with the automake default in generating dependencies.

2006-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	* configure.ac: Use AC_PROG_CC_STDC; this is more modern than
	the old AC_PROG_CC / AM_PROG_CC_STDC combination.

	* doc/bison.1: Add copyright notice.

	* data/glr.c: Don't include <stdarg.h>; not used.

	* NEWS: The -g and --graph options now output graphs in Graphviz
	DOT format, not VCG format.
	* doc/bison.1: Likewise.
	* doc/bison.texinfo (Understanding, Bison Options): Likewise.
	* THANKS: Add Satya Kiran Popuri, who proposed the initial version
	of this change in
	<http://lists.gnu.org/archive/html/bison-patches/2006-09/msg00158.html>.
	* TODO: Remove Graphviz entry.
	* src/Makefile.am (bison_SOURCES): Add graphviz.c and graphviz.h;
	remove vcg.c, vcg.h, vcg_defaults.h.
	* src/vcg.c, src/vcg.h, src/vcg_defaults.h: Remove.
	* src/graphviz.c, src/graphviz.h: New files.
	* src/files.c (compute_output_file_names): Output .dot, not .vcg.
	* src/files.h: Make comment more generic.
	* src/main.c (main): Likewise.
	* src/print_graph.h: Likewise.
	* src/getargs.c (usage): Make usage description more generic.
	* src/print_graph.c: Include graphviz.h rather than vcg.h.
	(static_graph, fgraph): Remove.  All uses changed to pass
	arguments instead of sharing a static var.
	(print_core, print_actions, print_state, print_graph):
	Output graphviz format rather than VCG format.
	* tests/.cvsignore: Remove *.vcg; add *.dot.
	* tests/output.at: Expect *.dot files, not *.vcg files.

	* data/Makefile.am (dist_pkgdata_DATA): Add bison.m4; this
	accommodates the 2006-10-08 change.

2006-10-11  Bob Rossi  <bob@brasko.net>

	* data/push.c (yypushparse, yypvarsinit, yypvars): Wrap in b4_push_if.
	(b4_yyssa, b4_yyerror_range): New macros.
	(struct yypvars): Remove yyssa_ptr and yyerror_range_ptr fields.
	(yypvarsinit): Remove init of removed fields.
	(yypushparse): Remove use of removed fields; use new macros instead.

2006-10-11  Paul Eggert  <eggert@cs.ucla.edu>

	* data/push.c (yypushparse): Fix memory leak if yymsg is malloced
	in a push parser.  Reindent slightly to match yacc.c better.

2006-10-11  Bob Rossi  <bob@brasko.net>

	* data/push.c (struct yypvars): Remove yymsgbuf, yymsgbuf_ptr, yymsg,
	yymsg_alloc fields.
	(yypvarsinit, yypushparse): Remove init of removed fields.
	(yypushparse): Use yymsgbuf instead of yymsgbuf_ptr.

2006-10-09  Paul Eggert  <eggert@cs.ucla.edu>

	* THANKS: Add Paolo Bonzini and Bob Rossi.

2006-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* data/c.m4 (b4_copyright, b4_epilogue, b4_location_initial_column,
	b4_location_initial_line, p4_parse_param, b4_ints_in, b4_flag_if,
	b4_define_flag_if and uses, b4_basename, b4_syncline, b4_user_code,
	b4_define_user_cde and uses): Remove.
	(b4_comment, b4_prefix, b4_sync_start): New.
	* data/bison.m4: New file, with most of the content removed from c.m4.
	* src/muscle_tab.h: Use "do {...} while(0)" throughout.
	* src/output.c (output_skeleton): Pass bison.m4.
	(prepare): Pass glr_flag and nondeterministic_flag.  Pass prefix
	only if specified.

2006-10-05  Paul Eggert  <eggert@cs.ucla.edu>

	Fix test failure reported by Tom Lane in
	<http://lists.gnu.org/archive/html/bug-bison/2006-10/msg00000.html>
	and try to make such failures easier to catch in the future.
	* data/glr.c (YYTRANSLATE): Don't check for nonpositive arg;
	that's now the caller's responsibility.
	(yyprocessOneStack, yyrecoverSyntaxError, yyparse):
	Set yychar = YYEOF if it's negative.
	* tests/actions.at (yylex): Abort if asked to read past EOF.
	* tests/conflicts.at (yylex): Likewise.
	* tests/cxx-type.at (yylex): Likewise.
	* tests/glr-regression.at (yylex): Likewise.
	* tests/input.at (yylex): Likewise.
	* tests/regression.at (yylex): Likewise.
	* tests/torture.at (yylex): Likewise.

2006-10-01  Paul Eggert  <eggert@cs.ucla.edu>

	Fix problems with translating English-language diagnostics.
	* bootstrap: Fix bug introduced in recent bootstrap changes, with
	respect to bison-runtime pot generation.  The YY_ stuff
	wasn't being captured.
	* bootstrap.conf (XGETTEXT_OPTIONS_RUNTIME): New var.
	* po/POTFILES.in: Add src/location.c, src/scan-code.l.
	* runtime-po/POTFILES.in: Add data/push.c.

2006-09-29  Paul Eggert  <eggert@cs.ucla.edu>

	Merge bootstrap changes from coreutils.

	2006-09-28  Jim Meyering  <jim@meyering.net>

	Automatically generated dependencies are important even
	when all of the sources in a directory come from gnulib.
	* bootstrap (gnulib_tool): Remove the "no-dependencies" automake
	option that gnulib-tool adds to what becomes our lib/gnulib.mk.

	2006-09-23  Jim Meyering  <jim@meyering.net>

	* bootstrap (gnulib_tool_options): Add "--local-dir gl".

	2006-09-20  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap: Add support for --force.
	(usage): New function.  Describe usage less tersely.
	(CVS_only_file): New var.

2006-09-21  Paul Eggert  <eggert@cs.ucla.edu>

	* data/push.c (YYPUSH_MORE): Make it an enum instead.
	(yypushparse): Use YYPUSH_MORE instead of the mystery constant.
	Adjust white space and comments to match GNU style better.

2006-09-20  Bob Rossi  <bob@brasko.net>

	* data/push.c (yyresult_get): Remove function.
	(YYPUSH_MORE): Add #define.
	(yypushparse): Modify return value.

2006-09-20  Paul Eggert  <eggert@cs.ucla.edu>

	* stamp-h.in: Remove; no longer needed.
	* .cvsignore: Replace autom4te.cache and config.cache with *.cache.
	Remove config.h, config.hin, intl (no longer created).
	* lib/.cvsignore: Add config.h, config.hin, configmake.h, inttypes.h,
	stamp-h1.

	Sync bootstrap from coreutils, as follows:

	2006-09-18  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (symlink_to_gnulib): New function.
	(cp_mark_as_generated): Use it, to prefer symlinks-to-gnulib
	to copies-of-gnulib.
	(cp_mark_as_generated, slurp, gnulib_files):
	Avoid making a copy if it's the same as the old version.
	(gnulib_files): Add support for this variable (used by Bison).

2006-09-20  Paul Eggert  <eggert@cs.ucla.edu>

	* src/getargs.c (usage): Rework to use conventions similar to
	coreutils, to make translation a bit easier and the code a bit
	smaller.  Problem reported by Tim Van Holder.

2006-09-15  Paul Eggert  <eggert@cs.ucla.edu>

	Use some of gnulib's new modules, taken from coreutils.

	* bootstrap: Sync from coreutils, except add support for gnulib_files.
	* bootstrap.conf: New file.
	(gnulib_modules): Add configmake, inttypes, unistd.
	(XGETTEXT_OPTIONS): Add complain, complain_at,
	fatal, fatal_at, warn, warn_at, unexpected_end.
	* configure.ac (AC_CONFIG_HEADERS): config.h is now in lib, not here.
	(gl_USE_SYSTEM_EXTENSIONS): Remove; gl_EARLY now does this.
	(gl_EARLY): Add.
	(AM_STDBOOL_H): Remove; gl_INIT now dows this.
	(gl_INIT): Add
	(GNULIB_AUTOCONF_SNIPPET): Remove.
	(AM_GNU_GETTEXT): Add; require formatstring macros since that's
	the pickiest.
	* lib/.cvsignore: Add inttypes_.h.
	* lib/Makefile.am: Include gnulib.mk first so we can append to it.
	(AM_CFLAGS): Add WERROR_CFLAGS, to be more like coreutils.
	(BUILT_SOURCES, EXTRA_DIST, MOSTLYCLEANFILES): Remove
	no-longer-necessary initializations.
	(lib_SOURCES): Remove, replacing by libbison_a_SOURCES.
	* lib/subpipe.c: Include <unistd.h> unconditionally, now that we
	use the unistd module.
	* src/system.h: Likewise.
	* m4/.cvsignore: Remove *_gl.m4, gnulib.m4, inttypes_h.m4, uintmax_t.m4,
	ulonglong.m4.  Add gettext.m4, gnulib-cache.m4, gnulib-comp.m4,
	gnulib-tool.m4, inttypes-h.m4, inttypes-pri.m4, inttypes.m4.
	* src/Makefile.am (DEFS): Remove, since configmake does this for us.
	(AM_CPPFLAGS): Remove -I../lib, since Automake does that for us.
	* src/system.h: Include inttypes.h unconditionally, now that we
	use the inttypes module.  Don't bother to include stdint.h, since
	inttypes.h now does that for us.
	(LOCALEDIR): Remove, now that we use the configmake module.
	* src/getargs.c: Include configmake.h.
	* src/main.c: Likewise.
	* src/output.c: Likewise.
	* tests/atlocal.in (CPPFLAGS): Include from $abs_top_builddir/lib,
	not from $abs_top_builddir, since config.h moved.


	Port to GCC 2.95.  First two problems reported by Michael Deutschmann in
	<http://lists.gnu.org/archive/html/bug-bison/2006-09/msg00018.html>.

	* src/parse-gram.y (symbol_declaration): Don't put statements
	before declarations; it's not portable to C89.
	* src/scan-code.l (handle_action_at): Likewise.

	* src/scan-code.l: Always initialize braces_level; the old code
	left it uninitialized and therefore had undefined behavior.

	Don't attempt to redefine 'assert', since it runs afoul of
	systems where standard headers (mistakenly) include <assert.h>.
	Instead, define and use our own alternative, called 'aver'.
	* src/reader.c: Don't include assert.h, since we no longer
	use assert.
	* src/scan-code.l: Likewise.
	* src/system.h (assert): Remove, replacing with....
	(aver): New function, taking a bool arg.  All uses changed.
	* src/tables.c (pack_vector): Ensure that aver arg is bool,
	not merely an integer.

2006-09-15  Bob Rossi  <bob@brasko.net>

	Add support for push parsing.  Based on the original work of
	Odd Arild Olsen <oao@fibula.no>.
	* data/Makefile.am (dist_pkgdata_DATA): Add push.c.
	* data/c.m4 (YYPUSH): New.
	(b4_push_if): New macro.  Use it instead of #ifdef YYPUSH.
	* data/push.c: New file.
	* src/getargs.c (push_parser): New var.
	* src/getargs.h (push_parser): New declaration.
	* src/output.c (prepare): Add macro insertion of `push_flag'.
	* src/parse-gram.y (PERCENT_PUSH_PARSER): New token.
	(prologue_declaration): Parse %push-parser.
	* src/scan-gram.l: Scan new PERCENT_PUSH_PARSER token.
	* tests/calc.at (_AT_CHECK_CALC_ERROR): Add "Return" and "Now" to
	list of removed lines from the traces observed.
	(AT_CHECK_CALC_LALR): Added push parser tests.

2006-09-13  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.3a.
	* configure.ac (AC_INIT): Likewise.

	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Remove
	"#define YYSTYPE int" that caused "make maintainer-check" to fail
	due to header ordering dependencies.  I don't know why the #define
	was there.

	Fix glr.cc and lalr1.cc's use of YYDEBUG so that there's zero
	runtime cost when YYDEBUG is not defined, and so that some tests
	that used to fail now work.  Problem and initial suggestion by
	Paolo Bonzini.
	* data/c++.m4 (b4_parse_param_cons): Omit leading ','.
	* data/glr.cc (b4_parser_class_name):
	Initialize yycdebug_ only if YYDEBUG.  Also, initialize yydebug_.
	(debug_level, set_debug_level): Affect yydebug_, not ::yydebug.
	(yydebug_) [YYDEBUG]: New member.
	(yycdebug_): Now defined only if YYDEBUG.
	* data/lalr1.cc (yydebug_, yycdebug_): Now defined only if YYDEBUG.
	(YYCDEBUG) [!YYDEBUG]: Don't use yydebug_ and yycdebug_.
	(b4_parser_class_name): Initialize yydebug_ and yycdebug_ only
	if YYYDEBUG.
	(debug_stream, set_debug_stream, debug_level, set_debug_level):
	Define only if YYDEBUG.
	* tests/calc.at (_AT_DATA_CALC_Y) [!YYDEBUG]: Omit call to
	set_debug_level.
	* tests/regression.at (_AT_DATA_DANCER_Y) [!YYDEBUG]: Likewise.
	* tests/calc.at (AT_CHECK_CALC_GLR_CC): Uncomment calls to
	AT_CHECK_CALC_GLR_CC that are working now.

2006-09-12  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.cc (YYERROR_VERBOSE, YYTOKEN_TABLE): Remove.
	We don't need them in glr.cc, and glr.c defines them.
	Defining YYERROR_VERBOSE to 0 here breaks glr.c, since glr.c
	assumes that defining it to anything is the same as defining
	it to 1.  Problem reported by Paolo Bonzini.

2006-09-12  Paolo Bonzini  <bonzini@gnu.org>  (tiny change)

	* data/c.m4 (b4_null, b4_case): Define.
	* src/output.c (prepare_symbols): Use b4_null.
	(user_actions_output): Use b4_case.

2006-09-11  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (b4_shared_declarations): Put start-header first,
	before any #includes that we generate, so that feature-test
	macros work.  Problem reported by Michael Deutschmann in
	<http://lists.gnu.org/archive/html/bug-bison/2006-09/msg00004.html>.
	* data/lalr1.cc: Likewise.
	* doc/bison.texinfo (Prologue): Document that feature-test macros
	should be defined before any Bison declarations.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Put defns
	that depend on location.hh after, not before, Bison decls, since
	we now include location.hh after the first user prologue.

	* doc/bison.texinfo (Calc++ Parser): Fix memory leak reported by
	Sander Brandenburg in
	<http://lists.gnu.org/archive/html/bug-bison/2006-09/msg00002.html>.
	Also, fix minor white space and comment issues.
	(Prologue): Mention that it's better to define feature-test macros
	before Bison declarations.  Problem reported by Michael Deutschmann.

	* README-cvs: Fix typo: "&" should be "&&".  Problem reported
	by Jim Meyering.
	* m4/.cvsignore: Add argmatch.m4.  Remove obstack.m4, strerror_r.m4.
	This adjusts to recent gnulib changes.

2006-09-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Finish implementation of per-type %destructor/%printer.  Discussed
	starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-02/msg00064.html>
	and
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00091.html>.
	* NEWS (2.3+): Add a description of this feature to the default
	%destructor/%printer description.
	* doc/bison.texinfo (Freeing Discarded Symbols): Likewise.
	* src/symlist.c (symbol_list_destructor_set, symbol_list_printer_set):
	Invoke semantic_type_destructor_set or semantic_type_printer_set when a
	list node contains a semantic type.
	* src/symtab.c, src/symtab.h: Extend with a table that associates
	semantic types with their %destructor's and %printer's.
	(semantic_type_from_uniqstr, semantic_type_get,
	semantic_type_destructor_set, semantic_type_printer_set): New functions
	composing the public interface of that table.
	(symbol_destructor_get, symbol_destructor_location_get,
	symbol_printer_get, symbol_printer_location_get):  If there's no
	per-symbol %destructor/%printer, look up the per-type before trying
	the default.
	* tests/actions.at (Per-type %printer and %destructor): New test case.
	* tests/input.at (Default %printer and %destructor redeclared):
	Extend to check that multiple occurrences of %symbol-default in a
	single %destructor/%printer declaration is an error.
	(Per-type %printer and %destructor redeclared, Unused values with
	per-type %destructor): New test cases.

2006-09-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	Require default %destructor/%printer to be declared using
	%symbol-default instead of an empty symbol list, and start working on
	new per-type %destructor/%printer.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-09/msg00007.html>.
	* NEWS (2.3+): Add %symbol-default to example.
	* bison.texinfo (Freeing Discarded Symbols): Likewise.
	(Table of Symbols): Add entry for %symbol-default.
	* src/parse-gram.y (PERCENT_SYMBOL_DEFAULT): New token.
	(generic_symlist, generic_symlist_item): New nonterminals for creating
	a list in which each item is a symbol, semantic type, or
	%symbol-default.
	(grammar_declaration): Use generic_symlist in %destructor and %printer
	declarations instead of symbols.1 or an empty list.
	(symbol_declaration, precedence_declaration, symbols.1): Update actions
	for changes to symbol_list.
	* src/reader.c: Update for changes to symbol_list.
	* src/scan-code.l: Likewise.
	* src/scan-gram.l: Scan new PERCENT_SYMBOL_DEFAULT token.
	* src/symlist.c, src/symlist.h: Extend such that a list node may
	represent a semantic type or a %symbol-default in addition to just an
	ordinary symbol.  Add switched functions for setting %destructor's and
	%printer's.
	* tests/actions.at, tests/input.at: Add %symbol-default to all default
	%destructor/%printer declarations.

2006-08-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	Whether the default %destructor/%printer applies to a particular symbol
	isn't a question of whether the user *declares* that symbol (in %token,
	for example).  It's a question of whether the user by any means
	*defines* the symbol at all (by simply using a char token, for
	example).  $end is defined by Bison whereas any other token with token
	number 0 is defined by the user.  The error token is always defined by
	Bison regardless of whether the user declares it with %token, but we
	may one day let the user define error as a nonterminal instead.
	* NEWS (2.3+): Say "user-defined" instead of "user-declared".
	* doc/bison.texinfo (Freeing Discarded Symbols): Likewise, and document
	the meaning of "user-defined".
	* tests/actions.at (Default %printer and %destructor for user-declared
	end token): Rename to...
	(Default %printer and %destructor for user-defined end token): ...
	this.

	* src/symtab.c (symbol_destructor_get, symbol_printer_get): In the
	computation of whether to apply the default, don't maintain a list of
	every Bison-defined symbol.  Instead, just check for a first character
	of '$', which a user symbol cannot have, and check for the error token.

2006-08-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't apply the default %destructor or %printer to the error token,
	$undefined, or $accept.  This change fits the general rule that the
	default %destructor and %printer are only for user-declared symbols,
	and it solves several difficulties that are described in the new test
	cases listed below.
	* src/symtab.c (symbol_destructor_get, symbol_printer_get): Implement.
	* tests/actions.at (Default %printer and %destructor are not for error
	or $undefined, Default %printer and %destructor are not for $accept):
	New test cases.

2006-08-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	Allow %start after the first rule.
	* src/reader.c (grammar_current_rule_begin): Don't set the start symbol
	when parsing the first rule.
	(check_and_convert_grammar): Search for it here after all grammar
	declarations have been parsed.  Skip midrules, which have dummy LHS
	nonterminals.
	* src/symtab.c (symbol_is_dummy): New function.
	* src/symtab.h (symbol_is_dummy): Declare it.
	* tests/input.at (%start after first rule): New test.

2006-08-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Redo some of the previous commit: add back the ability to use
	non-aliased/undeclared string literals since it might be useful to
	those declaring %token-table.
	* src/reader.c (check_and_convert_grammar): Undo changes in previous
	commit: don't worry about complaints from symbols_pack.
	* src/symtab.c (symbol_new, symbol_class_set,
	symbol_check_alias_consistency): Undo changes in previous commit: count
	each string literal as a new symbol and token, assign it a symbol
	number, and don't complain about non-aliased string literals.
	(symbols_pack): Since symbol_make_alias still does not decrement symbol
	and token counts but does still set aliased tokens to the same number,
	symbol_pack_processor now leaves empty slots in the symbols array.
	Remove those slots.
	* tests/regression.at (Undeclared string literal): Remove test case
	added in previous commit since non-aliased string literals are allowed
	again.
	(Characters Escapes, Web2c Actions): Undo changes in previous commit:
	remove unnecessary string literal declarations.
	* tests/sets.at (Firsts): Likewise.

2006-08-18  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't allow an undeclared string literal, but allow a string literal to
	be used before its declaration.
	* src/reader.c (check_and_convert_grammar): Don't invoke packgram if
	symbols_pack complained.
	* src/symtab.c (symbol_new): Don't count a string literal as a new
	symbol.
	(symbol_class_set): Don't count a string literal as a new token, and
	don't assign it a symbol number since symbol_make_alias does that.
	(symbol_make_alias): It's not necessary to decrement the symbol and
	token counts anymore.  Don't assume that an alias declaration occurs
	before any uses of the identifier or string, and thus don't assert that
	one of them has the highest symbol number so far.
	(symbol_check_alias_consistency): Complain if there's a string literal
	that wasn't declared as an alias.
	(symbols_pack): Bail if symbol_check_alias_consistency failed since
	symbol_pack asserts that every token has been assigned a symbol number
	although undeclared string literals have not.
	* tests/regression.at (String alias declared after use, Undeclared
	string literal): New test cases.
	(Characters Escapes, Web2c Actions): Declare string literals as
	aliases.
	* tests/sets.at (Firsts): Likewise.

2006-08-14  Joel E. Denny  <jdenny@ces.clemson.edu>

	In the grammar scanner, STRING_FINISH unclosed constructs and return
	them to the parser in order to improve error messages.
	* src/scan-gram.l (SC_ESCAPED_STRING, SC_ESCAPED_CHARACTER,
	SC_BRACED_CODE, SC_PROLOGUE): Implement.
	* tests/input.at (Unclosed constructs): New test case.
	* tests/regression.at (Invalid inputs): Update now that unclosed %{ is
	seen.

	* src/scan-gram.h, src/scan-gram.l (gram_last_braced_code_loc): Remove
	unused global.

2006-08-13  Joel E. Denny  <jdenny@ces.clemson.edu>

	Handle string aliases for character tokens correctly.
	* src/symtab.c (symbol_user_token_number_set): If the token has an
	alias, check and set its alias's user token number instead of its own,
	which is set to indicate the alias.  Previously, every occurrence of
	the character token in the grammar overwrote that alias indicator with
	the character code.
	* tests/input.at (String aliases for character tokens): New test.

2006-08-12  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/parse-gram.y: Add `%expect 0' so we don't overlook conflicts.

2006-08-11  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap: Put in need-ngettext argument to AM_GNU_GETTEXT,
	to prevent failures when building on older platforms.
	Check for autopoint failure.
	Set XGETTEXT_OPTIONS to values that check for C format strings,
	so that translators are warned about them (this also helps
	prevent core dumps).

	* lib/subpipe.c (create_subpipe): Use new gnulib pipe_safer
	function, since it simplifies our code a bit.

	* configure.ac (AC_ARG_ENABLE): Use -Wextra -Wno-sign-compare
	rather than -W, so we don't get bogus warnings about sign comparisons.
	Add -Wpointer-arith, since that warning is useful (it reports code
	that does not conform to C89 and that some compilers reject).
	* data/c.m4, data/glr.c, data/lalr1.cc, data/yacc.c: Undo latest change,
	since it's no longer needed.

2006-08-10  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up scanners a bit.
	* src/flex-scanner.h (FLEX_NO_OBSTACK): New macro that blocks obstack
	definitions so gcc won't warn when obstack_for_string is unused.
	* src/scan-code.l: config.h and system.h are already #include'd by
	scan-code-c.c, so get rid of them here.
	* src/scan-gram.l: Likewise.
	* src/scan-skel.l: Likewise, and use flex-scanner.h without obstack
	definitions rather than duplicating the rest of it.
	* src/scan-gram-c.c, scan-skel-c.c: #include "system.h".

2006-08-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	Suppress signed/unsigned comparison warnings for yycheck.
	* data/c.m4 (b4_safest_int_type): New macro.
	* data/glr.c, data/lalr1.cc: Wherever you compare yycheck[i] against
	a signed int type, cast it to b4_safest_int_type first.
	* data/yacc.c: Likewise.
	(b4_safest_int_type): Overwrite the one from c.m4 since b4_int_type is
	also overwritten.

2006-08-09  Ralf Wildenhues <Ralf.Wildenhues@gmx.de>  (tiny change)

	* doc/bison.texinfo: Fix some typos.

2006-08-02  Paul Eggert  <eggert@cs.ucla.edu>

	* m4/.cvsignore: Add inttypes_h.m4,lib-ld.m4, lib-prefix.m4,
	po.m4, stdint_h.m4, uintmax_t.m4, ulonglong.m4, warning.m4.

	* bootstrap (gnulib_tool): Stop using --assume-autoconf;
	the latest gnulib does this a different way.
	(get_translations): Sharuzzaman Ahmat Raslan reported that the ms
	translation was patched, so stop omitting it.

2006-07-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Enable declaration of default %printer/%destructor.  Make the parser
	use these for all user-declared grammar symbols for which the user does
	not declare a specific %printer/%destructor.  Thus, the parser uses it
	for token 0 if the user declares it but not if Bison generates it as
	$end.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-02/msg00064.html>,
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00091.html>,
	and
	<http://lists.gnu.org/archive/html/bison-patches/2006-07/msg00019.html>.
	* NEWS (2.3+): Mention.
	* doc/bison.texinfo (Actions in Mid-Rule): It's no longer impossible to
	declare a %destructor for a mid-rule's semantic value.  It's just
	impossible to declare one specific to it.
	(Freeing Discarded Symbols): Mention that @$ can be used in %destructor
	code.  Describe default %destructor form.
	* src/parse-gram.y (grammar_declaration): Parse default
	%printer/%destructor declarations.
	* src/output.c (symbol_destructors_output): Use symbol_destructor_get
	and symbol_destructor_location_get rather than accessing the destructor
	and destructor_location members of struct symbol.
	(symbol_printers_output): Likewise but for %printer's.
	* src/reader.c (symbol_should_be_used): Likewise but for %destructor's
	again.
	* src/symtab.c (default_destructor, default_destructor_location,
	default_printer, default_printer_location): New static global
	variables to record the default %destructor and %printer.
	(symbol_destructor_get, symbol_destructor_location_get,
	symbol_printer_get, symbol_printer_location_get): New functions to
	compute the appropriate %destructor and %printer for a symbol.
	(default_destructor_set, default_printer_set): New functions to set the
	default %destructor and %printer.
	* src/symtab.h: Prototype all those new functions.
	* tests/actions.at (Default %printer and %destructor): New test to
	check that the right %printer and %destructor are called, that they're
	not called for $end, and that $$ and @$ work correctly.
	(Default %printer and %destructor for user-declared end token): New
	test to check that the default %printer and %destructor are called for
	a user-declared end token.
	* tests/input.at (Default %printer and %destructor redeclared, Unused
	values with default %destructor): New tests to check related grammar
	warnings and errors.

2006-07-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up handling of %destructor for the end token (token 0).
	Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-07/msg00019.html>
	and
	<http://lists.gnu.org/archive/html/help-bison/2006-07/msg00013.html>.

	Make the skeletons consistent in how they pop the end token and invoke
	its %destructor.
	* data/glr.c (yyrecoverSyntaxError, yyparse): Don't pop the start
	state, which has token number 0, since this would invoke the
	%destructor for the end token.
	* data/lalr1.cc (yy::parser::parse): Don't check for the final state
	until after shifting the end token, or else it won't be popped.
	* data/yacc.c (yyparse): Likewise.

	* data/glr.c (yyparse): Clear the lookahead after shifting it even when
	it's the end token.  Upon termination, destroy an unshifted lookahead
	even when it's the end token.
	* data/lalr1.cc (yy::parser::parse): Likewise.
	* data/yacc.c (yyparse): Likewise.

	* src/reader.c (packgram): Don't check rule 0.  This suppresses unused
	value warnings for the end token when the user gives the end token a
	%destructor.

	* tests/actions.at (Printers and Destructors): Test all the above.

2006-07-24  Paul Eggert  <eggert@cs.ucla.edu>

	Update to latest gnulib and gettext versions.
	* bootstrap (gnulib-modules): Remove hard-locale, stdio-safer.
	Add fopen-safer.
	(gnulib_files): Add m4/warning.m4.  Don't worry about files
	overwritten by autopoint.
	Replace gt_INTL_SUBDIR_CORE with an empty body in m4/gettext_gl.m4.
	Suppress "id", "ms", "tr" translations for now, since gettext 0.15
	rejects them.
	Don't use autoreconf; instead, invoke autopoint etc. by hand,
	so that we can remove the intl files at a better time.
	(intl_files_to_remove): Remove aclocal.m4, since it gets
	rebuilt anyway.  Remove m4/inttypes_h.m4, m4/inttypes.m4,
	m4/isc-posix.m4, m4/lib-ld.m4, m4/lib-prefix.m4, m4/po.m4,
	m4/stdint_h.m4, m4/uintmax_t.m4, m4/ulonglong.m4.
	Add m4/inttypes-h.m4, m4/lock.m4, m4/visibility.m4.
	Remove datarootdir hack; no longer needed.
	* configure.ac: Use gl_WARNING_CFLAGS rather than BISON_WARNING.
	(AM_GNU_GETTEXT_VERSION): Bump from 0.12 to 0.15.
	* lib/.cvsignore: Remove hard-locale.c, hard-locale.h, strdup.c,
	strdup.h.
	* m4/.cvsignore: Remove hard-locale.m4, strdup.m4.
	* m4/warning.m4: Remove from CVS, since we now use gnulib's version.

2006-07-20  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap: Adjust to today's change to gnulib-tool by invoking
	it with --assume-autoconf='latest-stable'.

2006-07-13  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/parse-gram.y (grammar_declaration): Don't confuse Doxygen (at
	least 1.4.7 and 1.4.4) by putting a #line between `typedef union
	YYSTYPE' and `{'.
	* src/muscle_tab.h (muscle_grow): Replace the header comments with
	those from muscle_tab.c since the old ones are misleading.

2006-07-13  Akim Demaille  <akim@epita.fr>

	Support %define "KEY" {VALUE}.
	* src/scan-code.h, src/scan-code.l (translate_action)
	(translate_rule_action, translate_symbol_action, translate_code):
	Return char *, not const char *.
	* src/parse-gram.y (declaration): Rename as...
	(prologue_declaration): this.
	(string_content): Remove this nonterminal, use STRING.
	(braceless, content, content.opt): New nonterminal.
	Use them.
	(%define): Now accept content.opt, i.e., accept also BRACED_CODE
	as value.
	* src/scan-gram.l (getargs.h): Don't include it.

2006-07-12  Paul Eggert  <eggert@cs.ucla.edu>

	* data/lalr1.cc (YYCDEBUG): Use 'if (yydebug_) (*yycdebug_)'
	rather than a for-loop that declares a local bool variable.  This
	should work around a compatibility problem with a Cray x1e C++
	compiler reported by Hung Nguyen in
	<http://lists.gnu.org/archive/html/help-bison/2006-07/msg00022.html>.
	The for-loop was introduced in the 2004-11-17 change but I don't
	know why it was needed.

2006-07-12  Akim Demaille  <akim@epita.fr>

	* data/c.m4: Comment changes.

2006-07-10  Akim Demaille  <akim@lrde.epita.fr>

	* src/complain.c (error_message, ERROR_MESSAGE): New.
	To factor...
	(fatal_at, fatal, warn_at, warn, complain_at, complain): these.
	* src/complain.h, src/complain.c (warning_issued): Remove, unused.

2006-07-09  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Instead of %union, you can define and use your own union type
	YYSTYPE if your grammar contains at least one <type> tag.
	Your YYSTYPE need not be a macro; it can be a typedef.
	* doc/bison.texinfo (Value Type, Multiple Types, Location Type):
	(Union Decl, Decl Summary): Document this.
	* data/glr.c (YYSTYPE): Implement this.
	* data/glr.cc (YYSTYPE): Likewise.
	* data/lalr1.cc (YYSTYPE): Likewise.
	* data/yacc.c (YYSTYPE): Likewise.
	* src/output.c (prepare): Output tag_seen_flag.
	* src/parse-gram.y (declaration, grammar_declaration):
	Use 'union_seen' rather than 'typed' to determine whether
	%union has been seen, since grammars can now be typed without
	%union.
	(symbol_declaration, type.opt, symbol_def):
	Keep track of whether a tag has been seen.
	* src/reader.c (union_seen, tag_seen): New vars.
	(typed): remove.
	* src/reader.h (union_seen, tag_seen, typed): Likewise.
	* src/scan-code.l (untyped_var_seen): New variable.
	(handle_action_dollar): Adjust to above changes.
	(handle_action_dollar, handle_action_at):
	Improve overflow checking for outlandish numbers.
	* tests/input.at (AT_CHECK_UNUSED_VALUES): Redo test to
	avoid new diagnostics generated by above changes.
	* tests/regression.at (YYSTYPE typedef): Add test to check
	for type tags without %union.

	* src/symlist.c (symbol_list_length): Return int, not unsigned
	int, since callers expect int.  This may need to get revisited
	once we have proper integer overflow checking.

	* src/scan-gram.h (gram_scanner_cursor): Remove decl, since this
	object is now static.

	* src/getargs.c (flags_argmatch): Return void, not int,
	to pacify ./configure --enable-gcc-warnings.

	* src/flex-scanner.h (STRING_FREE): Don't use FLEX_PREFIX (last_string)
	since last_string is already defined to FLEX_PREFIX (last_string).

2006-07-09  Akim Demaille  <akim@lrde.epita.fr>

	Implement --warnings/-W.
	* src/getargs.c (report_argmatch, trace_argmatch): Remove,
	replaced by...
	(flags_argmatch, FLAGS_ARGMATCH): this new function and macro.
	Adjust callers.
	* src/getargs.h, src/getargs.c (warnings, warnings_flags)
	(warnings_args, warnings_types): New.
	(getargs, short_options, long_options): Accept -W/--warnings.
	Sort the options by alphabetical order, upper case letter right
	before its lower case.

2006-07-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	Change %merge result type clash warnings to errors.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-07/msg00026.html>.
	* src/reader.c (record_merge_function_type): Use complain_at.
	* tests/glr-regression.at (Missed %merge type warnings when LHS type is
	declared later): Update test case results.

2006-07-09  Akim Demaille  <akim@lrde.epita.fr>

	* src/getargs.h, src/getargs.c: Swap --report and --trace handling
	to be in alphabetical order.
	(trace_args): Spelling fixes.

2006-07-09  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (YYID, yy_stack_print): Prefix local vars with "yy"
	so they don't collide with user-defined macros.
	(yy_stack_print): Don't assume that yytype_int16 promotes to int;
	this was never guaranteed, and now that we're using gnulib stdint,
	which defines int_fast16_t to long int, the problem is exposed.

2006-07-08  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_basename): Simplify a bit, since we don't
	need the full POSIX semantics (and weren't implementing them
	anyway).

	Adjust to Autoconf 2.60 and today's gnulib.
	* bootstrap (gnulib_modules): Add stdint.
	Remove special case for m4/onceonly_2_57.m4, since gnulib-tool
	no longer copies it.
	(intl_files_to_remove): Remove m4/longlong.m4 and m4/wchar_t.m4,
	since stdint needs the former and wcwidth (which is now required
	by mbswidth) needs the latter.
	Append 'datarootdir = @datarootdir@' to po/Makefile.in.in, to
	work around a compatibility glitch between gettext 0.14.6 and
	Autoconf 2.60.
	* configure.ac (AC_PREREQ): Require Autoconf 2.60.
	Do not check for uintptr_t, since new stdint module does the right
	thing.
	* lib/.cvsignore: Remove alloca.c, alloca.h, alloca_.h.
	Add stdint.h, stdint_.h, wcwidth.h.
	* m4/.cvsignore: Remove alloca.m4, onceonly.m4.
	Add absolute-header.m4, double-slash-root.m4, longlong.m4,
	stdint.m4, wchar_t.m4, wcwidth.m4.
	* src/files.c: Include <dirname.h> and <stdio-safer.h> in the
	usual order for ../lib/*.h files.
	(file_name_split): Use last_component, not base_name, to adjust
	to gnulib changes.
	* src/parse-gram.h: Include <strverscmp.h> in the usual order
	for ../lib/*.h files.
	(YYTYPE_INT16, YYTYPE_INT8, YYTYPE_UINT16, YYTYPE_UINT8):
	Define unconditionally, since we now assume the stdint module.
	* src/scan-skel.l: Include <dirname.h>.
	(BASE_QPUTS): Use last_component, not base_name.
	* src/system.h: Include <unlocked-io.h> in the usual order
	for ../lib/*.h files.  Include <stdint.h> unconditionally,
	since we now use the stdint module.
	(uintptr_t): Declare if UINTPTR_MAX is not defined, not
	HAVE_UINTPTR_T, since we now use the stdint module.
	(base_name): Remove decl, since files now include <dirname.h>
	to get the decl.

2006-07-08  Akim Demaille  <akim@lrde.epita.fr>

	* data/c.m4 (b4_location_initial_column, b4_location_initial_line):
	New, default to 1.
	* data/yacc.c, data/glr.c, data/location.cc: Use them.
	* NEWS, doc/bison.texinfo: The initial column and line are 1 by
	default.
	* tests/calc.at: Adjust.

2006-07-08  Akim Demaille  <akim@lrde.epita.fr>

	* data/c.m4 (b4_basename): New.
	(b4_syncline): Also output the location of its invocation (from
	the skeleton).
	(b4_user_action, b4_define_user_action, b4_user_actions)
	(b4_user_initial_action, b4_user_post_prologue,	b4_user_start_header)
	(b4_user_stype): New.
	* data/yacc.c, data/glr.c, data/lalr1.cc, data/glr.cc: Use them.

2006-07-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	In the grammar file, the first column is 1 not 0 on the first line as
	on every other line.
	* src/parse-gram.y (%initial-action): Initialize @$ correctly.
	* tests/input.at (Torturing the Scanner): Update output.

	* src/scan-gram.l (scanner_cursor): Declare it static.

2006-07-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	In warnings, say "previous declaration" rather than "first
	declaration".
	* src/symtab.c (redeclaration): Do that here.
	* src/reader.c (record_merge_function_type): In the case of a result
	type clash, report the previous declaration rather than the very first
	one in the grammar file.
	* tests/glr-regression.at (Missed %merge type warnings when LHS type is
	declared later): Add a third declaration to check this behavior.
	* tests/input.at (Incompatible Aliases): Update output.

2006-06-27  Akim Demaille  <akim@epita.fr>

	* doc/Doxyfile.in: New.
	* doc/Makefile.am: Use it.
	* src/lalr.h, src/symtab.h: Initial doxygenation.

2006-06-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't miss %merge result type warnings just because the LHS types are
	declared after the %merge.  This continues the effort of the previous
	patch.
	* src/reader.c (get_merge_function): Don't set the merger type yet.
	(record_merge_function_type): New function for setting the merger type
	and checking for clashes.
	(grammar_current_rule_merge_set): Set the location of the %merge for
	the current rule.
	(packgram): Invoke record_merge_function_type for each rule now that
	all symbol type declarations have been parsed.
	* src/reader.h (merger_list.type_declaration_location): New member
	storing the location of the first %merge from which the type for this
	merging function was derived.
	* src/symlist.h (symbol_list.merger_declaration_location): New member
	storing the location of a rule's %merge, if any.
	* tests/glr-regression.at (Missed %merge type warnings when LHS type is
	declared later): New test to catch the error fixed by the above patch.

2006-06-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	Get action warnings (grammar_rule_check) right even when symbol
	declarations appear after the rules.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00108.html>
	and
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00151.html>.
	Don't mistake the type of $$ in a midrule to be that of its parent
	rule's $$.
	* src/reader.c (grammar_current_rule_end): Don't invoke
	grammar_rule_check yet since not all symbol declarations may have been
	parsed yet.
	(grammar_midrule_action): Likewise.
	Don't record whether the midrule's $$ has been used yet since actions
	haven't been translated yet.
	Record the midrule's parent rule and its RHS index within the parent
	rule.
	(grammar_current_rule_action_append): Don't translate the action yet
	since not all symbol declarations may have been parsed yet and, thus,
	warnings about types for $$, $n, @$, and @n can't be reported yet.
	(packgram): Translate the action and invoke grammar_rule_check now that
	all symbol declarations have been parsed.
	* src/scan-code.l (handle_action_dollar): Now that this is invoked
	after parsing the entire grammar file, the symbol list here in the case
	of a midrule is actually the midrule's empty RHS, so reference its
	parent rule's RHS where necessary.
	On the other hand, now that you can already know it's a midrule, you
	aren't forced to think $$ has the same type as its parent rule's $$.
	(handle_action_at): In the case of a midrule, reference the parent rule
	where necessary.
	* src/symlist.c (symbol_list_new): Initialize new midrule-related
	members.
	(symbol_list_length): Now that this is invoked after all rules have
	been parsed, a NULL symbol (rather than a NULL symbol list node)
	terminates a rule.  symbol_list_print already does this correctly.
	* src/symlist.h (symbol_list.midrule_parent_rule,
	symbol_list.midrule_parent_rhs_index): New members so that midrules can
	remember their relationships with their parents.
	* tests/input.at (Type Clashes): Extend to catch the midrule $$ error
	fixed by the above patch.
	(_AT_UNUSED_VALUES_DECLARATIONS, AT_CHECK_UNUSED_VALUES): New m4 macros
	implementing...
	(Unused values): ... this old test case and...
	(Unused values before symbol declarations): ... this new test case.
	This one is the same as `Unused values' except that all symbol
	declarations appear after the rules in order to catch the rest of the
	errors fixed by the above patch.

2006-06-26  Joel E. Denny  <jdenny@ces.clemson.edu>

	More cleanup.
	* src/reader.c (current_rule): Declare it static since it's no longer
	used outside this file.
	(grammar_current_rule_action_append): Remove redundant arguments from
	translate_rule_action invocation.
	* src/reader.h (current_rule): Remove this unused extern.
	* src/scan-code.h (translate_rule_action): Remove redundant arguments.
	* src/scan-code.l (translate_rule_action): Likewise.

2006-06-25  Joel E. Denny  <jdenny@ces.clemson.edu>

	Clean up yesterday's patch.
	* parse-gram.y (rhs): Move grammar_midrule_action invocation from here
	to...
	* src/reader.c (grammar_current_rule_action_append): ... here for
	consistency with grammar_current_rule_symbol_append.
	* tests/regression.at (Braced code in declaration in rules section):
	Make yyerror and yylex static as usual.

2006-06-24  Joel E. Denny  <jdenny@ces.clemson.edu>

	Fix bug that mistakes braced code in a declaration in the rules section
	to be a rule action.  Mentioned at
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00105.html>.
	* src/scan-gram.l: Move midrule action detection from the start of the
	scanning of any braced code to...
	* src/parse-gram.y (rhs): ... the parsing of braced code as a rule
	action.  For readability, use $2 and @2 rather than the equivalent
	global variables.
	* tests/regression.at (Braced code in declaration in rules section):
	New test to catch the error fixed by the above patch.

	Work on code readability some.
	* src/scan-code.l (current_rule): Get rid of this misleading and
	redundant declaration: it's actually extern'ed in reader.h.
	(YY_DECL, code_lex, handle_action_dollar, handle_action_at,
	translate_action): Add a rule argument and use it instead of the global
	current_rule.
	(translate_rule_action): This already receives current_rule through an
	argument, so pass it on to translate_action instead of assigning
	current_rule to current_rule.
	(translate_symbol_action, translate_code): Pass rule = NULL to
	translate_action.

2006-06-23  Joel E. Denny  <jdenny@ces.clemson.edu>

	Rename %before-definitions to %start-header and %after-definitions to
	%end-header.  Don't use these declarations to separate pre-prologue
	blocks from post-prologue blocks.  Add new order-independent
	declarations %before-header and %after-header as alternatives to the
	traditional Yacc pre-prologue and post-prologue blocks.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00110.html>.
	* NEWS (2.3+): Update for these changes.
	* data/glr.c (b4_before_definitions): Update to...
	(b4_start_header): ... this.
	(b4_after_definitions): Update to...
	(b4_end_header): ... this.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/yacc.c: Likewise.
	* doc/bison.texinfo (The prologue): Update names, and replace remaining
	prologue blocks with %*-header declarations.
	(Calc++ Parser): Likewise.
	(Decl Summary): Update names.
	(Table of Symbols): Update description.
	* src/parse-gram.y (PERCENT_AFTER_DEFINITIONS): Update to...
	(PERCENT_END_HEADER): ... this.
	(PERCENT_BEFORE_DEFINITIONS): Update to...
	(PERCENT_START_HEADER): ... this.
	(PERCENT_AFTER_HEADER, PERCENT_BEFORE_HEADER): New tokens.
	(declaration): Update token names and m4 macro names.
	When parsing %end-header and %start-header, invoke translate_code
	before muscle_code_grow, and no longer set global booleans to remember
	whether these declarations have been seen.
	Parse new %after-header and %before-header.
	* src/reader.c (before_definitions, after_definitions): Remove.
	(prologue_augment): Accept a new bool argument to specify whether to
	augment the pre-prologue or post-prologue.
	* src/reader.h (before_definitions, after_definitions): Remove these
	extern's.
	(prologue_augment): Add new bool argument.
	* src/scan-gram.l (PERCENT_AFTER_DEFINITIONS): Update to...
	(PERCENT_END_HEADER): ... this.
	(PERCENT_BEFORE_DEFINITIONS): Update to...
	(PERCENT_START_HEADER): ... this.
	(PERCENT_AFTER_HEADER, PERCENT_BEFORE_HEADER): New tokens.
	* tests/actions.at (Printers and Destructors): Update names.

2006-06-22  Joel E. Denny  <jdenny@ces.clemson.edu>

	Add comparison operators for C++ location classes.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00092.html>.
	* data/c++.m4 (b4_define_location_comparison): New boolean %define
	declaration indicating whether filename_type has an operator==.  If
	filename_type is `std::string', it defaults to `1', `0' otherwise.
	* data/location.cc: Iff b4_define_location_comparison is `1', add
	operator== and operator!= for class position and for class location.

	Some minor fixes.
	* src/scan-action.l: Remove unused file.
	* src/symtab.c (symbol_printer_set): Use printer_location not
	destructor_location.
	* src/symtab.h (struct symbol): Replace incorrect source comment for
	printer members.
	* tests/input.at (Incompatible Aliases): Update output with correct
	printer location.

2006-06-20  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't put the pre-prologue in the header file.  For the yacc.c code
	file and the glr.c header and code files, move the pre-prologue before
	the token definitions.  Add new %before-definitions and
	%after-definitions to declare code that will go in both the header file
	and code file.  Discussed at
	<http://lists.gnu.org/archive/html/bison-patches/2005-12/msg00000.html>,
	<http://lists.gnu.org/archive/html/bison-patches/2006-01/msg00016.html>,
	and
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00055.html>.
	* NEWS (2.3+): Describe these changes.
	* data/glr.c (b4_pre_prologue): Move from within to before...
	(b4_shared_declarations): ... this.
	Add new b4_before_definitions before b4_token_enums.
	Add new b4_after_definitions at the end.
	* data/glr.cc (b4_pre_prologue): Replace with...
	(b4_before_definitions): ... this in the header file.
	(b4_after_definitions): New near the end of the header file.
	* data/lalr1.cc (b4_pre_prologue): Move from the header file to the
	code file right before including the header file.
	(b4_before_definitions): New in the previous position of
	b4_pre_prologue in the header file.
	(b4_after_definitions): New near the end of the header file.
	* data/yacc.c: Clean up some m4 quoting especially in the header file.
	(b4_token_enums_defines): In the code file, move to right before
	YYSTYPE for consistency with the header file.
	(b4_before_definitions): New right before b4_token_enums_defines in
	both the header and code file.
	(b4_after_definitions): New right after YYLTYPE and yylloc in both the
	header and code file.
	* doc/bison.texinfo (Prologue): Show use of %before-definitions instead
	of prologues for %union dependencies.
	(Decl Summary): In %defines description, mention the effect of
	%before-definitions and %after-definitions on the header file.
	(Calc++ Parser): Forward declare driver in a %before-definitions rather
	than in the pre-prologue so that make check succeeds.
	(Table of Symbols): Add entries for %before-definitions and
	%after-definitions.
	* src/parse-gram.y (PERCENT_BEFORE_DEFINITIONS): New token for
	%before-definitions.
	(PERCENT_AFTER_DEFINITIONS): New token for %after-definitions.
	(declaration): Parse those declarations and append to
	b4_before_definitions and b4_after_definitions, respectively.
	* src/reader.c (before_definitions, after_definitions): New bools to
	track whether those declarations have been seen.
	(prologue_augment): Add to the post-prologue if %union,
	%before-definitions, or %after-definitions has been seen.
	* src/reader.h (before_definitions, after_definitions): New extern's.
	* src/scan-gram.l: Scan the new declarations.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Place the second
	prologue block in a %before-definitions or a %after-definitions based
	on whether the %union is declared.
	* tests/regression.at (Early token definitions with --yacc, Early token
	definitions without --yacc): Move tests for token definitions into the
	post-prologue since token names are no longer defined in the
	pre-prologue.

2006-06-20  Akim Demaille  <akim@epita.fr>

	* src/symtab.h, src/symtab.c (symbol_from_uniqstr): New.
	(symbol_get): Use it.
	* src/parse-gram.y: Use it.

2006-06-19  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/scan-gram.l: Remove unused declaration of last_string_1 so the
	build succeeds when configured with --enable-gcc-warnings.

2006-06-19  Paul Eggert  <eggert@cs.ucla.edu>

	* src/parse-gram.y (char_name): New function.
	(CHAR, STRING, string_content): For %printer, properly escape.
	(ID): Prefer fputs to fprintf.
	(id): Reindent to be consistent with other rules.
	Properly quote char.

	The Translation Project changed its way of publishing translations
	to maintainers.  I haven't received any responses to my request
	for supporting the old way, or for documenting the new way.  I
	have modified 'bootstrap' to use screen scraping
	(in this case, HTML scraping).  This is unreliable and inelegant,
	but I don't see any better way.  Yuck.
	* bootstrap (TP_URL, WGET_COMMAND): New vars.
	(get_translations): New function, which uses HTML scraping to
	deduce locations of latest translations.
	Use this function to grab both bison and bison-runtime .po files.
	Don't bother priming the pump for the runtime-po domain any more,
	as it's now translated better than bison is.

2006-06-19  Akim Demaille  <akim@epita.fr>

	* src/scan-gram.l: No longer "parse" things after `%union' until
	`{'.  Rather, return a single "%union" token.
	No longer make symbols: return strings, and leave the conversion
	to symbols to the parser.
	(SC_PRE_CODE, token_type): Remove.
	* src/parse-gram.y (%union): New field `character'.
	Sort tokens.
	(CHAR): New token.
	(ID, ID_COLON): Now that the scanner no longer makes them
	identifiers, adjust all uses to invoke symbol_get.
	(id_colon): New, wraps the conversion from string to symbol.
	(%union): Accept a possible union_name.
	(symbol): Now can be a char.
	* data/c.m4 (b4_union_name): Leave a default value.
	* data/glr.c, data/yacc.c: Use it.

2006-06-11  Joel E. Denny  <jdenny@ces.clemson.edu>

	For associating token numbers with token names for "yacc.c", don't use
	#define statements unless `--yacc' is specified; always use enum
	yytokentype.  Most important discussions start at:
	<http://lists.gnu.org/archive/html/bison-patches/2005-09/msg00053.html>,
	<http://lists.gnu.org/archive/html/bison-patches/2005-12/msg00052.html>,
	and
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00043.html>.
	* NEWS (2.3+): Mention.
	* data/c.m4 (b4_yacc_if): New.
	(b4_token_enums_defines): Use b4_yacc_if to decide whether to add the
	token #define's.
	* doc/bison.texinfo (Bison Options): Describe the effect of `--yacc'
	on token name definitions.
	* src/getargs.c (usage): Capitalize `Yacc' in English.
	* src/output.c (prepare): Define b4_yacc_flag.
	* tests/regression.at (Early token definitions): Test that tokens names
	are defined before the pre-prologue not just before the post-prologue.
	Remove this test case and copy to...
	(Early token definitions with --yacc): ... this to test #define's.
	(Early token definitions without --yacc): ... and this to test enums.

2006-06-11  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Reword the post-2.3 change to not be so optimistic about
	removing the old "look-ahead" spelling.
	Update previous look-ahead/lookahead change reports.
	* REFERENCES: look-ahead -> lookahead (since that's
	what he actually wrote).
	* doc/refcard.tex: look ahead -> lookahead,
	look-ahead -> lookahead

2006-06-09  Joel E. Denny  <jdenny@ces.clemson.edu>

	For consistency, use `lookahead' instead of `look-ahead' or
	`look_ahead'.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-01/msg00049.html>
	and then at
	<http://lists.gnu.org/archive/html/bison-patches/2006-06/msg00017.html>.
	* NEWS: For the next release, note the change to `--report'.
	* TODO, doc/bison.1: Update English.
	* doc/bison.texinfo: Update English.
	(Understanding Your Parser, Bison Options): Document as
	`--report=lookahead' rather than `--report=look-ahead'.
	* src/conflicts.c: Update English in comments.
	(lookahead_set): Rename from look_ahead_set.
	(flush_reduce): Rename argument look_ahead_tokens to lookahead_tokens.
	(resolve_sr_conflict): Rename local look_ahead_tokens to
	lookahead_tokens, and update other uses.
	(flush_shift, set_conflicts, conflicts_solve, count_sr_conflicts,
	count_rr_conflicts, conflicts_free): Update uses.
	* src/getargs.c (report_args): Move "lookahead" before alternate
	spellings.
	(report_types): Update uses.
	(usage): For `--report' usage description, state `lookahead' spelling
	rather than `look-ahead'.
	* src/getargs.h (report.report_lookahead_tokens): Rename from
	report_look_ahead_tokens.
	* src/lalr.c: Update English in comments.
	(compute_lookahead_tokens): Rename from compute_look_ahead_tokens.
	(state_lookahead_tokens_count): Rename from
	state_look_ahead_tokens_count.
	Rename local n_look_ahead_tokens to n_lookahead_tokens.
	(lookahead_tokens_print): Rename from look_ahead_tokens_print.
	Rename local n_look_ahead_tokens to n_lookahead_tokens.
	Update other uses.
	Update English in output.
	(add_lookback_edge, initialize_LA, lalr, lalr_free): Update uses.
	* src/print.c: Update English in comments.
	(lookahead_set): Rename from look_ahead_set.
	(print_reduction): Rename argument lookahead_token from
	look_ahead_token.
	(print_core, state_default_rule, print_reductions, print_results):
	Update uses.
	* src/print_graph.c: Update English in comments.
	(print_core): Update uses.
	* src/state.c: Update English in comments.
	(reductions_new): Update uses.
	(state_rule_lookahead_tokens_print): Rename from
	state_rule_look_ahead_tokens_print, and update other uses.
	* src/state.h: Update English in comments.
	(reductions.lookahead_tokens): Rename from look_ahead_tokens.
	(state_rule_lookahead_tokens_print): Rename from
	state_rule_look_ahead_tokens_print.
	* src/tables.c: Update English in comments.
	(conflict_row, action_row): Update uses.
	* tests/glr-regression.at
	(Incorrect lookahead during deterministic GLR,
	Incorrect lookahead during nondeterministic GLR): Rename
	print_look_ahead to print_lookahead.
	* tests/torture.at: Update English in comments.
	(AT_DATA_LOOKAHEAD_TOKENS_GRAMMAR): Rename from
	AT_DATA_LOOK_AHEAD_TOKENS_GRAMMAR.
	(Many lookahead tokens): Update uses.
	* data/glr.c: Update English in comments.
	* lalr1.cc: Likewise.
	* yacc.c: Likewise.
	* src/conflicts.h: Likewise.
	* src/lalr.h: Likewise.
	* src/main.c: Likewise.
	* src/output.c: Likewise.
	* src/parse-gram.c: Likewise.
	* src/tables.h: Likewise.
	* tests/calc.at: Likewise.

2006-06-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/flex-scanner.h (yytext): Remove stray `*/' in #define.

2006-06-07  Paul Eggert  <eggert@cs.ucla.edu>

	* TODO: Add request from Nelson H. F. Beebe to be able to install
	Bison without installing the yacc script.

2006-06-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/flex-scanner.h: For the sake of Flex 2.5.4, don't #define yyleng
	and yytext if they're already #define'd.
	* src/flex-scanner.h, src/location.h: Move #include "system.h" to...
	* src/scan-code-c.c: ... here.
	* src/scan-code.l, src/scan-gram.l: ... and here.  Also #include
	<config.h>.

2006-06-07  Joel E. Denny  <jdenny@ces.clemson.edu>

	Get Bison to build again when configured with --enable-gcc-warnings.
	* src/location.c, src/location.h, src/main.c, src/scan-code.l: Add some
	missing #include's.
	* src/scan-code.l (handle_action_dollar, handle_action_at): Rename
	loc argument as it shadows a global.
	* src/scan-gram.l: Remove stray comma that prevents boundary_set
	invocation.

	* src/.cvsignore: Add scan-code.c.

2006-06-07  Akim Demaille  <akim@epita.fr>

	* src/scan-gram.l: Move the "add a trailing ; to actions" code
	to...
	* src/scan-code.l: here.
	* tests/input.at (Torturing the Scanner): Fix another location
	error.

2006-06-07  Akim Demaille  <akim@epita.fr>

	* src/Makefile.am (BUILT_SOURCES): Fix the trailing backslash.

2006-06-06  Akim Demaille  <akim@epita.fr>

	Extract the parsing of user actions from the grammar scanner.
	As a consequence, the relation between the grammar scanner and
	parser is much simpler.  We can also split "composite tokens" back
	into simple tokens.
	* src/gram.h (ITEM_NUMBER_MAX, RULE_NUMBER_MAX): New.
	* src/scan-gram.l (add_column_width, adjust_location): Move to and
	rename as...
	* src/location.h, src/location.c (add_column_width)
	(location_compute): these.
	Fix the column count: the initial column is 0.
	(location_print): Be robust to ending column being 0.
	* src/location.h (boundary_set): New.
	* src/main.c: Adjust to scanner_free being renamed as
	gram_scanner_free.
	* src/output.c: Include scan-code.h.
	* src/parse-gram.y: Include scan-gram.h and scan-code.h.
	Use boundary_set.
	(PERCENT_DESTRUCTOR, PERCENT_PRINTER, PERCENT_INITIAL_ACTION)
	(PERCENT_LEX_PARAM, PERCENT_PARSE_PARAM): Remove the {...} part,
	which is now, again, a separate token.
	Adjust all dependencies.
	Wherever actions with $ and @ are used, use translate_code.
	(action): Remove this nonterminal which is now useless.
	* src/reader.c: Include assert.h, scan-gram.h and scan-code.h.
	(grammar_current_rule_action_append): Use translate_code.
	(packgram): Bound check ruleno, itemno, and rule_length.
	* src/reader.h (gram_in, gram__flex_debug, scanner_cursor)
	(last_string, last_braced_code_loc, max_left_semantic_context)
	(scanner_initialize, scanner_free, scanner_last_string_free)
	(gram_out, gram_lineno, YY_DECL_): Move to...
	* src/scan-gram.h: this new file.
	(YY_DECL): Rename as...
	(GRAM_DECL): this.
	* src/scan-code.h, src/scan-code.l, src/scan-code-c.c: New.
	* src/scan-gram.l (gram_get_lineno, gram_get_in, gram_get_out):
	(gram_get_leng, gram_get_text, gram_set_lineno, gram_set_in):
	(gram_set_out, gram_get_debug, gram_set_debug, gram_lex_destroy):
	Move these declarations, and...
	(obstack_for_string, STRING_GROW, STRING_FINISH, STRING_FREE):
	these to...
	* src/flex-scanner.h: this new file.
	* src/scan-gram.l (rule_length, rule_length_overflow)
	(increment_rule_length): Remove.
	(last_braced_code_loc): Rename as...
	(gram_last_braced_code_loc): this.
	Adjust to the changes of the parser.
	Move all the handling of $ and @ into...
	* src/scan-code.l: here.
	* src/scan-gram.l (handle_dollar, handle_at): Remove.
	(handle_action_dollar, handle_action_at): Move to...
	* src/scan-code.l: here.
	* src/Makefile.am (bison_SOURCES): Add flex-scanner.h,
	scan-code.h, scan-code-c.c, scan-gram.h.
	(EXTRA_bison_SOURCES): Add scan-code.l.
	(BUILT_SOURCES): Add scan-code.c.
	(yacc): Be robust to white spaces.

	* tests/conflicts.at, tests/input.at, tests/reduce.at,
	* tests/regression.at: Adjust the column numbers.
	* tests/regression.at: Adjust the error message.

2006-06-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/getargs.c (usage): Mention GLR not just LALR(1) in --help output.
	Use Akim's wording from
	<http://lists.gnu.org/archive/html/bison-patches/2006-05/msg00056.html>.

2006-06-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	Between Bison releases, manually append `+' to the previous Bison
	release number, and use that as a signal to automatically print the
	ChangeLog's CVS Id keyword from --version.  Discussed starting at
	<http://lists.gnu.org/archive/html/bison-patches/2006-05/msg00028.html>.
	* ChangeLog: Add Id header.
	* configure.ac (AC_INIT): Append `+' to `2.3'.
	* src/.cvsignore: Add revision.c.
	* src/Makefile.am (bison_SOURCES): Add revision.c and revision.h.
	(BUILT_SOURCES): Add revision.c.
	(revision.c): New target rule.  This file defines a new global variable
	named revision.  It initializes it with either the Id from ChangeLog
	or, if VERSION doesn't contain `+', with the empty string.
	* src/getargs.c (version): Print the value of revision.
	* src/revision.h: Extern revision.

2006-06-05  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.3.
	* configure.ac (AC_INIT): Likewise.

2006-05-30  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (YYRECOVERING): Define to be a function-like macro
	with no arguments, not as an object-like macro.  This is for
	compatibility with data/yacc.c.  Problem reported by John P. Hartmann in
	<http://lists.gnu.org/archive/html/bug-bison/2006-05/msg00059.html>.
	* doc/bison.texinfo (Action Features, Error Recovery, Table of Symbols):
	Document this.

2006-05-30  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/getargs.c (usage): Back out yesterday's modification of the
	--help output so that we don't have to wait for translation before
	releasing 2.3.

2006-05-29  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo (Introduction): Don't say "GLR grammar".
	Problem reported by Akim Demaille.

2006-05-29  Joel E. Denny  <jdenny@ces.clemson.edu>

	* src/getargs.c (usage): Mention GLR not just LALR(1) in --help output.

2006-05-26  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (yy_reduce_print): Omit trailing white space in
	generated source code.  Problem reported by Frans Englich in
	<http://lists.gnu.org/archive/html/bug-bison/2006-05/msg00049.html>.

2006-05-22  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.maint (gzip_rsyncable, GZIP_ENV): Compute within the
	shell, not within 'make', so that 'make' by an ordinary builder
	(using GNU make) does not worry about configuring gzip.  This also
	works around a bug reported independently by Keith Thompson and by
	Georg Schwarz, whereby gzip 1.2.4 --help would output usage on
	stderr rather than stdout, messing up the build logs.

2006-05-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/yacc.c (yyparse): Wrap the final return from yyparse inside YYID
	to make sure that YYID will never be unused.  This fixes a 'make
	maintainer-check' failure caused by the recent changes to the 'Trivial
	grammars' test case, which caused g++ 4.1.0 to complain that YYID was
	not used.
	* data/glr.c (yyparse): Wrap yyparse's return inside YYID just in case.

2006-05-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yyresolveLocations): Remove bogus YYASSERT that the
	state before an empty RHS is always resolved here.  Only the location
	of that state is guaranteed to be resolved, and that's enough.  This
	fixes the remaining bug reported by Derek M. Jones in
	<http://lists.gnu.org/archive/html/bug-bison/2006-05/msg00027.html>.
	* tests/glr-regression.at (Uninitialized location when reporting
	ambiguity): Test the above case.
	Also, the embedded comments in this test case claim it checks the case
	of an empty RHS that has inherited the initial location.  However, the
	corresponding LHS was already resolved, so yyresolveLocations didn't
	actually have reason to modify it.  Fix this by forcing
	nondeterministic operation at the beginning of the parse.

2006-05-20  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_yy_symbol_print_generate):
	(b4_yy_symbol_print_generate): Use 'YYSTYPE const' rather than
	'const YYSTYPE', and similarly for YYLTYPE.  This fixes one
	of the bugs reported today by Derek M Jones in
	<http://lists.gnu.org/archive/html/bug-bison/2006-05/msg00027.html>.
	* doc/bison.texinfo (Value Type): Document that YYSTYPE must be
	defined to be a type name without parens or brackets.
	(Location Type): Similarly for YYLTYPE.
	* tests/regression.at (Trivial grammars): Put in a test for this
	bug that will be caught by 'make maintainer-check' (though not,
	alas, by 'make check' unless your compiler is picky).

2006-05-19  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.2.
	* configure.ac (AC_INIT): Likewise.

2006-05-17  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yyreportTree): Make room in yystates for the state
	preceding the RHS.  This fixes the segmentation fault reported by Derek
	M. Jones in
	<http://lists.gnu.org/archive/html/help-bison/2006-05/msg00035.html>.
	(yyreportTree, yypdumpstack): Subtract 1 from yyrule before printing
	to the user.  Reported for yyreportTree by Derek M. Jones later in the
	same thread.
	* THANKS: Add Derek M. Jones.
	Update my email address.
	Fix typo in Steve Murphy's name.

2006-05-14  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyreportSyntaxError): Fix off-by-one error in
	checking against YYLAST that caused the parser to miss a potential
	alternative in its diagnostic.
	Problem reported by Maria Jose Moron Fernandez in
	<http://lists.gnu.org/archive/html/bug-bison/2006-05/msg00024.html>.
	* data/lalr1.cc (yysyntax_error_): Likewise.
	* data/yacc.c (yysyntax_error): Likewise.
	* tests/regression.at (_AT_DATA_DANCER_Y): Use static array for
	tokens, in case we run into an older C compiler.
	(_AT_DATA_EXPECT2_Y, AT_CHECK_EXPECT2): New macros.
	Use them to check for the off-by-one error fixed above.

	* data/yacc.c (yytnamerr): Fix typo: local var should be of type
	YYSIZE_T, not size_t.
	* tests/regression.at (Trivial grammars): New test, to catch
	the error fixed by the above patch.

2006-05-14  Akim Demaille  <akim@lrde.epita.fr>

	* doc/bison.texinfo (C++ Bison Interface): Clarify the naming
	scheme.
	Reported by Steve Murphy.

2006-05-14  Akim Demaille  <akim@lrde.epita.fr>

	* data/glr.cc, data/lalr1.cc: Using %defines is mandatory.
	* data/glr.cc: b4_location_flag is now b4_locations_flag.

2006-05-14  Akim Demaille  <akim@lrde.epita.fr>

	Implement --trace=m4.
	* src/getargs.c (trace_types, trace_args): Accept trace_m4.
	* src/output.c (output_skeleton): When set, pass -dV to m4.

	Factor the handling of flags in m4.
	* src/output.c (prepare): Rename the muscle names debug, defines,
	error_verbose to debug_flag, defines_flag, error_verbose_flag.
	* data/c.m4: Adjust.
	(_b4_define_flag_if, b4_define_flag_if, b4_defines_if): New.
	Use b4_define_flag_if to define other b4_FLAG_if macros.
	(b4_location_if): As a consequence, rename as...
	(b4_locations_if): this, for consistency.
	Adjust all the skeletons.

2006-05-14  Akim Demaille  <akim@lrde.epita.fr>

	* etc/bench.pm: Shorten bench names.

2006-05-14  Akim Demaille  <akim@lrde.epita.fr>

	* src/output.h, src/output.c (error_verbose): Move to...
	* src/getargs.h, src/getargs.c: here.
	Sort the flags.
	Adjust dependencies.

2006-05-13  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_copyright): Put the special exception for Bison
	skeletons here, so we don't have to put it in each skeleton.  All
	uses changed.  Suggested by Akim Demaille.  Also, wrap the
	copyright notice, in case it is longer than 80 columns.  Replace
	comma by newline after title.

2006-05-11  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo (Calc++ Scanner): The flex behavior is an
	incompatibility, not a bug.  Mention that it wasn't fixed as of
	flex 2.5.33.

2006-05-11  Akim Demaille  <akim@lrde.epita.fr>

	* examples/extexi: Enforce the precedence of concatenation over
	>>.
	Reported by Tommy Nordgren.

2006-05-11  Akim Demaille  <akim@lrde.epita.fr>

	* data/lalr1.cc (yytranslate_): Rename token as t to avoid clashes
	with the member "token".
	Reported by Martin Nylin.

2006-05-08  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c: Switch to Bison 2.2 special-exception language in
	the copyright notice.  Use more-regular format for titles and
	copyright notices.
	* data/glr.cc: Likewise.
	* data/location.cc: Likewise.
	* data/yacc.cc: Likewise.
	* doc/bison.texinfo (Conditions): Document this.
	* NEWS: likewise.  Upgrade version to 2.2.

2006-04-27  Akim Demaille  <akim@lrde.epita.fr>

	* data/glr.cc: Remove dead code.

2006-04-25  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap: Comment out the AM_CPPFLAGS line, since we don't use
	that variable and the line breaks the bootstrap.  Problem reported
	by Juan M. Guerrero.

2006-04-24  Akim Demaille  <akim@lrde.epita.fr>

	* doc/bison.texinfo (Multiple start-symbols): New.

2006-04-24  Akim Demaille  <akim@lrde.epita.fr>

	* etc/README, etc/bench.pl: New.

2006-04-03  Akim Demaille  <akim@lrde.epita.fr>

	* src/scan-gram.l: Be robust to BRACED_CODE appearing before any
	rule.
	Reported by Mickael Labau.
	* tests/input.at (Torturing the Scanner): Test it.

2006-03-16  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo (Decl Summary): Don't mention yylloc twice.
	Problem reported by Bob Rossi.

2006-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo: Remove @shorttitlepage stuff; it wasn't used
	and didn't really work.
	For the index, use @ifnotinfo, not @iftex.
	Minor cleanups of spacing and terminology.

2006-03-12  Akim Demaille  <akim@lrde.epita.fr>

	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Fix the definition
	of AT_NAME_PREFIX when %name-prefix is not used.

2006-03-12  Akim Demaille  <akim@lrde.epita.fr>

	Apply --prefix to C++ skeletons too: they change the namespace.
	The test suite already exercize these cases.
	* data/c++.m4 (b4_namespace): New.
	* data/lalr1.cc, data/glr.cc, data/location.cc: Use it instead of `yy'.
	* data/lalr1.cc (yytnameerr_): Move its definition into the namespace.
	* data/yacc.c, data/glr.c: Remove a useless `[]'.
	* doc/bison.texinfo: Document it.
	(Option Cross Key): Use @multitable in all formats.  It looks
	nicer, even in TeX outputs.
	(Rules): Use the same code whatever the output type is.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS)
	(_AT_BISON_OPTION_POPDEFS): Support AT_NAME_PREFIX.
	* tests/calc.at: Use it, instead of hard coding `yy'.

2006-03-10  Akim Demaille  <akim@lrde.epita.fr>

	* TODO: Remove dead items.

2006-03-10  Akim Demaille  <akim@lrde.epita.fr>

	* doc/FAQ: Remove, merged into...
	* doc/bison.texinfo (FAQ): this.
	* doc/Makefile.am (EXTRA_DIST): Adjust.

2006-03-10  Akim Demaille  <akim@lrde.epita.fr>

	* data/c.m4 (b4_token_enum): Always define the enum of tokens,
	even if empty.
	* data/lalrl1.cc, data/glr.cc (parser::token_type): New.
	* doc/bison.texinfo (Calc++ Scanner): Use it.

2006-03-09  Paul Eggert  <eggert@cs.ucla.edu>

	Fix two nits reported by twlevo, plus one more that I discovered.

	* src/assoc.h (assoc_to_string): Give a name to the arg, as
	this is the usual Bison style.
	* src/location.h (location_print): Likewise.

	* src/reader.h (token_name): Likewise.

2006-03-08  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some nits reported by twlevo.
	* doc/FAQ: Remove ancient Y2K FAQ, replacing it with "secure"
	and "POSIX".  Use more-modern syntax for URLs.  Mention C++
	and ask for Java.  Don't hardwire OS version numbers.  Add
	copyright notice.
	* m4/.cvsignore: Add unistd_h.m4, for latest gnulib.
	* src/conflicts.c (solved_conflicts_obstack): Now static.

2006-03-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Introduction): Mention GLR and C++ as on the web
	page.  Say "you can use it" not "you may use it" as on the web page;
	we're describing capabilities not granting permission.

2006-03-06  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyresolveLocations): Rename local variables to avoid
	shadowing warnings.  Use usual patter for iterating through RHS.
	* tests/glr-regression.at
	(Uninitialized location when reporting ambiguity):
	Modify yylex so that it uses its argument, rather than trying
	to rely on ARGSUSED (which doesn't work for gcc with warnings).
	const char -> char const.

	* tests/Makefile.am ($(srcdir)/package.m4, maintainer-check-valgrind):
	Don't use tabs inside commands; it messes up 'ps'.
	Problem reported by twlevo.

2006-03-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/glr-regression.at (Uninitialized location when reporting
	ambiguity): New test case.
	* data/glr.c (yyresolveLocations): New function, which uses
	YYLLOC_DEFAULT.
	(yyresolveValue): Invoke yyresolveLocations before reporting an
	ambiguity.
	* doc/bison.texinfo (Default Action for Locations): Note
	YYLLOC_DEFAULT's usage for ambiguity locations.
	(GLR Semantic Actions): Cross-reference those notes.

2006-03-04  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/glr-regression.at (Leaked semantic values when reporting
	ambiguity): Remove unnecessary union and type declarations.
	(Leaked lookahead after nondeterministic parse syntax error): New test
	case.
	* data/glr.c (yyparse): Check for zero stacks remaining before
	attempting to shift the lookahead so that you don't lose it.

2006-03-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Avoid memory leaks by not invoking longjmp in yyreportAmbiguity.
	* tests/glr-regression.at (Leaked semantic values when reporting
	ambiguity): New test case.
	* data/glr.c (yyreportAmbiguity): Invoke yyyerror directly and return
	yyabort rather than invoking yyFail, which invokes longjmp.  Remove the
	now unnecessary yystackp parameter.
	(yyresolveValue): Return yyreportAmbiguity's result.  Now the necessary
	destructors can be called.

	* tests/glr-regression.at: Don't invoke bison with `-t' unnecessarily
	in existing testcases.

2006-03-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	Don't leak semantic values for parent RHS when a user action cuts the
	parser, and clean up related code a bit.
	* tests/glr-regression.at (Leaked merged semantic value if user action
	cuts parse): Rename to...
	(Leaked semantic values if user action cuts parse): ... this.  Add check
	for leaked parent RHS values.
	* data/glr.c (yydestroyGLRState): In debugging output, distinguish
	between an unresolved state (non-empty chain of semantic options) and
	an incomplete one (signaled by an empty chain).
	(yyresolveStates): Document the interface.  Move all manipulation of a
	successfully or unsuccessfully resolved yyGLRState to...
	(yyresolveValue): ... here so that yyresolveValue always leaves a
	yyGLRState with consistent data and thus is easier to understand.
	Remove the yyvalp and yylocp parameters since they are always just
	taken from the yys parameter.  When reporting a discarded merged value
	in debugging output, note that it is incompletely merged.  Document the
	interface.
	(yyresolveAction): If resolving any of the RHS states fails, destroy
	them all rather than leaking them.  Thus, as long as user actions are
	written to clean up the RHS correctly, yyresolveAction always cleans up
	the RHS of a semantic option.  Document the interface.

2006-02-27  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyexpandGLRStack): Catch an off-by-one error that
	led to a segmentation fault in GNU Pascal.  Problem reported
	by Waldek Hebisch.

2006-02-21  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo (Mid-Rule Actions): Explain how to bury a
	mid-rule action inside a nonterminal symbol in order to declare a
	destructor for its semantic value.

2006-02-16  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c [(! defined yyoverflow || YYERROR_VERBOSE) && !
	YYSTACK_USE_ALLOCA && ! defined YYSTACK_ALLOC && defined
	__cplusplus && ! defined _STDLIB_H && !
	((defined YYMALLOC || defined malloc) && (defined YYFREE ||
	defined free))]: Include <stdlib.h> rather than rolling our own
	declarations of malloc and free, to avoid problems with
	incompatible declarations (using 'throw') C++'s stdlib.h.  This
	should fix Debian bug 340012
	<http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=340012>,
	reported by Guillaume Melquiond.

2006-02-13  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Clarify symbols versus types in unused-value warnings.

	* configure.ac (AC_INIT): Bump version number.

2006-02-13  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.1a.
	* tests/headers.at (AT_TEST_CPP_GUARD_H): Declare yyerror and yylex,
	since C99 requires this.

2006-02-11  Paul Eggert  <eggert@cs.ucla.edu>

	* m4/c-working.m4: New file.
	* configure.ac (BISON_TEST_FOR_WORKING_C_COMPILER): Use it.

2006-02-10  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.maint: Merge from coreutils.

2006-02-09  Paul Eggert  <eggert@cs.ucla.edu>

	More portability fixes for problems summarized by Nelson H. F. Beebe.

	* m4/cxx.m4 (BISON_TEST_FOR_WORKING_CXX_COMPILER): Catch a
	configuration screwup "./configure CC=/opt/SUNWspro/bin/c89
	CFLAGS="-xarch=generic64" CXX=/opt/SUNWspro/bin/CC
	LDFLAGS="-xarch=generic64" with Sun C 5.7 on Solaris 10; this
	messes up because C++ code is compiled in 32-bit mode but linked
	in 64-bit mode.

2006-02-08  Paul Eggert  <eggert@cs.ucla.edu>

	More portability fixes for problems summarized by Nelson H. F. Beebe.

	* doc/bison.texinfo (Calc++ Scanner): Work around a bug in flex
	2.5.31.  This resembles the 2005-10-10 patch to src/scan-skel.l.

	* examples/calc++/Makefile.am (check_PROGRAMS): Renamed from
	nodist_PROGRAMS, since we don't need to actually compile the
	example if we're just doing a plain 'make'.  This avoids bothering
	the installer unnecessarily about problems due to weird C++
	compilers.

2006-02-06  Paul Eggert  <eggert@cs.ucla.edu>

	More portability fixes for problems summarized by Nelson H. F. Beebe.

	* tests/headers.at (AT_TEST_CPP_GUARD_H): Use #include <...> rather
	than #include "...", and compile with -I'.'.  The old method was
	not portable, according to Posix and the C standard, and it does
	not work with Sun C 5.7, where previous #line directives affect
	the working directory used in later #include "..." directives.

2006-02-06  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	Various DJGGP specific issues in /djgpp

2006-02-02  Paul Eggert  <eggert@cs.ucla.edu>

	More portability fixes for problems summarized by Nelson H. F. Beebe.

	* m4/cxx.m4 (BISON_TEST_FOR_WORKING_CXX_COMPILER): Check that
	'#include <map>' works and that you can apply ++ to iterators.

2006-02-01  Paul Eggert  <eggert@cs.ucla.edu>

	Work around portability problems summarized by Nelson H. F. Beebe in
	<http://lists.gnu.org/archive/html/bug-bison/2005-09/msg00021.html>.

	* m4/cxx.m4 (BISON_TEST_FOR_WORKING_CXX_COMPILER): Check
	that '#include <string>' works.

	* data/lalr1.cc (yytranslate_): No longer inline, to work around a
	porting problem to g++ 3.4.3 on Darwin 7.9.0, where g++ complained
	"warning: sorry: semantics of inline function static data `const
	unsigned char translate_table[262]' are wrong (you'll wind up with
	multiple copies)".

	* lib/bbitset.h (struct bitset_vtable): Rename members not, and,
	or, xor to not_, and_, or_, and xor_, respectively.  This works
	around a bug in GCC 3.4.3 on Irix 6.5, which apparently has a
	random system header somewhere that includes the equivalent of
	<iso646.h>.

	* tests/headers.at (AT_TEST_CPP_GUARD_H): Don't assume that "$CC
	-E" works; it apparently doesn't work with PathScale EKO Compiler
	Suite Version 2.0.

2006-01-30  Joel E. Denny  <jdenny@ces.clemson.edu>

	During deterministic GLR operation, user actions should be able to
	influence the parse by changing yychar.  To make this easier to fix and
	to make glr.c easier to evolve in general, don't maintain yytoken in
	parallel with yychar; just compute yytoken when needed.
	* tests/glr-regression.at (Incorrect lookahead during deterministic
	GLR): Check that setting yychar in a user action has the intended
	effect.
	* data/glr.c (yyGLRStack): Remove yytokenp member.
	(yyclearin): Don't set *yytokenp.
	(yyprocessOneStack, yyreportSyntaxError, yyrecoverSyntaxError): Examine
	yychar rather than *yytokenp to determine the current lookahead.
	Compute yytoken locally when needed.
	(yyparse): Likewise.  Remove the local yytoken that yytokenp used to
	point to.

	* doc/bison.texinfo (Bison Options): Remove stray sentence fragment
	after `--report' documentation.

2006-01-30  Paul Eggert  <eggert@cs.ucla.edu>

	* src/parse-gram.y (grammar_declaration): Location of printer
	symbol is @1, not list->location.  Bug reported by twlevo.
	* tests/input.at (Incompatible Aliases): Adjust to above change.

2006-01-29  Paul Eggert  <eggert@cs.ucla.edu>

	* tests/input.at (AT_CHECK_UNUSED_VALUES): Remove.  Instead, do
	all the test at once.  This makes the output easier to read in the
	normal case.

	Fix a longstanding bug uncovered by bro-0.9a9/src/parse.y, which I
	got from <http://bro-ids.org/download.html>.  The bug is that
	when two actions appeared in succession, the second one was
	scanned before the first one was added to the grammar rule
	as a midrule action.  Bison then output the incorrect warning
	"parse.y:905.17-906.36: warning: unused value: $3".
	* src/parse-gram.y (BRACED_CODE, action): These are no longer
	associated with a value.
	(rhs): Don't invoke grammar_current_rule_action_append.
	(action): Invoke it here instead.
	* src/reader.c (grammar_midrule_action): Now extern.
	(grammar_current_rule_action_append): Don't invoke
	grammar_midrule_action; that is now the scanner's job.
	* src/reader.h (last_string, last_braced_code_loc):
	(grammar_midrule_action): New decls.
	* src/scan-gram.l (last_string): Now extern, sigh.
	(last_braced_code_loc): New extern variable.
	(<INITIAL>"{"): Invoke grammar_midrule_action if the current
	rule already has an action.
	(<SC_BRACED_CODE>"}"): Set last_braced_code_loc before returning.
	* tests/input.at (AT_CHECK_UNUSED_VALUES):
	Add some tests to check that the above changes fixed the bug.

2006-01-27  Paul Eggert  <eggert@cs.ucla.edu>

	* src/reader.c (symbol_should_be_used): Renamed from symbol_typed_p.
	All used changed.  Check whether the symbol has a destructor,
	not whether it is typed.
	* tests/input.at (AT_CHECK_UNUSED_VALUES): Add a destructor, so
	that the values are still reported as unused.  All line numbers
	adjusted.

2006-01-23  Paul Eggert  <eggert@cs.ucla.edu>

	Work around a bug in bro 0.8, which underparenthesizes its
	definition of YYLLOC_DEFAULT.
	* data/glr.c: Change all uses of YYLLOC_DEFAULT to parenthesize
	their arguments.
	* data/lalr1.cc: Likewise.
	* data/yacc.cc: Likewise.

2006-01-22  Paul Eggert  <eggert@cs.ucla.edu>

	Work around a bug in Pike 7.0, and give the Pike folks a
	better way to override the usual int widths.
	* data/yacc.c (b4_int_type): Use yytype_uint8, etc., so that the
	user can override the types.
	(short): #undef, to work around a bug in Pike 7.0.
	(yytype_uint8, yytype_int8, yytype_uint16, yytype_int16): New types.
	(union yyalloc.yyss): Use yytype_int16 rather than short.
	All uses changed.
	(yysigned_char): Remove.
	* src/parse-gram.y (YYTYPE_UINT8, YYTYPE_INT8, YYTYPE_UINT16):
	(YYTYPE_INT16): New macros, to test the new facility in yacc.c.
	* tests/regression.at (Web2c Actions): Adjust to above changes.

	* src/reader.c (check_and_convert_grammar): New function.
	(reader): Close the input file even if something went wrong during
	parsing.  Minor file descriptor leak reported by twlevo.

	* src/assoc.c (assoc_to_string): Use a default: abort (); case
	to pacify gcc -Wswitch-default.
	* src/scan-gram.l (adjust_location): Use a default: break; case
	to pacify gcc -Wswitch-default.
	* src/scan-skel.h (skel_get_lineno, skel_get_in, skel_get_out):
	(skel_get_leng, skel_get_text, skel_set_lineno, skel_set_in):
	(skel_set_out, skel_get_debug, skel_set_debug, skel_lex_destroy):
	Move these decls to scan-skel.l, since they don't need to be
	visible elsewhere.
	* src/scan-skel.l: Accept the above decls.
	(skel_lex): New decl, to pacify GCC when unpatched flex 2.5.31
	is used.

2006-01-21  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.cfg (local-checks-to-skip): Add changelog-check,
	since we don't want to insist on a version number at the start
	of the changelog every time.
	* Makefile.maint: Sync from coreutils a bit better.
	(sc_trailing_blank): Renamed from sc_trailing_space.
	All uses changed.
	(sc_no_if_have_config_h, sc_require_config_h):
	(sc_prohibit_assert_without_use): New rules.
	(sc_obsolete_symbols): Don't catch Makefile.maint itself.
	(sc_dd_max_sym_length): Fix leading spaces in rule.
	(sc_system_h_headers): Prefix with @.
	(sc_useless_cpp_parens, m4-check): Output line numbers.
	(changelog-check): Allow version only in head.
	* data/c.m4: Use "defined FOO" instead of "defined (FOO)", to
	satisfy new Makefile.maint rule.
	* data/glr.c: Likewise.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/yacc.c: Likewise.
	* lib/ebitsetv.c: Likewise.
	* lib/lbitset.c: Likewise.
	* lib/subpipe.c: Likewise.
	* lib/timevar.c: Likewise.
	* src/system.h: Likewise.
	* data/yacc.c (YYSTYPE): Don't generate trailing spaces in output.
	* djgpp/Makefile.maint: Add copyright notice.
	* djgpp/README.in: Likewise.
	* djgpp/config.bat: Likewise.
	* djgpp/config.site: Likewise.
	* djgpp/config_h.sed: Likewise.
	* djgpp/djunpack.bat: Likewise.
	* djgpp/config.sed: Fix copyright notice to match standard format.
	* djgpp/subpipe.h: Likewise.
	* lib/bitsetv-print.c: Likewise.
	* lib/bitsetv.c: Likewise.
	* lib/subpipe.h: Likewise.
	* lib/timevar.c: Likewise.
	* lib/timevar.h: Likewise.
	* djgpp/subpipe.c: Use standard recipe for config.h.
	* lib/abitset.c: Likewise.
	* lib/bitset.c: Likewise.
	* lib/bitset_stats.c: Likewise.
	* lib/bitsetv-print.c: Likewise.
	* lib/bitsetv.c: Likewise.
	* lib/ebitsetv.c: Likewise.
	* lib/get-errno.c: Likewise.
	* lib/lbitset.c: Likewise.
	* lib/subpipe.c: Likewise.
	* lib/timevar.c: Likewise.
	* lib/vbitset.c: Likewise.
	* tests/local.at: Likewise.
	* src/scan-gram.l: Don't include verify.h, since system.h does
	that for us.
	* .x-sc_require_config_h: New file.
	* .x-sc_unmarked_diagnostics: New file.

2006-01-20  Paul Eggert  <eggert@cs.ucla.edu>

	Be a bit more systematic about using 'abort'.
	* lib/abitset.c (abitset_test): Remove ATTRIBUTE_UNUSED; not needed.
	* lib/bitset.c (bitset_bytes, bitset_init, bitset_op4_cmp):
	Put 'default: abort ();' before some other case, to satisfy older
	pedantic compilers.
	* lib/bitset_stats.c (bitset_stats_init): Likewise.
	* lib/ebitset.c (ebitset_elt_find, ebitset_op3_cmp): Likewise.
	* lib/lbitset.c (lbitset_elt_find, lbitset_op3_cmp): Likewise.
	* src/conflicts.c (resolve_sr_conflict): Likewise.
	* src/vcg.c (get_color_str, get_textmode_str, get_shape_str):
	(get_decision_str, get_orientation_str, get_node_alignment_str):
	(get_arrow_mode_str, get_crossing_type_str, get_view_str):
	(get_linestyle_str, get_arrowstyle_str): Likewise.
	* src/conflicts.c (resolve_sr_conflict):
	Use a default case rather than one for the one remaining enum
	value, to catch invalid enum values as well.
	* src/lalr.c (set_goto_map, map_goto):
	Prefer "assert (FOO);" to "if (!FOO) abort ();".
	* src/nullable.c (nullable_compute, token_definitions_output):
	Likewise.
	* src/reader.c (packgram, reader): Likewise.
	* src/state.c (transitions_to, state_new, state_reduction_find):
	Likewise.
	* src/symtab.c (symbol_user_token_number_set, symbol_make_alias):
	(symbol_pack): Likewise.
	* src/tables.c (conflict_row, pack_vector): Likewise.
	* src/scan-skel.l (QPUTS): Remove unnecessary parens.
	(BASE_QPUTS, "@output ".*\n): Remove unnecessary asserts.
	* src/system.h: Don't include <assert.h>.
	(assert): New macro.

	* doc/bison.texinfo (Prologue, Rules, Actions, Union Decl, Action Decl):
	(Destructor Decl, Parser Function, Pure Calling):
	Describe rules for braces inside C code more carefully.

2006-01-19  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some porting glitches found by Nelson H. F. Beebe.
	* lib/abitset.c (abitset_resize): Rewrite to avoid warnings from
	compilers that don't understand that abort () does not return.
	* src/state.c (transitions_to): Likewise.
	* m4/cxx.m4 (BISON_TEST_FOR_WORKING_CXX_COMPILER): Check
	that '#include <cstdlib>' works.
	* src/system.h (INT8_MIN, INT16_MIN, INT32_MIN, INT8_MAX):
	(INT16_MAX, UINT8_MAX, INT32_MAX, UINT16_MAX, UINT32_MAX):
	#undef if ! defined __STDC_VERSION__ || __STDC_VERSION__ < 199901,
	for the benefit of some pre-C99 compilers.

	* bootstrap: Undo changes to gnulib files that autoreconf made.

	Minor fixups to get 'make maintainer-check' to work.
	* configure.ac: Don't use -Wnested-externs, as it's incompatible
	with the new verify.h implementation.
	* data/c.m4 (b4_yy_symbol_print_generate): YYUSE (yyoutput).
	* data/glr.c (YYUSE): Depend on __GNUC__ as well.
	* data/yacc.c (YYUSE): Likewise.
	* data/lalr1.cc (yysyntax_error_): YYUSE (yystate).
	* lib/subpipe.c (end_of_output_subpipe): The args are unused.
	* src/parse-gram.y (declaration): Don't pass a string constant
	to a function that expects char *, since GCC might complain
	about the constant value.
	* src/reader.c (symbol_typed_p): Add parens to pacify GCC.
	* tests/cxx-type.at (_AT_TEST_GLR_CXXTYPES): #undef yylloc and yylval
	before #defining them.
	* tests/glr-regression.at
	(Incorrectly initialized location for empty right-hand side in GLR):
	In yyerror, use the msg arg.
	(Corrupted semantic options if user action cuts parse):
	(Incorrect lookahead during deterministic GLR):
	(Incorrect lookahead during nondeterministic GLR):
	Don't name a local var 'index'; it shadows string.h's 'index'.

2006-01-19  Akim Demaille  <akim@epita.fr>

	* tests/calc.at (_AT_DATA_CALC_Y): Initialize the whole initial
	location, not just parts of it.

2006-01-18  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Document the fact that multiple %unions are now allowed.
	* doc/bison.texinfo (Union Decl): Likewise.
	* TODO: This feature is now implemented, so remove it from
	the wishlist.

	* Makefile.maint: Merge with coreutils Makefile.maint.
	(CVS_LIST): Use build-aux version if available.
	(VERSION_REGEXP): New macro.
	(syntax-check-rules): Add sc_no_if_have_config_h,
	sc_prohibit_assert_without_use, sc_require_config_h,
	sc_useless_cpp_parens.
	(sc_obsolete_symbols): Check for O_NDELAY.
	(sc_dd_max_sym_length): Track coreutils.
	(sc_unmarked_diagnostics): Look in all files, not just *.c.
	(sc_useless_cpp_parens): New rule.
	(news-date-check): Look for version or today's date.
	(changelog-check): Don't require version number near head.
	(copyright-check): Use current year instead of hardwiring 2005.
	(my-distcheck): Depend on $(release_archive_dir)/$(prev-tgz).
	(announcement): Add --gpg-key-ID.

	* djgpp/config.sed: Add copyright notice, and replace "filesystem"
	with "file system".

	Avoid undefined behavior that addressed just before the start of an
	array.  Problem reported by twlevo.
	* src/reader.c (packgram): Prepend a new sentinel before ritem.
	* src/lalr.c (build_relations): Rely on new sentinel.
	* src/gram.c (gram_free): Adjust to new sentinel.

2006-01-12  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yyGLRStateSet): Rename yylookaheadStatuses to
	yylookaheadNeeds.  All uses updated.
	(yysplitStack): Rename local yynewLookaheadStatuses to
	yynewLookaheadNeeds.
	* data/glr-regression.at (Incorrect lookahead during nondeterministic
	GLR): In comments, change `lookahead status' to `lookahead need'.

2006-01-11  Paul Hilfinger  <hilfingr@tully.CS.Berkeley.EDU>

	* data/glr.c (yysplitStack): A little stylistic rewrite.

2006-01-11  Paul Hilfinger  <hilfingr@tully.CS.Berkeley.EDU>

	* data/glr.c (yyaddDeferredAction): Flesh out the comment.

2006-01-11  Joel E. Denny  <jdenny@ces.clemson.edu>

	* doc/bison.texinfo: Fix some typos.
	(GLR Semantic Actions): New subsection discussing special
	considerations because GLR semantic actions might be deferred.
	(Actions): Mention look-ahead usage of yylval.
	(Actions and Locations): Mention look-ahead usage of yylloc.
	(Special Features for Use in Actions): Add YYEOF entry and mention it
	in the yychar entry.
	In the yychar entry, remove mention of the local yychar case (pure
	parser) since this is irrelevant information when writing semantic
	actions and since it's already discussed in `Table of Symbols' where
	yychar is otherwise described as an external variable.
	In the yychar entry, don't call it the `current' look-ahead since it
	isn't when semantic actions are deferred.
	In the yychar and yyclearin entries, add note about deferred semantic
	actions.
	Add yylloc and yylval entries discussing look-ahead usage.
	(Look-Ahead Tokens): When discussing yychar, don't call it the
	`current' look-ahead, and do mention yylval and yylloc.
	(Error Recovery): Cross-reference `Action Features' when mentioning
	yyclearin.
	(Table of Symbols): In the yychar entry, don't call it the `current'
	look-ahead.
	In the yylloc and yylval entries, mention look-ahead usage.

2006-01-08  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/glr-regression.at: Update copyright year to 2006.

2006-01-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yyGLRStateSet): Add yybool* yylookaheadStatuses member to
	use during nondeterministic operation to track which stacks have
	actually needed the current lookahead.
	(yyinitStateSet, yyfreeStateSet, yyremoveDeletes, yysplitStack):
	Allocate, deallocate, resize, and otherwise shuffle space for
	yylookaheadStatuses in parallel with yystates member of yyGLRStateSet.
	(yysplitStack, yyprocessOneStack, yyparse): Set lookahead status
	appropriately during nondeterministic operation.
	(yySemanticOption): Add int yyrawchar, YYSTYPE yyval, and YYLTYPE yyloc
	members to store the current lookahead to be used by the deferred
	user action.
	(yyaddDeferredAction): Add size_t yyk parameter specifying the stack
	from which the RHS is taken.  Set the lookahead members of the new
	yySemanticOption according to the lookahead status for stack yyk.
	(yyglrShiftDefer, yyglrReduce): Pass yyk parameter on to
	yyaddDeferredAction.
	(yyresolveAction): Set yychar, yylval, and yylloc to the lookahead
	members of yySemanticOption before invoking yyuserAction, and then set
	them back to their current values afterward.
	(yyparse): Set yychar = YYEMPTY where yytoken = YYEMPTY.
	(yyreportAmbiguity): Add /*ARGSUSED*/ to pacify lint.
	* tests/glr-regression.at: Remove `.' from the ends of recent test case
	titles for consistency.
	(Leaked merged semantic value if user action cuts parse): In order to
	suppress lint warnings, use arguments in merge function, and assign
	char value < 128 in main.
	(Incorrect lookahead during deterministic GLR): New test case.
	(Incorrect lookahead during nondeterministic GLR): New test case.

2006-01-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/c.m4 (b4_yy_symbol_print_generate): In yy_symbol_print, accept
	!yyvaluep as signal that no semantic value is available to print.
	* data/glr.c (yydestroyGLRState): If state is not resolved, don't try
	to print a semantic value.

2006-01-06  Joel E. Denny  <jdenny@ces.clemson.edu>

	* tests/glr-regression.at: For consistency with my newer test cases,
	don't thank myself.

2006-01-05  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c (yyresolveValue): When merging semantic options, if at
	least one user action succeeds but a later one cuts the parse, then
	destroy the semantic value before returning rather than leaking it.
	(yyresolveStates): If a user action cuts the parse and thus
	yyresolveValue fails, ignore the (unset) semantic value rather than
	corrupting the yyGLRState, and empty the semantic options list since
	the user actions should have called all necessary destructors.
	Simplify code with YYCHK.
	* tests/glr-regression.at (Corrupted semantic options if user action
	cuts parse): New test case.
	(Undesirable destructors if user action cuts parse): New test case.
	Before applying any of this patch, this test case never actually failed
	for me... but only because the corrupted semantic options usually
	masked this bug.
	(Leaked merged semantic value if user action cuts parse): New test
	case.

2006-01-05  Akim Demaille  <akim@epita.fr>

	* src/reader.c, src/symlist.h, src/symlist.c: s/mid_rule/midrule/.

2006-01-04  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_c_modern): New macro, with a new provision for
	_MSC_VER.  Problem reported by Cenzato Marco.
	(b4_c_function_def): Use it.
	* data/yacc.c (YYMODERN_C): Remove.  All uses replaced by
	b4_c_modern.
	(yystrlen, yystpcpy, yyparse): Use b4_c_function... macros rather
	than rolling our own.

2006-01-04  Akim Demaille  <akim@epita.fr>

	Also warn about non-used mid-rule values.
	* src/symlist.h, src/symlist.c (symbol_list): Add a mid_rule
	member.
	(symbol_list_new): Adjust.
	* src/reader.c (symbol_typed_p): New.
	(grammar_rule_check): Use it.
	(grammar_midrule_action): Bind a mid-rule LHS to its rule.
	Check its rule.
	* tests/input.at (AT_CHECK_UNUSED_VALUES): New.
	Use it.
	* tests/actions.at (Exotic Dollars): Adjust.

2006-01-04  Akim Demaille  <akim@epita.fr>

	* src/reader.c (grammar_midrule_action): If $$ is set in a
	mid-rule, move the `used' bit to its lhs.
	* tests/input.at (Unused values): New.
	* tests/actions.at (Exotic Dollars): Adjust: exp is not typed.

2006-01-03  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo (Bison Options): Say more accurately what
	--yacc does.
	* src/parse-gram.y (rules_or_grammar_declaration): Don't complain
	about declarations in the grammar when in Yacc mode, as POSIX does
	not require a diagnostic when the grammar uses extensions.

	* src/reduce.c (reduce_grammar): Remove unnecessary cast to bool.

	Warn about dubious constructions like "%token T T".
	Reported by twlevo.
	* src/symtab.h (struct symbol.declared): New member.
	* src/symtab.c (symbol_new): Initialize it to false.
	(symbol_class_set): New arg DECLARING, specifying whether
	this is a declaration that we want to warn about, if there
	is more than one of them.  All uses changed.

	* data/glr.c, data/glr.cc, data/lalr1.cc, data/yacc.c:
	Allow multiple %union directives, whose contents concatenate.
	* src/parse-gram.y (grammar_declaration): Likewise.
	Use muscle_code_grow, so that we don't need stype_line any more.
	All uses changed.

	* src/muscle_tab.c (muscle_grow): Fix comment.

	* ChangeLog, data/c.m4, data/glr.c, data/glr.cc, data/location.cc:
	* data/yacc.c, src/getargs.c, src/output.c, tests/cxx-type.at:
	Update copyright year to 2006.

2006-01-03  Akim Demaille  <akim@epita.fr>

	Have glr.cc pass (some of) the calc.at tests.
	* data/glr.cc (b4_parse_param_orig): New.
	(b4_parse_param): Improve its definition, and bound it more
	clearly in the skeleton.
	(b4_epilogue): Append, instead of prepending, in order to keep
	#line consistency.
	Simplify the generation of auxiliary functions: locations and
	purity are mandated.
	(b4_global_tokens_and_yystype): Honor it.
	* data/location.cc (c++.m4): Don't include it.
	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Define AT_GLR_CC_IF
	and AT_SKEL_CC_IF.
	* tests/calc.at (AT_CHECK_CALC): Rely on AT_SKEL_CC_IF instead of
	AT_LALR1_CC_IF.
	Be sure to initialize the first position's filename.
	(AT_CHECK_CALC_LALR1_CC): Add %location and %defines, they are
	mandated anyway.
	(AT_CHECK_CALC_GLR_CC): New.
	Use it to exercise glr.cc as a lalr1.cc drop-in replacement.

2006-01-02  Akim Demaille  <akim@epita.fr>

	* src/output.c (output_skeleton): Don't hard wire the inclusion of
	c.m4.
	* data/c++.m4, data/glr.c, data/yacc.c: Include c.m4.
	* data/glr.cc: Do not include stack.hh.

2006-01-02  Joel E. Denny  <jdenny@ces.clemson.edu>

	* data/glr.c: Reformat whitespace with tabs.
	(b4_lpure_formals): Remove this unused m4 macro.
	* tests/cxx-type.at: Reformat whitespace with tabs.
	(_AT_TEST_GLR_CXXTYPES): In union Node, rename node_info to nodeInfo
	since it's a member.  Rename type to isNterm for clarity.

2005-12-29  Akim  <akim@sulaco.local>

	Let glr.cc catch up with symbol_value_print.
	* data/glr.cc (b4_yysymprint_generate): Replace by...
	(b4_yy_symbol_print_generate): this.
	(yy_symbol_print, yy_symbol_value_print): Declare them.

2005-12-28  Paul Eggert  <eggert@cs.ucla.edu>

	* src/location.h (boundary): Note that a line or column equal
	to INT_MAX indicates an overflow.
	* src/scan-gram.l: Include verify.h.  Don't include get-errno.h.
	(rule_length_overflow, increment_rule_length, add_column_width):
	New functions.
	(<INITIAL>{id}, <SC_ESCAPED_STRING>"\"", <SC_ESCAPED_CHARACTER>"'"):
	(<SC_BRACED_CODE>"}"):
	Use increment_rule_length rather than incrementing it by hand.
	(adjust_location, handle_syncline): Diagnose overflow.
	(handle_action_dollar, handle_action_at):
	Fix bug with monstrosities like $-2147483648.
	Remove now-unnecessary checks.
	(scan_integer): Verify assumptions and remove now-unnecessary checks.
	(convert_ucn_to_byte): Verify assumptions.
	(handle_syncline): New arg LOC.  All callers changed.
	Don't store through a value derived from char const * pointer.

	* src/reader.c (grammar_rule_check): Rewrite slightly to avoid
	GCC warnings.

2005-12-27  Paul Eggert  <eggert@cs.ucla.edu>

	* src/reader.c (grammar_midrule_action, grammar_symbol_append):
	Remove unnecessary forward static decls.

2005-12-27  Akim Demaille  <akim@epita.fr>

	* src/reader.c (grammar_current_rule_check): Also check that $$
	is used.
	Take the rule to check as argument, hence rename as...
	(grammar_rule_check): this.
	* src/reader.h, src/reader.c (grammar_rule_begin, grammar_rule_end):
	Rename as...
	(grammar_rule_begin, grammar_rule_end): these, for consistency.
	(grammar_midrule_action, grammar_symbol_append): Now static.
	* tests/torture.at (input): Don't rely on the default action
	being always performed.
	* tests/calc.at: "Set" $$ even when the action is "cut" with
	YYERROR or other.
	* tests/actions.at (Exotic Dollars): Instead of using unused
	values, check that the warning is issued.

2005-12-22  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Improve wording for unused-value warnings.

2005-12-22  Akim Demaille  <akim@epita.fr>

	* data/lalr1.cc, data/yacc.c, data/glr.c, data/c.m4
	(b4_yysymprint_generate): Rename as...
	(b4_yy_symbol_print_generate): this.
	Generate yy_symbol_print instead of yysymprint.
	Generate also yy_symbol_value_print, and use it.

2005-12-22  Akim Demaille  <akim@epita.fr>

	* NEWS: Warn about unused values.
	* src/symlist.h, src/symlist.c (symbol_list, symbol_list_new): Add
	a `used' member.
	(symbol_list_n_get, symbol_list_n_used_set): New.
	(symbol_list_n_type_name_get): Use symbol_list_n_get.
	* src/scan-gram.l (handle_action_dollar): Flag used symbols.
	* src/reader.c (grammar_current_rule_check): Check that values are
	used.
	* src/symtab.c (symbol_print): Accept 0.
	* tests/existing.at: Remove the type information.
	Empty the actions.
	Remove useless actions (beware of mid-rule actions: perl -000
	-pi -e 's/\s*\{\}(?=[\n\s]*[|;])//g').
	* tests/actions.at (Exotic Dollars): Use unused values.
	* tests/calc.at: Likewise.
	* tests/glr-regression.at (No users destructors if stack 0 deleted):
	Likewise.

	* src/gram.c (rule_useful_p, rule_never_reduced_p): Use
	rule_useful_p.

2005-12-21  Paul Eggert  <eggert@cs.ucla.edu>

	Undo 2005-12-01 tentative license wording change.  The wording is
	still being reviewed by the lawyers, and we don't want to wait for
	them before publishing a test release.  For now, revert to the
	previous wording.
	* NEWS: Undo 2005-12-01 change.
	* data/glr.c: Revert to previous license wording.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/location.cc: Likewise.
	* data/yacc.c: Likewise.

	* NEWS: Reword %destructor vs YYABORT etc.
	* data/glr.c: Use American spacing, for consistency.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/yacc.c: Likewise.
	* data/yacc.c: Reformat comments slightly.
	* doc/bison.texinfo: Replace "non-" with "non" when that makes sense,
	for consistency.  Fix some spelling errors and reword recently-included
	text slightly.
	* tests/cxx-type.at: Cast results of malloc, for C++.

2005-12-21  Joel E. Denny  <address@hidden>

	* tests/cxx-type.at: Construct a tree, count the parents of shared
	nodes, and free each node once and only once.  Previously, the memory
	for semantic values was leaked instead.

2005-12-21  Joel E. Denny  <address@hidden>

	* data/glr.c (struct yyGLRStack): If pure, add yyval and yyloc members.
	(yylval, yylloc): If pure, #define to yystackp->yyval and
	yystackp->yyloc similar to yychar and yynerrs.
	(yyparse): If pure, remove local yylval and yylloc. Add local
	yystackp to accommodate pure definitions of yylval and yylloc.
	(b4_lex_param, b4_lyyerror_args, b4_lpure_args): If pure, change
	yylvalp and yyllocp to &yylval and &yylloc.
	(nerrs, char, lval, lloc): If pure, add #define's for b4_prefix[]
	namespace. Previously, nerrs and char were missing, but lval and lloc
	weren't necessary.
	(yyprocessOneStack, yyreportSyntaxError, yyrecoverSyntaxError): Remove
	yylvalp and yyllocp parameters since, if pure, these are now always
	accessible through yystackp.  If not pure, they are still accessible
	globally.
	* data/glr.c, data/yacc.c (YYLLOC_DEFAULT): Change `if (N)' to
	`if (YYID (N))' to pacify lint.

2005-12-21  Akim Demaille  <akim@epita.fr>

	YYACCEPT, YYERROR, and YYABORT, as user actions, should not
	destroy the RHS symbols of a rule.
	* data/yacc.c (yylen): Initialize to 0.
	Keep its value to the number of items to possibly shift.
	In particular, a regular successful parse that ends on YYFINAL by
	a (internal) YYACCEPT must not have yylen != 0.
	(yyerrorlab, yyreturn): Pop the RHS.
	Reorder a bit to emphasize the `shifting' bits of code.
	(YYPOPSTACK): Now accept a number of items to pop.
	* data/lalr1.cc: Likewise.
	* data/glr.c: Formatting changes.
	Use goto instead of fall through.
	* doc/bison.texinfo (Destructor Decl): Complete.

2005-12-20  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	* Makefile.am: DJGPP specific files added to EXTRA_DIST.
	* djgpp/Makefile.maint: Fix PACKAGE variable computation.
	* djgpp/config.bat: Replace every occurrence of the file name
	scan-gram-c.c with c-scan-gram.c. The same for scan-skel-c.c with
	c-scan-skel.c to conform with the 8.3 file name restriction on MSDOS.
	* djgpp/config.sed: Replace every occurrence of the file name
	scan-gram-c.c with c-scan-gram.c. The same for scan-skel-c.c with
	c-scan-skel.c to conform with the 8.3 file name restriction on MSDOS.
	* djgpp/djunpack.bat: DJGPP specific file.
	* djgpp/fnchange.lst: DJGPP specific file.
	* djgpp/README.in: Add new information about how to unpack the bison
	source on MSDOS and other systems which have 8.3 file name restrictions
	using djunpack.bat and fnchange.lst.

2005-12-12  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (build_cvs_prefix): Remove; unused.
	(CVS_PREFIX): Adjust to yesterday's Savannah reorganization
	when getting gnulib.

2005-12-12  "Joel E. Denny" <jdenny@ces.clemson.edu>

	* data/glr.c: Reorder typedef declarations for structs to match order
	of struct declarations.
	Rename yystack everywhere to yystackp except in yyparse where it's not
	a pointer.
	(yyglrShift): Change parameter YYSTYPE yysval to YYSTYPE* yyvalp for
	consistency.
	(yyis_table_ninf): Change 0 to YYID (0) to pacify lint.
	(yyreportSyntaxError): Add /*ARGSUSED*/ to pacify lint.
	(yyparse): Change while (yytrue) to while ( YYID (yytrue)) to pacify
	lint.

2005-12-09  Paul Eggert  <eggert@cs.ucla.edu>

	* tests/sets.at (Accept): Fix typos in regular expression used to
	sed out the final state number.

	Work around portability problem on Solaris 10: flex-generated
	files include <stdio.h> before <config.h>, which messes up
	because the latter defines __EXTENSIONS__.  Address the problem
	by creating two new little files that include <config.h> first,
	then include the flex-generated files.  Rewrite everyone else
	to include <config.h> first, as well.
	* lib/timevar.c: Always include "config.h".
	* src/Makefile.am (bison_SOURCES): Replace scan-gram.l with
	scan-gram-c.c, and scan-skel.l with scan-skel-c.c.
	(EXTRA_bison_SOURCES): New macro.
	* src/scan-gram-c.c, src/scan-skel-c.c: New files.
	* src/system.h: Don't include config.h.
	* src/LR0.c: Include <config.h> first.
	* src/assoc.c: Likewise.
	* src/closure.c: Likewise.
	* src/complain.c: Likewise.
	* src/conflicts.c: Likewise.
	* src/derives.c: Likewise.
	* src/files.c: Likewise.
	* src/getargs.c: Likewise.
	* src/gram.c: Likewise.
	* src/lalr.c: Likewise.
	* src/location.c: Likewise.
	* src/main.c: Likewise.
	* src/muscle_tab.c: Likewise.
	* src/nullable.c: Likewise.
	* src/output.c: Likewise.
	* src/parse-gram.y: Likewise.
	* src/print.c: Likewise.
	* src/print_graph.c: Likewise.
	* src/reader.c: Likewise.
	* src/reduce.c: Likewise.
	* src/relation.c: Likewise.
	* src/state.c: Likewise.
	* src/symlist.c: Likewise.
	* src/symtab.c: Likewise.
	* src/tables.c: Likewise.
	* src/uniqstr.c: Likewise.
	* src/vcg.c: Likewise.

	* src/parse-gram.y: Fix minor problems uncovered by lint.
	(current_lhs, current_lhs_location): Now static.
	(current_assoc): Remove unused variable.

	Cleanups so that Bison-generated parsers have less lint.
	* data/c.m4 (b4_yydestruct_generate, b4_yysymprint_generate):
	Prepend /*ARGSUSED*/, for lint's sake.
	* data/glr.c (YYUSE): Properly parenthesize, and use an alternate
	definition if 'lint' is defined.
	(YYID): New macro (or function, if lint).
	All uses of /*CONSTCOND*/0 replaced by YYID(0).
	* data/yacc.c: Likewise.
	* data/glr.c (yyuserAction, yyuserMerge, yy_reduce_print):
	(yyrecoverSyntaxError): Prepend /*ARGSUSED*/.
	* data/glr.cc (YYLLOC_DEFAULT): Omit /*CONSTCOND*/ since this code
	is C++ only.
	* data/lalr1.cc (YYUSE): Just use a cast, since this code is C++ only.
	* data/yacc.c (YYSTACK_FREE) [defined YYSTACK_ALLOC]:
	Use YYID(0) rather than 0, for lint.
	(yystrlen): Rewrite to avoid lint warning about ptrdiff_t overflow.
	(yysyntax_error): Rewrite to avoid lint warnings about parenthesization.

2005-12-07  Paul Eggert  <eggert@cs.ucla.edu>

	* tests/glr-regression.at
	(Improper handling of embedded actions and dollar(-N) in GLR parsers):
	Close memory leak reported by twlevo.

2005-12-06  "Joel E. Denny" <jdenny@ces.clemson.edu>

	* data/glr.c (yyprocessOneStack, yyparse): Synchronize the shift for
	all stacks.
	(yyparse): Iterate another stack in order to call user destructors.
	* tests/glr-regression.at (No users destructors if stack 0 deleted):
	New test case.
	(Duplicated user destructor for lookahead): This test now is expected
	to succeed.

2005-12-01  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Document the following change.
	* data/yacc.c: Say "parser skeleton" rather than "file", since
	it's no longer just a file.
	* data/glr.c: Grant a special exception for C GLR parsers, that
	reads like the already-existing exception for C LALR(1) parsers.
	* data/glr.cc: Likewise.
	* data/lalr1.cc: Likewise.
	* data/location.cc: Likewise.
	* data/yacc.c: Reword the "written by" statement to clarify that
	it was the parser skeleton, not the entire output file.
	* data/glr.c: Written by Paul Hilfinger.
	* data/glr.cc: Written by Akim Demaille.
	* data/lalr1.cc: Likewise.

2005-11-18  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (yy_reduce_print, YY_REDUCE_PRINT):
	Fix typos in previous change that broke 'make check'.
	YY_REDUCE_PRINT cannot be a pseudo-varargs macro; that isn't
	supported in C.
	* tests/calc.at (_AT_CHECK_CALC,_AT_CHECK_CALC_ERROR):
	Don't check NUM-STDERR-LINES, since the output format is fluctuating.
	We can revert this once things settle down.

	* src/conflicts.c (conflicts_print): Don't print file name twice
	when %expect fails because there were no conflicts.
	* doc/bison.texinfo (Expect Decl): Tighten up wording in previous
	change.
	* tests/conflicts.at (%expect not enough, %expect too much):
	(%expect with reduce conflicts): Adjust to new behavior.

2005-11-18  Akim Demaille  <akim@epita.fr>

	* src/conflicts.c (conflicts_print): Unsatisfied %expectation are
	errors.
	* NEWS: Document this.
	* doc/bison.texinfo (Expect Decl): Likewise.

2005-11-16  Akim Demaille  <akim@epita.fr>

	Generalize the display of semantic values and locations in traces.
	* data/glr.c (yy_reduce_print): Fix indices (again).
	* data/c++.m4 (b4_rhs_value, b4_rhs_location): Don't expect
	literal integers.
	* data/lalr1.cc (yyreduce_print): Rename as...
	(yy_reduce_print): this.
	Display values and locations.
	* data/yacc.c (yy_reduce_print): Likewise.
	(YY_REDUCE_PRINT): Adjust to pass the required arguments.
	(yysymprint): Move higher to be visible from yy_reduce_print).
	(yyparse): Adjust.
	* tests/calc.at: Adjust the expected length of the traces.

2005-11-14  Akim Demaille  <akim@epita.fr>

	* data/glr.c (yy_reduce_print): The loop was quite wrong: type are
	from 1 to N, while values and location start at 0.
	(b4_rhs_location, b4_rhs_value): Add parens around $1 and $2.

2005-11-14  Akim Demaille  <akim@epita.fr>

	* data/glr.c (yy_reduce_print): Fix the $ number.

2005-11-14  Akim Demaille  <akim@epita.fr>

	"Use" parse parameters.
	* data/c.m4 (b4_parse_param_for, b4_parse_param_use): New.
	* data/glr.c, data/glr.cc: Use them.
	* data/glr.c (YYUSE): Have a C++ definition that supports
	non-pointer types.

2005-11-14  Akim Demaille  <akim@epita.fr>

	* data/glr.c (yyexpandGLRStack): Declare only if defined.

2005-11-14  Akim Demaille  <akim@epita.fr>

	* data/glr.cc: New.
	* data/m4sugar/m4sugar.m4 (m4_prepend): New.

2005-11-12  Akim Demaille  <akim@epita.fr>

	Let position and location be PODs.
	* data/location.cc (position::initialize, location::initialize): New.
	(position::position, location::location): Define only if
	b4_location_constructors is defined.
	* data/lalr1.cc (b4_location_constructors): Define it for backward
	compatibility.
	* doc/bison.texinfo (Initial Action Decl): Use initialize.

2005-11-12  Akim Demaille  <akim@epita.fr>

	* data/lalr1.cc: Move the body of the ctor and dtor into the
	parser file (instead of the header).
	Wrap the implementations in a "namespace yy".

2005-11-12  Akim Demaille  <akim@epita.fr>

	Have glr.c include its header file when created.
	* data/glr.c (b4_shared_declarations): New.
	Output them verbatim in the parser if !%defines, otherwise
	output then in the header file, and include it instead.

2005-11-11  Akim Demaille  <akim@epita.fr>

	* data/glr.c: Comment changes.

2005-11-11  Akim Demaille  <akim@epita.fr>

	When yydebug, report semantic and location values for reductions.
	* data/glr.c (yy_reduce_print): Report the semantic values and the
	locations.
	(YY_REDUCE_PRINT): Adjust.
	(yyglrReduce): Use them.
	(b4_rhs_value, b4_rhs_location): Remove m4_eval invocations.
	* data/c.m4 (b4_yysymprint_generate): Specify the const arguments.
	* tests/calc.at (_AT_CHECK_CALC_ERROR): Remove the reduction
	traces.

2005-11-10  Akim Demaille  <akim@epita.fr>

	* data/glr.c (yynewGLRStackItem, YY_RESERVE_GLRSTACK): New.
	(yyaddDeferredAction, yyglrShift, yyglrShiftDefer): Use them.
	(yyexpandGLRStack, YYRELOC): Define only when YYSTACKEXPANDABLE.

2005-11-09  Albert Chin-A-Young  <china@thewrittenword.com>

	* m4/cxx.m4, examples/Makefile.am: Don't build
	examples/calc++ if no C++ compiler is available.  (trivial change)

2005-11-09  Akim Demaille  <akim@epita.fr>

	* src/scan-skel.l: Use a couple of asserts.

2005-11-03  Akim Demaille  <akim@epita.fr>

	In some (weird) cases, the final state number is incorrect.
	Reported by Alexandre Duret-Lutz.
	* src/LR0.c (state_list_append): Remove the computation of
	final_state.
	(save_reductions): Do it here.
	(get_state): Alpha conversion.
	(generate_states): Use a for loop.
	* src/gram.h (item_number_is_rule_number)
	(item_number_is_symbol_number): New.
	* src/state.c: Use assert.
	* src/system.h: Include assert.h.
	* tests/sets.at (Accept): New.

2005-10-30  Paul Hilfinger  <hilfingr@tully.CS.Berkeley.EDU>

	* data/glr.c (yyfill): Adjust comment.
	(yyresolveAction): Initialize default location properly
	for empty right-hand sides.
	(yydoAction): Ditto.
	Add comment explaining apparently dead code.
	* tests/glr-regression.at
	(Incorrectly initialized location for empty right-hand side in GLR):
	New test.

2005-10-30  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (cleanup_gnulib): New function.  Use it to clean up
	gnulib when interrupted.  This fixes some race conditions and
	works around some portability problems (one noted by Paul
	Hilfinger).

2005-10-22  Akim  <akim@epita.fr>

	* Makefile.cfg: Adjust to config -> build-aux.
	Reported by twledo.

2005-10-21  Akim Demaille  <akim@epita.fr>

	* data/c.m4 (b4_yydestruct_generate, b4_yysymprint_generate): Pass
	the %parse-params.
	* data/glr.c (YY_SYMBOL_PRINT, yydestroyGLRState): Adjust.
	* data/yacc.c (b4_Pure_if): Rename as...
	(b4_yacc_pure_if): this.
	(YY_SYMBOL_PRINT, yyparse): Adjust.
	* doc/bison.texinfo: Formatting changes.

2005-10-21  Akim Demaille  <akim@epita.fr>

	Finish the transition config -> build-aux.
	* configure.ac, Makefile.am: Use build-aux.
	* config/prev-version, config/announce-gen, config/Makefile.am:
	Move to...
	* build-aux/prev-version, build-aux/announce-gen,
	* build-aux/Makefile.am: here.

2005-10-14  Akim Demaille  <akim@epita.fr>

	* examples/calc++/test: Use set -x only when VERBOSE.

2005-10-13  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Bison now warns if it finds a stray `$' or `@' in an action.
	* src/scan-gram.l (<SC_BRACED_CODE>[$@]): Implement this.

2005-10-13  Akim Demaille  <akim@epita.fr>

	* src/scan-skel.l: Output the base name parts of the parser and
	header file names.
	* tests/output.at (AT_CHECK_OUTPUT): Support subdirectories, and
	additional checks.
	Use this to exercise C++ outputs in subdirs.
	Reported by Oleg Smolsky.

2005-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_c_function_def): Look at __C99_FUNC__, not at
	__STDC_VERSION__, as IBM cc 7.0 doesn't define the latter either.
	Problem reported by John P. Hartmann.
	* data/yacc.c (YYMODERN_C): Likewise.  Don't define if the user has
	already defined it.

2005-10-12  Akim Demaille  <akim@epita.fr>

	* src/parse-gram.y (version_check): Exit 63 to please missing
	(stands for "version mismatch).
	* tests/input.at, doc/bison.texinfo: Adjust.

2005-10-10  Paul Eggert  <eggert@cs.ucla.edu>

	Work around portability problems with Visual Age C compiler
	(xlc and xlC_r) reported by John P. Hartmann.
	* data/location.cc (initial_column, initial_line): Remove.
	All uses replaced by 0 and 1.
	* src/scan-gram.l (gram_wrap): Redefine to avoid bug in flex 2.5.31
	that xlc complains about.
	* src/scan-skel.l (skel_wrap): Likewise.
	* data/c.m4 (b4_c_function_def): Look at __STDC_VERSION__ as well
	as __STDC__.
	* data/yacc.c (YYMODERN_C): New macro, which also looks at
	__STDC_VERSION__.  Use it everywhere instead of looking at
	__STDC__ and __cplusplus.

2005-10-10  Akim Demaille  <akim@epita.fr>

	* examples/calc++/test: Be quiet unless VERBOSE.

2005-10-05  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (yydestruct, yysymprint):
	Use YYUSE instead of casting to void.
	* data/glr.c (YYUSE): New macro.
	(yyuserMerge, yyreportAmbiguity, yyreportSyntaxError):
	Use it instead of rolling our own.
	(YYLLOC_DEFAULT, YYCHK, YYDPRINTF, YY_SYMBOL_PRINT, YY_REDUCE_PRINT):
	(YYCHK1):
	Use /*CONSTCOND*/ to suppress lint warnings.
	* data/lalr1.cc (YYLLOC_DEFAULT, YY_SYMBOL_PRINT, YY_REDUCE_PRINT):
	(YY_STACK_PRINT): Use 'false' not '0'.
	(YYUSE): New macro.
	(yysymprint_, yydestruct_): Use it instead of rolling our own.
	* data/yacc.c (YYUSE): New macro.
	(YYCOPY, YYSTACK_RELOCATE, YYBACKUP, YYLLOC_DEFAULT):
	(YYDPRINTF, YY_SYMBOL_PRINT, YY_STACK_PRINT, YY_REDUCE_PRINT):
	(yyerrorlab): Use /*CONSTCOND*/ to suppress lint warnings.


	* data/m4sugar/m4sugar.m4 (_m4_map): New macro.
	(m4_map, m4_map_sep): Use it.  Handle the empty list correctly.

2005-10-04  Paul Eggert  <eggert@cs.ucla.edu>

	Undo the parts of the unlocked-I/O change that substituted
	putc or puts for printf.  This might hurt performance a bit,
	but some people prefer the printf style.
	* data/c.m4 (yysymprint): Prefer printf to puts and putc.
	* data/glr.c (YYFPUTC, YYFPUTS, YYDPUTS): Remove.
	All uses replaced by YYFPRINTF and YYDPRINTF.
	* data/yacc.c: Likewise.
	* lib/bitset.c (bitset_print): Likewise.
	* lib/bitsetv.c (bitsetv_dump, debug-bitsetv): Prefer printf to
	putc and puts.
	* lib/lbitset.c (debug_lbitset): Likewise.
	* src/closure.c (print_firsts, print_fderives): Likewise.
	* src/gram.c (grammar_dump): Likewise.
	* src/lalr.c (look_ahead_tokens_print): Likewise.
	* src/output.c (escaped_output): Likewise.
	(user_actions_output): Break apart two printfs.
	* src/parse-gram.y (%printer): Prefer printf to putc and puts.
	* src/reduce.c (reduce_print): Likewise.
	* src/state.c (state_rule_look_ahead_tokens_print): Likewise.
	* src/system.h: Include unlocked-io.h rathe than stdio.h.

	* data/glr.c (yyuserMerge, yyreportAmbiguity, yyreportSyntaxError):
	Use assignments rather than casts-to-void to suppress
	unused-variable warnings.  This pacifies 'lint'.
	* data/lalr1.cc (yysymprint_, yydestruct_): Use a call to suppress
	unused-variable warnings.

2005-10-03  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	* Makefile.am: DJGPP specific files added to EXTRA_DIST.

2005-10-02  Paul Eggert  <eggert@cs.ucla.edu>

	Use unlocked I/O for a minor performance improvement on hosts like
	GNU/Linux and Solaris that support unlocked I/O.  The basic idea
	is to use the gnlib unlocked-io module, and to prefer putc and
	puts to printf when either will work (since the latter doesn't
	come in an unlocked flavor).
	* bootstrap (gnulib_modules): Add unlocked-io.
	* data/c.m4 (yysymprint): Prefer puts and putc to printf.
	* data/glr.c (YYFPUTC, YYFPUTS, YYDPUTS): New macros.
	Prefer them to YYFPRINTF and YYDPRINTF if either will do,
	and similarly for puts and putc and printf.
	* data/yacc.c: Likewise.
	* lib/bitset.c (bitset_print): Likewise.
	* lib/bitset.h [USE_UNLOCKED_IO]: Include unlocked-io.h.
	* lib/bitsetv.c (bitsetv_dump, debug-bitsetv): Prefer putc and puts
	to printf.
	* lib/lbitset.c (debug_lbitset): Likewise.
	* src/closure.c (print_firsts, print_fderives): Likewise.
	* src/gram.c (grammar_dump): Likewise.
	* src/lalr.c (look_ahead_tokens_print): Likewise.
	* src/output.c (escaped_output): Likewise.
	(user_actions_output): Coalesce two printfs.
	* src/parse-gram.y (%printer): Prefer putc and puts to printf.
	* src/reduce.c (reduce_print): Likewise.
	* src/state.c (state_rule_look_ahead_tokens_print): Likewise.
	* src/system.h: Include unlocked-io.h rather than stdio.h.

	* data/lalr1.cc: Don't put an unmatched ' in a dnl comment, as
	this confuses xgettext.

2005-10-02  Akim Demaille  <akim@epita.fr>

	* bootstrap (gnulib_modules): Add strverscmp.
	* lib/.cvsignore: Add strverscmp.c, strverscmp.h.
	* m4/.cvsignore: Add strverscmp.m4.
	* src/parse-gram.y (%require): New token, new rule.
	(version_check): New.
	* src/scan-gram.l (%require): Adjust.
	* tests/input.at (AT_REQUIRE): New.
	Use it.
	* doc/bison.texinfo (Require Decl): New.
	(Calc++ Parser): Use %require.

2005-10-02  Akim Demaille  <akim@epita.fr>

	* data/location.cc: New.

2005-10-02  Paul Eggert  <eggert@cs.ucla.edu>,
	    Akim Demaille  <akim@epita.fr>

	Make sure -odir/foo.cc creates dir/location.hh etc.
	* src/files.h (spec_outfile, parser_file_name, spec_name_prefix)
	(spec_file_prefix, spec_verbose_file, spec_graph_file)
	(spec_defines_file): Now const.
	(dir_prefix): New.
	(short_base_name): Remove.
	* src/files.c: Adjust.
	(dirname.h): Include.
	(base_name): Don't prototype it.
	(finput): Remove, duplicates gram_in.
	(full_base_name, short_base_name): Replace by...
	(all_but_ext, all_but_tab_ext): these.
	(compute_base_names): Rename as...
	(compute_file_name_parts): this.
	Update to compute the new variables, including dir_prefix.
	Adjust dependencies.
	* src/output.c (prepare): Output them.
	* src/reader.c: Adjust to use gram_in, not finput.
	* src/scan-skel.l (@dir_prefix@): New.

2005-10-02  Juan Manuel Guerrero  <juan.guerrero@gmx.de>

	* lib/subpipe.c: New function end_of_output_subpipe() added
	to allow support for non-posix systems. This is a no-op function
	for posix systems.

	* lib/subpipe.h: New function end_of_output_subpipe() added
	to allow support for non-posix systems. This is a no-op function
	for posix systems.

	* src/output.c (output_skeleton): Use end_of_output_subpipe() to
	handle the lack of pipe/fork functionality on non-posix systems.

	* djgpp/Makefile.maint: DJGPP specific file.

	* djgpp/README.in: DJGPP specific file.

	* djgpp/config.bat: DJGPP specific configuration file.

	* djgpp/config.sed: DJGPP specific configuration file.

	* djgpp/config.site: DJGPP specific configuration file.

	* djgpp/config_h.sed: DJGPP specific configuration file.

	* djgpp/subpipe.c: DJGPP specific replacement file for lib/subpipe.c.

	* djgpp/subpipe.h: DJGPP specific replacement file for lib/subpipe.h.

2005-10-02  Akim Demaille  <akim@epita.fr>

	* data/location.cc: New, extract from...
	* data/lalr1.cc: here.
	(location.hh): Include it after the user prologue, in case the
	filename type is defined by the user.
	Forward declaration location and position before the pre-prologue.
	(yyresult_): Rename as...
	(yyresult): this, it's a local variable, not an attribute.
	* data/Makefile.am (dist_pkgdata_DATA): Adjust.

2005-10-01  Akim Demaille  <akim@epita.fr>

	* examples/extexi: Restore the #line generation.

2005-09-30  Akim Demaille  <akim@epita.fr>,
	    Alexandre Duret-Lutz <adl@gnu.org>

	Move the token type and YYSTYPE in the parser class.
	* data/lalr1.cc (stack.hh, location.hh): Include earlier.
	(parser::token): New, from the moved free definition of tokens.
	(parser::semantic_value): Now a full definition instead of an
	indirection to YYSTYPE.
	(b4_post_prologue): No longer included in the header file, but
	in the implementation file.
	* doc/bison.texi (C+ Language Interface): Update.
	* src/parse-gram.y: Support unary %define.
	* tests/actions.at: Define global_tokens_and_yystype for backward
	compatibility until we update the tests.
	* tests/calc.at: Idem.
	(first_line, first_column, last_line, last_column): Define for lalr1.cc
	to simplify the code.

2005-09-29  Paul Eggert  <eggert@cs.ucla.edu>

	Port to SunOS 4.1.4, which lacks strtoul and strerror.
	Ah, the good old days!  Problem reported by Peter Klein.
	* bootstrap (gnulib_modules): Add strerror, strtoul.
	* lib/.cvsignore: Add strerror.c, strtol.c, strtoul.c
	* m4/.cvsignore: Add strerror.m4, strtol.m4, strtoul.m4.

2005-09-29  Akim Demaille  <akim@epita.fr>

	* data/c.m4 (b4_error_verbose_if): New.
	* data/lalr1.cc: Use it.
	(YYERROR_VERBOSE_IF): Remove.
	(yyn_, yylen_, yystate_, yynerrs_, yyerrstatus_): Remove as
	parser members, replaced by...
	(yyn, yylen, yystate, yynerss, yyerrstatus): these parser::parse
	local variables.
	(yysyntax_error_): Takes the state number as argument.
	(yyreduce_print_): Use the argument yyrule, not the former
	attribute yyn_.

2005-09-26  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap (gnulib_modules): Add verify.
	* lib/.cvsignore: Add verify.h.
	* src/getargs.c: Use ARGMATCH_VERIFY rather than verify.
	* src/system.h (verify): Remove.
	Include verify.h instead.
	* src/tables.c (tables_generate): Use new API for 'verify'.

2005-09-21  Paul Eggert  <eggert@cs.ucla.edu>

	* tests/local.at (_AT_BISON_OPTION_PUSHDEFS): Do not use
	local variables whose names begin with 'yy'.
	* tests/calc.at (_AT_DATA_CALC_Y): Likewise.
	Trivial changes from Joel E. Denny.

	* bootstrap (gnulib_modules): Remove alloca.  Bison doesn't need
	it itself.
	* src/main.c (main) [C_ALLOCA]: Don't flush alloca'ed memory; we
	don't use alloca any more.

	* data/yacc.c [YYSTACK_USE_ALLOCA && !defined __GNUC__ && ! defined
	__BUILTIN_VA_ARG_INCR && ! defined _AIX && ! defined _MSC_VER &&
	defined _ALLOCA_H]: Don't include <stdlib.h>; not needed in this case.
	* tests/torture.at (Exploding the Stack Size with Alloca): Adjust
	to match yacc.c, to test more hosts.

2005-09-20  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (YYSIZE_T): Reindent to make it clearer.  This
	doesn't affect behavior.
	(YYSTACK_ALLOC) [YYSTACK_USE_ALLOCA]: Improve support for
	Solaris, AIX, MSC.
	(_STDLIB_H): Renamed from YYINCLUDED_STDLIB_H.  All uses changed.
	This works a bit better with glibc, if user code has already included
	stdlib.h.
	* doc/bison.texinfo (Bison Parser): Document that users can't
	arbitrarily use malloc and free for other purposes.  Document
	that <alloca.h> and <malloc.h> might be included.
	(Table of Symbols): Under YYSTACK_USE_ALLOCA, Don't claim that the
	user must declare alloca.

	* HACKING (release): Forewarn the Translation Project about
	stable releases.

2005-09-20  Akim Demaille  <akim@epita.fr>

	* data/glr.c: Use b4_token_enums, not b4_token_enums_defines.

2005-09-19  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (YYSIZE_MAXIMUM): New macro.
	(YYSTACK_ALLOC_MAXIMUM): Use it.
	(yysyntax_error): New function.
	(yyparse) [YYERROR_VERBOSE]: Don't leak memory indefinitely if
	multiple syntax errors are reported, and alloca is being used.
	Instead, reallocate buffers twice as big each time, so that
	we waste at most half the allocated memory.  Start with a small
	(128-byte) buffer that will suffice in most cases anyway.
	Use yysyntax_error to do most of the work.

	* doc/bison.texinfo (Error Reporting, Table of Symbols):
	yynerrs is the number of errors reported, not the number of
	errors encountered.

	* tests/glr-regression.at (Duplicated user destructor for lookahead):
	Mark it as expected to fail.
	Cast result of malloc; problem reported by twlevo@xs4all.nl.
	* tests/actions.at, tests/calc.at, tests/glr-regression.at:
	Don't start user-code symbols with "yy", to avoid name space problems.

2005-09-19  Akim Demaille  <akim@epita.fr>

	Remove the traits, failed experiment.
	It never proved useful, and anyway because of the current
	definition, it was not possible to have several specialization of
	this traits, making it useless.
	* data/lalr1.cc (yy:traits): Remove.
	Inline its definitions in the parser class.

2005-09-19  Akim Demaille  <akim@epita.fr>

	* tests/atlocal.in (LIBS): Pass INTLLIBS to address failures on at
	least Mac OSX with a /usr/local install of gettext.

2005-09-19  Akim Demaille  <akim@epita.fr>

	* data/lalr1.cc (yyparse): Rename yylooka and yyilooka as yychar
	and yytoken for similarity with the other skeletons.

2005-09-19  Akim Demaille  <akim@epita.fr>

	* NEWS, configure.ac: update version number to 2.1a.

2005-09-16  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.1.

	* NEWS: Remove notice of yytname change, since it was never in an
	official release.
	* data/glr.c (yydestroyGLRState): Rename local var to avoid shadowing
	diagnostic.
	* src/output.c (prepare): Likewise.
	* data/lalr1.cc (YYERROR_VERBOSE_IF): New macro.
	(yysyntax_error_): Use it to avoid GCC warning when YYERROR_VERBOSE
	is not defined.  This is an awful hack, but it's enough for now.
	All callers changed.
	* tests/glr-regression-at (make_value): Args are const pointers now,
	to avoid GCC warning.
	(Duplicated user destructor for lookahead): New test.  Currently
	skipped.  It fails on my host but I'm not sure it'll always fail.

2005-09-16  Akim Demaille  <akim@epita.fr>

	* src/symtab.h (struct symbol): Declare the printer and destructor
	as const, to avoid accidental calls to free.
	(symbol_destructor_set, symbol_printer_set): Adjust.
	* src/symtab.c: Adjust.

2005-09-16  Akim Demaille  <akim@epita.fr>

	* data/c.m4 (b4_token_enums): New.
	(b4_token_defines): Rename as...
	(b4_token_enums_defines): this.
	(b4_token_defines): New, output only the #defines.
	* data/yacc.c, data/glr.c: Adjust.
	* data/lalr1.cc: Use b4_token_enums instead of b4_token_enums_defines.
	* data/c.m4 (b4_yydestruct_generate, b4_yysymprint_generate): Define
	as default values.

2005-09-16  Akim Demaille  <akim@epita.fr>

	* data/lalr1.cc (yylex_): Remove, inline its code.
	(yyreport_syntax_error_): Remove, replaced by...
	(yysyntax_error_): this which returns a string and leaves to the
	caller the call to the users' error function.
	(yylooka_, yyilooka_, yylval, yylloc, yyerror_range_, yyval, yyloc):
	Move from members of the parser object...
	(yylooka, yyilooka, yylval, yylloc, yyerror_range, yyval, yyloc):
	to local variables of the parse function.

2005-09-16  Akim Demaille  <akim@epita.fr>

	* doc/bison.texinfo (Calc++ Parser): Don't promote defining YYEOF
	since it's in Bison's name space.

2005-09-15  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyresolveValue): Add default case to pacify
	gcc -Wswitch-default.  Problem reported by twlevo@xs4all.nl.

	* NEWS: Document when yyparse started to return 2.
	* doc/bison.texinfo (Parser Function): Document when yyparse
	returns 2.

	* data/lalr1.cc: Revert part of previous change, as it's incompatible.
	(b4_filename_type): Renamed back from b4_file_name_type.  All uses
	changed.
	(class position): file_name -> filename (reverting).  All uses changed.

2005-09-14  Paul Eggert  <eggert@cs.ucla.edu>

	* examples/calc++/Makefile.am ($(calc_sources_generated)): Don't
	do anything if $@ exists.  This reverts part of the 2005-07-07
	patch.

2005-09-11  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.am (EXTRA_DIST): Do not distribute REFERENCES; it
	contains obsolete information and isn't worth distributing as a
	separate file anyway.
	* data/glr.c [defined YYSETJMP]: Don't include <setjmp.h>.
	(YYJMP_BUF, YYSETJMP, YYLONGJMP) [!defined YYSETJMP]: New macros.
	All uses of jmp_buf, setjmp, longjmp changed to use these instead.
	(yyparse): Abort if user code uses longjmp to throw an unexpected
	value.

2005-09-09  Paul Eggert  <eggert@cs.ucla.edu>

	* data/c.m4 (b4_identification): Define YYBISON_VERSION.
	Suggested by twlevo@xs4all.nl.

	* data/glr.c (YYCHK1): Do not assume YYE is in range.
	This avoids a diagnostic from gcc -Wswitch-enum.
	Problem reported by twlevo@xs4all.nl.

	* doc/bison.texinfo: Don't use "filename", as per GNU coding
	standards.  Use "file name" or "file" or "name", depending on
	the context.
	(Invocation): The output of "bison hack/foo.y" goes to foo.tab.c,
	not to hack/foo.tab.c.
	(Calc++ Top Level): 2nd arg of main is not const.
	* data/glr.c: b4_filename -> b4_file_name.
	* data/lalr1.cc: Likewise.  Also, b4_filename_type -> b4_file_name_type.
	All uses changed.
	(class position): filename -> file_name.  All uses changed.
	* data/yacc.c: b4_filename -> b4_file_name.
	* lib/bitset.h: filename -> file_name in local vars.
	* lib/bitset_stats.c: Likewise.
	* src/files.c: Likewise.
	* src/scan-skel.l ("@output ".*\n): Likewise.
	* src/files.c (file_name_split): Renamed from filename_split.
	* src/muscle_tab.c (muscle_init): Output b4_file_name, not b4_filename.

2005-09-08  Paul Eggert  <eggert@cs.ucla.edu>

	* lib/.cvsignore: Add pipe-safer.c, stdio--.h, unistd--.h,
	to accommodate latest gnulib.

	* tests/glr-regression.at (Duplicate representation of merged trees):
	Add casts to pacify g++.  Problem reported by twlevo@xs4all.nl.

	* bootstrap: Add comment as to why the AM_LANGINFO_CODESET hack is
	needed.

2005-08-26  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yydestroyGLRState): Renamed from yydestroyStackItem.
	All uses changed.  Invoke user destructor after an error during a
	split parse (trivial change from Joel E. Denny).

	* tests/glr-regression.at
	(User destructor after an error during a split parse):  New test case.
	Problem reported by Joel E. Denny in:
	http://lists.gnu.org/archive/html/bison-patches/2005-08/msg00029.html

2005-08-25  Paul Eggert  <eggert@cs.ucla.edu>

	* README-cvs: Give URLs for recommended tools.
	Mention Gzip version problem, and bootstrapping issues.
	Remove troubleshooting section, as it's somewhat obsolete.

	* bootstrap (no_cache): New var, to accommodate different wget
	variants.  Use it instead of '-C off'.  Problem reported by
	twlevo@xs4all.nl.

	* data/glr.c (yydestroyStackItem): New function.
	(yyrecoverSyntaxError, yyreturn): Use it to improve quality of
	debugging information.  Problem reported by Joel E. Denny.

2005-08-25  Akim Demaille  <akim@epita.fr>

	* tests/local.at (AT_COMPILE_CXX): Pass $LINKS too.

2005-08-24  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyrecoverSyntaxError, yyreturn):
	Don't invoke destructor on unresolved entries.
	* tests/glr-regression.at
	(User destructor for unresolved GLR semantic value): New test case.
	Problem reported by Joel E. Denny in:
	http://lists.gnu.org/archive/html/bison-patches/2005-08/msg00016.html

2005-08-21  Paul Eggert  <eggert@cs.ucla.edu>

	* lib/.cvsignore: Remove realloc.c, strncasecmp.c, xstrdup.c.
	Add strnlen.c.
	* m4/.cvsignore: Remove codeset.m4, gettext.m4, lib-ld.m4,
	lib-prefix.m4, po.m4.

	* data/glr.c (yyreturn): Use "Cleanup:" rather than "Error:"
	in yydestruct diagnostic, since it might not be an error.
	Problem reported by Joel Denny near end of
	<http://lists.gnu.org/archive/html/help-bison/2005-07/msg00040.html>.
	* data/lalr1.cc (yyerturn): Likewise.
	* data/yacc.c (yyreturn): Likewise.
	* tests/calc.at (_AT_CHECK_CALC_ERROR): Adjust to the above change.

	* src/files.c: Remove obsolete FIXME comment.

	* data/glr.c (YY_SYMBOL_PRINT): Append a newline, for consistency
	with the other templates, and to fix bogus run-on messages such
	as the one reported at the end of
	<http://lists.gnu.org/archive/html/help-bison/2005-07/msg00040.html>.
	All callers changed to avoid the newline.
	(yyprocessOneStack): Output two lines rather than one, to accommodate
	the above change.  This changes the debug output format slightly.

	* data/glr.c (yyresolveValue): Fix redundant parse tree problem
	reported by Joel E. Denny in
	<http://lists.gnu.org/archive/html/bison-patches/2005-08/msg00004.html>
	(trivial change).
	* tests/glr-regression.at (Duplicate representation of merged trees):
	New test, from Joel E. Denny in:
	<http://lists.gnu.org/archive/html/help-bison/2005-07/msg00013.html>.
	* THANKS: Add Joel E. Denny.

	* configure.ac (AC_INIT): Bump to 2.0c.

2005-07-24  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Version 2.0b.

	* Makefile.am (SUBDIRS): Put examples before tests, so that
	"make check" doesn't finish with "All 1 tests passed".

	* tests/regression.at (Token definitions): Don't rely on
	AT_PARSER_CHECK for data that contains backslashes.  It currently
	uses 'echo', and 'echo' isn't portable if its argument contains
	backslashes.  Problem found on OpenBSD 3.4.  Also, do not assume
	that the byte '\0xff' is not printable in the C locale; it is,
	under OpenBSD 3.4 (!).  Luckily, '\0x80' through '\0x9e' are
	not printable, so use '\0x81' to test.

	* data/glr.c (YYOPTIONAL_LOC): Define even if it's not a recent
	version of GCC, since the macro is used with non-GCC compilers.

	Fix core dump reported by Pablo De Napoli in
	<http://lists.gnu.org/archive/html/bug-bison/2005-07/msg00053.html>.
	* tests/regression.at (Invalid inputs with {}): New test.
	* src/parse-gram.y (token_name): Translate type before using
	it as an index.

	* data/glr.c (ATTRIBUTE_UNUSED): Remove, since it infringes on
	the user's name space.  All uses changed to __attribute__
	((__unused__)).
	(yyFail, yyMemoryExhausted, yyreportAmbiguity):
	Add __attribute__ ((__noreturn__)).

	* etc/clcommit: Remove.  We weren't using it, and it failed
	"make maintainer-distcheck".
	* Makefile.maint: Merge from coreutils.
	(CVS_LIST, CVS_LIST_EXCEPT): New macros.
	(syntax-check-rules): Change list of rules as described below.
	(sc_cast_of_alloca_return_value, sc_dd_max_sym_length):
	(sc_file_system, sc_obsolete_symbols, sc_prohibit_atoi_atof):
	(sc_prohibit_jm_in_m4, sc_root_tests, sc_tight_scope):
	(sc_trailing_space): New rules.
	(sc_xalloc_h_in_src): Remove.
	(sc_cast_of_argument_to_free, sc_cast_of_x_alloc_return_value):
	(sc_space_tab, sc_error_exit_success, sc_changelog):
	(sc_system_h_headers, sc_sun_os_names, sc_unmarked_diagnostics):
	(makefile-check, po-check, author_mark_check):
	(makefile_path_separator_check, copyright-check):
	Use grep -n, to make it easier to find violations.
	Use CVS_LIST and CVS_LIST_EXCEPT.
	(header_regexp, h_re): Remove.
	(dd_c): New macro.
	(sc_dd_max_sym_length, .re-list, news-date-check): New rules.
	(my-distcheck): Use more-modern GCC flags.
	(signatures, %.asc): Remove.
	(rel-files, announcement): Remove signatures.
	Restore old updating code, even though we don't use it, so
	that we're the same as coreutils.
	(alpha, beta, major): Depend on news-date-check.
	Make the upload commands.

	* data/c.m4, data/lalr1.cc, data/yacc.c: Normalize white space.
	* lib/abitset.h, lib/bbitset.h, lib/bitset.h: Likewise.
	* lib/bitset_stats.c, lib/ebitset.h, lib/lbitset.c: Likewise.
	* lib/libitset.h, lib/timevar.c, lib/vbitset.h: Likewise.
	* src/Makefile.am, src/gram.c, src/muscle_tab.h: Likewise.
	* src/parse-gram.y, src/system.h, src/tables.c, src/vcg.c: Likewise.
	* src/vcg_defaults.h, tests/cxx-type.at, tests/existing.at: Likewise.
	* tests/sets.at: Likewise.

	* data/m4sugar/m4sugar.m4: Sync from Autoconf, except that
	we comment out the Autoconf version number.
	* doc/bison.texinfo (Calc++ Scanner): Don't use atoi, as
	it's error-prone and "make maintainer-distcheck" rejects it.

	* lib/subpipe.c: Include <fcntl.h> without checking for HAVE_FCNTL_H.
	Indent calls to "error" to pacify "make maintainer-distcheck",
	when the calls are not intended to be translated.
	* m4/subpipe.m4 (BISON_PREREQ_SUBPIPE): Don't check for fcntl.h.

	* src/Makefile.am (DEFS): Use +=, to pacify
	"make maintainer-distcheck".
	(bison_SOURCES): Add scan-skel.h.
	(sc_tight_scope): New rule, from coreutils.

	* src/files.c (src_extension, header_extension):
	Now static, not extern.
	* src/getargs.c (short_options): Likewise.
	* src/muscle_tab.c (muscle_table): Likewise.
	* src/parse-gram.y (current_class, current_type, current_prec):
	Likewise.
	* src/reader.c (grammar_end, previous_rule_end): Likewise.
	* src/getargs.h: Redo comments to pacify "make maintainer-distcheck".
	* src/main.c (main): Cast bindtextdomain and textdomain calls to
	void, to avoid warning when NLS is disabled.
	* src/output.c: Include scan-skel.h.
	(scan_skel): Remove decl, since scan-skel.h does this.
	(output_skeleton):
	Indent calls to "error" to pacify "make maintainer-distcheck".
	* src/print_graph.c: Don't include <obstack.h>, as system.h does this.
	* src/reader.h (gram_end, gram_lineno): New decls to pacify
	"make maintainer-distcheck".
	* src/scan-skel.l (skel_lex, skel_get_lineno, skel_get_in):
	(skel_get_out, skel_get_leng, skel_get_text, skel_set_lineno):
	(skel_set_in, skel_set_out, skel_get_debug, skel_set_debug):
	(skel_lex_destroy, scan_skel): Move these decls to...
	* src/scan-skel.h: New file.
	* src/uniqstr.c (uniqstr_assert):
	Indent calls to "error" to pacify "make maintainer-distcheck".

	* tests/Makefile.am ($(srcdir)/package.m4): Use $(VAR),
	not @VAR@.

	* tests/torture.at: Revamp to avoid misuse of atoi that
	"make maintainer-distcheck" complained about.

	* examples/extexi (message): Don't print a message more than once,
	and omit line-number decoration that makes Emacs compile think
	that informative messages are worth worrying about.

2005-07-22  Paul Eggert  <eggert@cs.ucla.edu>

	* configure.ac: Update version number.

	* Makefile.am (SUBDIRS): Add examples; somehow this got removed
	accidentally.
	* examples/calc++/calc++-parser.yy: Remove from CVS, as it's
	autogenerated by the maintainer.
	* examples/calc++/.cvsignore: Add *.yy.

	* lib/bitset.c (bitset_alloc): Don't cast xcalloc result.
	* lib/bitset_stats.c (bitset_stats_init): Likewise.
	* lib/bitsetv.c (bitsetv_alloc): Likewise.

	* po/POTFILES.in: Add lib/xalloc-die.c; remove lib/xmalloc.c.

	* src/relation.c (relation_transpose): Rewrite to avoid bogus complaint
	from maintainer-distcheck about casting the argument of 'free'.

	* NEWS: Mention recent yytname changes.
	* THANKS: Add Anthony Heading, twlevo@xs4all.nl.

	* bootstrap: For translations that have not yet been upgraded to
	the new runtime-po domain, prime the pump by extracting the
	relevant strings from the obsolete translations.  This code can be
	removed once the bison-runtime domain has been translated by each
	team.

	* src/scan-gram.l (<SC_PRE_CODE>.): Don't double-quote token names,
	now that token names are already quoted.

	Fix problem reported by Anthony Heading.
	* data/glr.c (YYTOKEN_TABLE): New macro.
	(yytname): Define if YYTOKEN_TABLE.
	* data/yacc.c (YYTOKEN_TABLE, yytname): Likewise.
	* data/lalr1.cc (YYTOKEN_TABLE, yytname_): Likewise.
	(YYERROR_VERBOSE): Define the same way the other skeletons do.
	* src/output.c (prepare_symbols): Output token_table_flag.

2005-07-21  Paul Eggert  <eggert@cs.ucla.edu>

	* data/glr.c (yyinitGLRStack, yyreturn): Don't call malloc
	again if the first call fails.

	* data/glr.c (yytnamerr): New function.
	(yyreportSyntaxError): Use it to dequote most string literals.
	* data/lalr1.c (yytname_): Renamed from yyname_, for compatibility
	with other skeletons.  All uses changed.
	(yytnameerr_): New function.
	(yyreport_syntax_error): Use it to dequote most string literals.
	* data/yacc.c (yytnamerr): New function.
	(yyerrlab): Use it to decode most string literals.
	* doc/bison.texinfo (Decl Summary, Calling Convention):
	Clarify quoting convention of yytname.
	* src/output.c (prepare_symbols): Quote all names.  This undoes
	the 2005-04-17 change, which is now accomplished (mostly) via
	changes in the parsers as described above.
	* tests/regression.at (Token definitions, Web2c Actions):
	Undo most 2005-04-17 change here, too.

2005-07-20  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems reported by twlevo@xs4all.nl.
	* tests/cxx-type.at: Don't pipe output of ./types through sed to
	remove trailing spaces.  This loses the exit status of ./types,
	and isn't needed since ./types shouldn't be emitting trailing
	spaces.
	* data/glr.c (yyreturn): Don't pop stack if yyinitStateSet failed,
	as the stack isn't valid in that case.

	* src/scan-gram.l (gram_get_lineno, gram_get_in, gram_get_out):
	(gram_get_leng, gram_get_text, gram_set_lineno, gram_set_in):
	(gram_set_out, gram_get_debug, gram_set_debug, gram_lex_destroy):
	Add declarations to pacify "gcc -Wmissing-prototypes" when flex 2.5.31
	is used.
	* src/scan-skel.l (skel_get_lineno, skel_get_in, skel_get_out):
	(skel_get_leng, skel_get_text, skel_set_lineno, skel_set_in):
	(skel_set_out, skel_get_debug, skel_set_debug, skel_lex_destroy):
	Likewise.

	* tests/cxx-type.at (_AT_TEST_GLR_CXXTYPES): Work even with
	overly-picky compilers that reject 'char *foo = "bar";'.

	* src/symtab.c (SYMBOL_ATTR_PRINT, symbol_print): Direct output
	to FILE * parameter, not to stderr.  This fixes a typo introduced
	in the 2005-07-12 change.

	* lib/subpipe.c (create_subpipe): Rewrite slightly to avoid
	warnings from GCC 4.

	* data/glr.c (yyexpandGLRStack, yyaddDeferredAction, yyexpandGLRStack):
	(yyglrShiftDefer, yysplitStack):
	Remove unused parameters b4_pure_formals.  All uses changed.
	(yyglrShift): Remove unused parameters b4_user_formals.
	All uses changed.
	(yyglrReduce): Removed unused parameter yylocp.  All uses changed.

2005-07-18  Paul Eggert  <eggert@cs.ucla.edu>

	Destructor cleanups and regularization among the three skeletons.
	* NEWS: Document the behavior changes.
	* data/glr.c (yyrecoverSyntaxError): Don't bother to pop the
	stack before failing, as the cleanup code will do it for us now.
	* data/lalr1.cc (yyerrlab): Likewise.
	* data/glr.c (yyparse): Pop everything off the stack before
	freeing it, so that destructors get called properly.
	* data/lalr1.cc (yyreturn): Likewise.
	* data/yacc.c (yyreturn): Pop and destroy the start symbol, too.
	This is more consistent.
	* doc/bison.texinfo (Destructor Decl): Mention more reasons
	why destructors might be called.  1.875 -> 2.1.
	(Destructor Decl, Decl Summary, Table of Symbols):
	Some English-language cleanups for %destructor.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR):
	Add output line for destructor of start symbol.
	* tests/calc.at (AT_CHECK_CALC): Add one to line counts,
	because of that same extra output line.

	* NEWS: Document minor wording changes in diagnostics of
	Bison-generated parsers.
	* data/glr.c (yyMemoryExhausted): Renamed from yyStackOverflow.
	Remove unused formals.  All uses changed.
	(yyreportAmbiguity): "ambiguity detected" -> "syntax is ambiguous".
	(yyparse): Rename yyoverflowlab to yyexhaustedlab.
	* data/yacc.c (yyparse): "parser stack overflow" -> "memory exhausted".
	Rename yyoverflowab to yyexhaustedlab.
	When memory exhaustion occurs during syntax-error reporting,
	report it separately rather than in a single diagnostic; this
	eases translation.
	* doc/bison.texinfo (Memory Management): Renamed from Stack Overflow.
	(Memory Exhausted): Renamed from Parser Stack Overflow.
	Revamp wording slightly to prefer "memory exhaustion".
	* tests/actions.at: "parser stack overflow" -> "memory exhausted".

	* data/c.m4 (b4_yysymprint_generate): Use YYFPRINTF, not fprintf.

	Add i18n support to the GLR skeleton.  Partially fix the C++
	skeleton; a C++ expert needs to finish this.  Remove debugging
	msgids; there's little point to having them translated, since they
	can be understood only by someone who can read the
	(English-language) source code.

	Generate runtime-po/bison-runtime.pot automatically, so that we
	don't have to worry about garbage getting in that file.  We'll
	make sure after the next official release that old msgids don't
	get lost.  See
	<http://lists.gnu.org/archive/html/bison-patches/2005-07/msg00119.html>.

	* runtime-po/Makefile.in.in, runtime-po/bison-runtime.pot: Remove.
	Now auto-generated.
	* PACKAGING: Don't claim that Gawk, GCC, Perl use this method yet.
	Fix typos in explanations of the runtime file.
	* bootstrap: Change gettext keyword from YYI18N to YY_.
	Use standard Makefile.in.in in runtime-po, since we'll arrange
	for backward-compatible bison-runtime.po files in a different way.
	* data/glr.c (YY_): New macro, from yacc.c.
	(yyuserAction, yyreportAmbiguity, yyreportSyntaxError, yyparse):
	Translate messages intended for users.
	(yyreportSyntaxError): Change "virtual memory" to "memory" to match
	the wording in the other skeletons.  We don't know that the memory
	is virtual.
	* data/lalr1.cc (YY_): Renamed from _.  All uses changed.
	Use same method that yacc.c uses.
	Don't translate debugging messages.
	(yy::yyreport_syntax_error): Put in a FIXME for the i18n stuff;
	it doesn't work (yet), and requires C++ expertise to fix.
	* data/yacc.c (YY_): Renamed from YY18N.  All uses changed.
	Move defn to a more logical place, to be consistent with other
	skeletons.
	Don't translate debugging messages.
	Don't assume line numbers fit in unsigned int; use unsigned long fmts.
	* doc/bison.texinfo: Mention <libintl.h>.  Change glibc cross reference
	to gettext cross reference.  Add indexing terms.  Mention YYENABLE_NLS.
	* runtime-po/POTFILES.in: Add data/glr.c, data/lalr1.cc.

	Fix yyerror / yylex test glitches noted by twlevo@xs4all.nl.
	* tests/cxx-type.at (_AT_TEST_GLR_CXXTYPES): Have yyerror return
	void, not int.
	* tests/glr-regression.at (Badly Collapsed GLR States):
	Likewise.
	(Improper handling of embedded actions and dollar(-N) in GLR parsers):
	yylex should return 0 at EOF rather than aborting.

	Improve tests for stack overflow in GLR parser.
	Problem reported by twlevo@xs4all.nl.
	* data/glr.c (struct yyGLRStack): Remove yyerrflag member.
	All uses removed.
	(yyStackOverflow): Just longjmp, but with value 2 so that caller
	can handle the problem.
	(YYCHK1): Use goto (a la yacc.c) rather than setting a flag.
	(yyparse): New local variable yyresult to record the result.
	Use result of setjmp to set it, rather than storing itinto
	struct.
	(yyDone): Remove label.
	(yyacceptlab, yyabortlab, yyoverflowlab, yyreturn): New labels,
	to mimic yacc.c.  Do not discard lookahead if it's EOF (possible
	if YYABORT is used).
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Exit with
	yyparse status; put status > 1 into diagnostic.
	Check that status==2 works.
	* tests/calc.at, tests/cxx-type.at, tests/glr-regression.at:
	Use exit status 3 for failure to open (which shouldn't happen).

2005-07-17  Paul Eggert  <eggert@cs.ucla.edu>

	* tests/conflicts.at (%nonassoc and eof):  Don't exit with status
	1 on syntax error; just let yyparse do its thing.
	* tests/glr-regression.at (Badly Collapsed GLR States): Likewise.
	* tests/torture.at (AT_DATA_STACK_TORTURE): Likewise.
	(Exploding the Stack Size with Alloca):
	(Exploding the Stack Size with Malloc):
	Expect exit status 2, not 1, since the parser is supposed to blow
	its stack.  Problem reported by twlevo@xs4all.nl.

	* data/glr.c (yyparse): Don't assume that the initial calls
	to YYMALLOC succeed; in that case, yyparse incorrectly returned 0.
	Print a stack-overflow message and fail instead.
	Initialize the line-number information before creating the stack,
	so that the stack-overflow message can report line zero safely.

2005-07-14  Paul Eggert  <eggert@cs.ucla.edu>

	Fix problems reported by twlevo@xs4all.nl.
	* data/glr.c (YYSTACKEXPANDABLE): Don't define if already defined.
	(yyuserMerge): Provide a default case if b4_mergers is empty.
	* tests/cxx-type.at (_AT_TEST_GLR_CXXTYPES): Define YYSTACKEXPANDABLE.
	* tests/glr-regression.at
	(Improper handling of embedded actions and dollar(-N) in GLR parsers):
	Add casts to pacify C++ compilers.
	* tests/glr-regression.at (Improper merging of GLR delayed action
	sets): Declare yylex before using it.
	* tests/Makefile.am (maintainer-check-g++): Fix a stray
	$(GXX) that escaped the renaming of GXX to CXX.  Remove bogus
	test for valgrind; valgrind is independent of g++.
	(maintainer-check-posix): Add _POSIX2_VERSION=200112, to check
	for compatibility with POSIX 1003.1-2001 (if running coreutils).
	* tests/cxx-type.at (_AT_TEST_GLR_CXXTYPES): Port to stricter C++.
	Use a destructor, so that we can expand the stack.  Change
	YYSTYPE to char * so that we can free it.  Cast result of malloc.

2005-07-13  Paul Hilfinger  <hilfingr@CS.Berkeley.EDU>

	* data/glr.c (yyuserAction): Fix uninitialized variable that caused
	a valgrind failure.  Problem reported by twlevo@xs4all.nl.

2005-07-13  Paul Eggert  <eggert@cs.ucla.edu>

	* PACKAGING: New file, suggested by Bruno Haible and taken from
	similar wording in gettext's PACKAGING file.
	* NEWS: Mention PACKAGING.
	* Makefile.am (EXTRA_DIST): Add PACKAGING.

2005-07-12  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: Document recent i18n improvements.
	* bootstrap: Get runtime translations into runtime-po.
	Create runtime-po files automatically, if possible.
	* configure.ac: Invoke BISON_I18N, so that we eat our own dog food.
	* data/yacc.c: Rewrite inclusion of <libintl.h> so that ENABLE_NLS
	does not infringe on the user's name space.
	(YYENABLE_NLS): Renamed from ENABLE_BISON_NLS.
	* doc/bison.texinfo (Internationalization): Revamp the English
	and Texinfo syntax a bit, to try to make it clearer.
	(Bison Options, Option Cross Key): Mention --print-localedir.
	* m4/bison-i18n.m4 (BISON_I18N): Rename ENABLE_BISON_NLS to
	YYENABLE_NLS.  Quote a bit more.
	* runtime-po/.cvsignore: New file.
	* runtime-po/Makefile.in.in (mostlyclean): Remove *.old.pot.
	* runtime-po/Rules-quot: Remove; now created by bootstrap.
	* runtime-po/quot.sed: Likewise.
	* runtime-po/boldquot.sed: Likewise.
	* runtime-po/en@quot.header: Likewise.
	* runtime-po/en@boldquot.header: Likewise.
	* runtime-po/insert-header.sin: Likewise.
	* runtime-po/remove-potcdate.sin: Likewise.
	* runtime-po/Makevars: Likewise.
	* runtime-po/LINGUAS: Likewise.
	* runtime-po/de.po: Likewise; we will rely on the translation project
	to maintain this, so "bootstrap" should get it.
	* src/getarg.c (PRINT_LOCALEDIR_OPTION): Let the C compiler determine
	its value.
	* src/main.c (main): Bind the bison-runtime domain, too.

2005-07-12  Bruno Haible  <bruno@clisp.org>

	* data/yacc.c: Include <libintl.h> when NLS is enabled.
	(YYI18N): Renamed from _. Use dgettext when NLS is enabled.
	* po/POTFILES.in: Remove autogenerated file src/parse-gram.c.
	* runtime-po: New directory.
	* runtime-po/Makefile.in.in: New file, copied from po/, with modified
	$(DOMAIN).pot-update rule, so that old messages are never dropped.
	* runtime-po/Rules-quot: New file, copied from po/.
	* runtime-po/quot.sed: Likewise.
	* runtime-po/boldquot.sed: Likewise.
	* runtime-po/en@quot.header: Likewise.
	* runtime-po/en@boldquot.header: Likewise.
	* runtime-po/insert-header.sin: Likewise.
	* runtime-po/remove-potcdate.sin: Likewise.
	* runtime-po/Makevars: New file.
	* runtime-po/POTFILES.in: New file.
	* runtime-po/LINGUAS: New file.
	* runtime-po/bison-runtime.pot: New file.
	* runtime-po/de.po: New file.
	* m4/bison.m4: New file.
	* Makefile.am (SUBDIRS): Add runtime-po.
	(aclocaldir, aclocal_DATA): New variables.
	* configure.ac: Add AC_CONFIG_FILES of runtime-po/Makefile.in.
	Define aclocaldir.
	* src/getargs.c (usage): Document --print-localedir option.
	(PRINT_LOCALEDIR_OPTION): New enum item.
	(long_options): Add --print-localedir option.
	(getargs): Handle --print-localedir option.
	* doc/bison.texinfo (Bison Parser): Remove paragraph about _().
	(Internationalization): New section.

2005-07-12  Akim Demaille  <akim@epita.fr>

	* src/symtab.h, src/symtab.c (symbol_print): Swap the arguments,
	for consistency with the rest of the code.
	* src/symlist.h, src/symlist.c (symbol_list_print): Ditto.
	Add separators.

2005-07-12  Akim Demaille  <akim@epita.fr>

	* src/parse-gram.y: Use %printer instead of YYPRINT.

2005-07-12  Akim Demaille  <akim@epita.fr>

	* src/symtab.h, src/symtab.c (symbol_print): New.
	* src/symlist.h, src/symlist.c (symbol_list_print): New.
	* src/symlist.c (symbol_list_n_type_name_get): Report the culprit.

2005-07-12  Akim Demaille  <akim@epita.fr>

	* data/glr.c (b4_syncline): Fix (swap) the definitions of
	b4_at_dollar and b4_dollar_dollar.

2005-07-11  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/bison.texinfo (Mystery Conflicts): Add reference to DeRemer
	and Pennello's paper.

2005-07-09  Paul Eggert  <eggert@cs.ucla.edu>

	* data/yacc.c (yyparse): Undo previous patch.  Instead,
	set yylsp[0] and yyvsp[0] only if the initial action
	sets yylloc and yylval, respectively.

	* data/yacc.c (yyparse): In the initial action, set
	yylsp[0] and yyvsp[0] rather than yylloc and yylval.
	This avoids the use of undefined variables if the initial
	action does not set yylloc and/or yylval.

2005-07-07  Paul Eggert  <eggert@cs.ucla.edu>

	* examples/calc++/calc++-driver.cc, examples/calc++/calc++-driver.hh:
	* examples/calc++/calc++-scanner.ll, examples/calc++/calc++.cc:
	Remove from CVS.  These files are automatically generated.
	* examples/extexi: Clarify that this file is now part of Bison,
	not GNU M4, and that it works with any POSIX-compatible Awk.
	* examples/calc++/Makefile.am (run_extexi): Remove; not used.
	($(calc_extracted)): Renamed from $(calc_sources_extracted),
	so that we also get calc++-parser.yy.  Generate it.
	Use $(AWK), not gawk, since any conforming Awk will do.
	Put comment before action, since older 'make' can't handle comment
	in action.
	$(BUILT_SOURCES): List all built sources, not just some of them.
	$(MAINTAINERCLEANFILES): Remove *.stamp, and all built sources.
	$($(srcdir)/calc++-parser.stamp): Work even if POSIXLY_CORRECT.
	$($(calc_sources_generated)): Remove unnecessary test for existence
	of target.  (This had a shell syntax error anyway; a stray "x".)
	(calc_extracted): List $(srcdir)/calc++-parser.yy, not
	calc++-parser.yy.
	* examples/.cvsignore, examples/calc++/.cvsignore: New files.

	* bootstrap (gnulib_modules): Add gettext, now that it's no longer